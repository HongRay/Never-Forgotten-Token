{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/wallets/dist/http-rpc-client-0a079e80.browser.esm.js"],"sourcesContent":["import { utils, BigNumber, providers } from 'ethers';\nimport { i as isTwUrl } from './url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from './headers-733a8199.browser.esm.js';\nimport { e as isZkSyncChain, M as MANAGED_ACCOUNT_GAS_BUFFER } from './utils-f58e7acc.browser.esm.js';\n\nasync function hexlifyUserOp(\n// TODO: types\nop) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    if (await isZkSyncChain(this.chainId)) {\n      return;\n    }\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async zkPaymasterData(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_paymasterData\", [await hexlifyUserOp({\n      ...transactionInput,\n      gas: transactionInput.gasLimit\n    })]);\n  }\n  async zkBroadcastTransaction(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_broadcastTransaction\", [transactionInput]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nexport { DEBUG as D, HttpRpcClient as H, getUserOpHashV06 as g, hexlifyUserOp as h, randomNonce as r };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/wallets/dist/zk-connector-fada2157.browser.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './defineProperty-350fc508.browser.esm.js';\nimport { C as Connector } from './connector-05689d68.browser.esm.js';\nimport { H as HttpRpcClient } from './http-rpc-client-0a079e80.browser.esm.js';\nimport { e as isZkSyncChain, f as ENTRYPOINT_ADDRESS } from './utils-f58e7acc.browser.esm.js';\nimport { Signer, ethers, utils, BigNumber } from 'ethers';\nimport { defineReadOnly } from 'ethers/lib/utils';\nimport 'eventemitter3';\nimport './url-a45219bd.browser.esm.js';\nimport '@thirdweb-dev/chains';\nimport './headers-733a8199.browser.esm.js';\nimport '../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport '@thirdweb-dev/sdk';\nimport '@account-abstraction/contracts';\n\nconst DEFAULT_GAS_PER_PUBDATA_LIMIT = 50000;\nconst EIP712_TX_TYPE = 0x71;\nconst EIP712_TYPES = {\n  Transaction: [{\n    name: \"txType\",\n    type: \"uint256\"\n  }, {\n    name: \"from\",\n    type: \"uint256\"\n  }, {\n    name: \"to\",\n    type: \"uint256\"\n  }, {\n    name: \"gasLimit\",\n    type: \"uint256\"\n  }, {\n    name: \"gasPerPubdataByteLimit\",\n    type: \"uint256\"\n  }, {\n    name: \"maxFeePerGas\",\n    type: \"uint256\"\n  }, {\n    name: \"maxPriorityFeePerGas\",\n    type: \"uint256\"\n  }, {\n    name: \"paymaster\",\n    type: \"uint256\"\n  }, {\n    name: \"nonce\",\n    type: \"uint256\"\n  }, {\n    name: \"value\",\n    type: \"uint256\"\n  }, {\n    name: \"data\",\n    type: \"bytes\"\n  }, {\n    name: \"factoryDeps\",\n    type: \"bytes32[]\"\n  }, {\n    name: \"paymasterInput\",\n    type: \"bytes\"\n  }]\n};\nclass ZkWrappedSigner extends Signer {\n  constructor(signer, httpRpcClient) {\n    super();\n    this.signer = signer;\n    defineReadOnly(this, \"provider\", signer.provider);\n    this.httpRpcClient = httpRpcClient;\n  }\n  async getAddress() {\n    return await this.signer.getAddress();\n  }\n  async signMessage(message) {\n    return await this.signer.signMessage(message);\n  }\n  async signTransaction(transaction) {\n    return await this.signer.signTransaction(transaction);\n  }\n  connect(provider) {\n    return new ZkWrappedSigner(this.signer.connect(provider), this.httpRpcClient);\n  }\n  _signTypedData(domain, types, value) {\n    return this.signer._signTypedData(domain, types, value);\n  }\n  async sendTransaction(transaction) {\n    return await this.sendZkSyncTransaction(transaction);\n  }\n  async sendZkSyncTransaction(_transaction) {\n    let transaction = await this.populateTransaction(_transaction);\n    if (!transaction.chainId) {\n      throw new Error(\"ChainId is required to send a ZkSync transaction\");\n    }\n    if (!this.provider) {\n      throw new Error(\"Provider is required to send a ZkSync transaction\");\n    }\n    const address = await this.getAddress();\n    const gasLimit = ethers.BigNumber.from(transaction.gasLimit || (await this.provider.estimateGas(transaction))).mul(3);\n    const gasPrice = ethers.BigNumber.from(transaction.gasPrice || (await this.provider.getGasPrice())).mul(2);\n    if (!transaction.maxFeePerGas) {\n      transaction.maxFeePerGas = gasPrice;\n    } else {\n      transaction.maxFeePerGas = transaction.maxFeePerGas.mul(2);\n    }\n    if (!transaction.maxPriorityFeePerGas) {\n      transaction.maxPriorityFeePerGas = gasPrice;\n    } else {\n      transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas.mul(2);\n    }\n    transaction = {\n      ...transaction,\n      from: address,\n      gasLimit,\n      gasPrice,\n      chainId: (await this.provider.getNetwork()).chainId,\n      nonce: await this.provider.getTransactionCount(address),\n      type: 113,\n      value: BigInt(0)\n    };\n    const pmDataResult = await this.httpRpcClient?.zkPaymasterData(transaction);\n    transaction.customData = {\n      gasPerPubdata: DEFAULT_GAS_PER_PUBDATA_LIMIT,\n      factoryDeps: [],\n      paymasterParams: {\n        paymaster: pmDataResult.paymaster,\n        paymasterInput: pmDataResult.paymasterInput\n      }\n    };\n    const eip712tx = {\n      txType: EIP712_TX_TYPE,\n      from: BigInt(transaction.from || (await this.getAddress())).toString(),\n      to: BigInt(transaction.to || \"0x0\").toString(),\n      gasLimit: transaction.gasLimit ? Number(transaction.gasLimit) : 0,\n      gasPerPubdataByteLimit: DEFAULT_GAS_PER_PUBDATA_LIMIT,\n      maxFeePerGas: ethers.BigNumber.from(transaction.maxFeePerGas).toNumber(),\n      maxPriorityFeePerGas: ethers.BigNumber.from(transaction.maxPriorityFeePerGas).toNumber(),\n      paymaster: BigInt(pmDataResult.paymaster).toString(),\n      nonce: ethers.BigNumber.from(transaction.nonce).toNumber(),\n      value: ethers.BigNumber.from(transaction.value).toNumber(),\n      data: transaction.data || \"0x\",\n      factoryDeps: [],\n      paymasterInput: ethers.utils.arrayify(pmDataResult.paymasterInput)\n    };\n    const signature = await this._signTypedData({\n      name: \"zkSync\",\n      version: \"2\",\n      chainId: transaction.chainId\n    }, EIP712_TYPES, eip712tx);\n    const serializedTx = this.serialize(transaction, signature);\n    const zkSignedTx = {\n      from: transaction.from?.toString() || (await this.getAddress()),\n      to: transaction.to?.toString() || \"\",\n      gas: transaction.gasLimit?.toString() || \"\",\n      maxFeePerGas: transaction.maxFeePerGas?.toString() || \"0\",\n      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas?.toString() || \"0\",\n      signedTransaction: serializedTx,\n      paymaster: pmDataResult.paymaster\n    };\n    const broadcastResult = await this.httpRpcClient?.zkBroadcastTransaction(zkSignedTx);\n    const hash = broadcastResult.transactionHash;\n    return await this.provider?.getTransaction(hash);\n  }\n  serialize(transaction, signature) {\n    if (!transaction.customData && transaction.type !== EIP712_TX_TYPE) {\n      return utils.serializeTransaction(transaction, signature);\n    }\n    if (!transaction.chainId) {\n      throw Error(\"Transaction chainId isn't set!\");\n    }\n    function formatNumber(value, name) {\n      const result = utils.stripZeros(BigNumber.from(value).toHexString());\n      if (result.length > 32) {\n        throw new Error(`Invalid length for ${name}!`);\n      }\n      return result;\n    }\n    if (!transaction.from) {\n      throw new Error(\"Explicitly providing `from` field is required for EIP712 transactions!\");\n    }\n    const from = transaction.from;\n    const meta = transaction.customData ?? {};\n    const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;\n    const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n    const fields = [formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(maxPriorityFeePerGas, \"maxPriorityFeePerGas\"), formatNumber(maxFeePerGas, \"maxFeePerGas\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to ? utils.getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\"];\n    if (signature) {\n      const sig = utils.splitSignature(signature);\n      fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n      fields.push(utils.stripZeros(sig.r));\n      fields.push(utils.stripZeros(sig.s));\n    } else {\n      fields.push(formatNumber(transaction.chainId, \"chainId\"));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n    fields.push(formatNumber(transaction.chainId, \"chainId\"));\n    fields.push(utils.getAddress(from));\n\n    // Add meta\n    fields.push(formatNumber(meta.gasPerPubdata || DEFAULT_GAS_PER_PUBDATA_LIMIT, \"gasPerPubdata\"));\n    fields.push((meta.factoryDeps ?? []).map(dep => utils.hexlify(dep)));\n    if (meta.customSignature && ethers.utils.arrayify(meta.customSignature).length === 0) {\n      throw new Error(\"Empty signatures are not supported!\");\n    }\n    fields.push(meta.customSignature || \"0x\");\n    if (meta.paymasterParams) {\n      fields.push([meta.paymasterParams.paymaster, ethers.utils.hexlify(meta.paymasterParams.paymasterInput)]);\n    } else {\n      fields.push([]);\n    }\n    return utils.hexConcat([[EIP712_TX_TYPE], utils.RLP.encode(fields)]);\n  }\n}\n\nclass ZkSyncConnector extends Connector {\n  constructor(config) {\n    super();\n    _defineProperty(this, \"chainId\", 1);\n    this.config = config;\n  }\n  async connect(args) {\n    this.personalWallet = args.personalWallet;\n    this.chainId = await (await this.personalWallet.getSigner()).getChainId();\n    if (!(await isZkSyncChain(this.chainId))) {\n      throw new Error(\"Invalid zksync chain id\");\n    }\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = this.config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    this.httpRpcClient = new HttpRpcClient(bundlerUrl, entryPointAddress, this.chainId, this.config.clientId, this.config.secretKey);\n    return this.getAddress();\n  }\n  disconnect() {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async getSigner() {\n    if (!this.personalWallet) {\n      throw new Error(\"Wallet not connected\");\n    }\n    return new ZkWrappedSigner(await this.personalWallet.getSigner(), this.httpRpcClient);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  switchChain(chainId) {\n    throw new Error(\"Method not implemented.\");\n  }\n  isConnected() {\n    return Promise.resolve(!!this.personalWallet);\n  }\n  setupListeners() {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {\n    throw new Error(\"Method not implemented.\");\n  }\n  async getProvider() {\n    if (!this.getSigner()) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n}\n\nexport { ZkSyncConnector };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}