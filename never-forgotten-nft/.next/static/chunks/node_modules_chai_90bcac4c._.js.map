{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/flag.js"],"sourcesContent":["/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;;;;;;;;CAiBC,GAED,OAAO,OAAO,GAAG,SAAS,KAAK,GAAG,EAAE,GAAG,EAAE,KAAK;IAC5C,IAAI,QAAQ,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,GAAG,OAAO,MAAM,CAAC,KAAK;IAC7D,IAAI,UAAU,MAAM,KAAK,GAAG;QAC1B,KAAK,CAAC,IAAI,GAAG;IACf,OAAO;QACL,OAAO,KAAK,CAAC,IAAI;IACnB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/test.js"],"sourcesContent":["/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test an object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;CAEC,GAED,IAAI;AAEJ;;;;;;;;;CASC,GAED,OAAO,OAAO,GAAG,SAAS,KAAK,GAAG,EAAE,IAAI;IACtC,IAAI,SAAS,KAAK,KAAK,WACnB,OAAO,IAAI,CAAC,EAAE;IAClB,OAAO,SAAS,CAAC,OAAO;AAC1B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/expectTypes.js"],"sourcesContent":["/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;;;CAYC,GAED,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,OAAO,OAAO,GAAG,SAAS,YAAY,GAAG,EAAE,KAAK;IAC9C,IAAI,UAAU,KAAK,KAAK;IACxB,IAAI,OAAO,KAAK,KAAK;IAErB,UAAU,UAAU,UAAU,OAAO;IAErC,MAAM,KAAK,KAAK;IAChB,QAAQ,MAAM,GAAG,CAAC,SAAU,CAAC;QAAI,OAAO,EAAE,WAAW;IAAI;IACzD,MAAM,IAAI;IAEV,4DAA4D;IAC5D,IAAI,MAAM,MAAM,GAAG,CAAC,SAAU,CAAC,EAAE,KAAK;QACpC,IAAI,MAAM,CAAC;YAAE;YAAK;YAAK;YAAK;YAAK;SAAK,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,MAAM,OAAO;QACrE,IAAI,KAAK,MAAM,MAAM,GAAG,KAAK,UAAU,MAAM,MAAM,GAAG,IAAI,QAAQ;QAClE,OAAO,KAAK,MAAM,MAAM;IAC1B,GAAG,IAAI,CAAC;IAER,IAAI,UAAU,KAAK,KAAK,WAAW;IAEnC,IAAI,CAAC,MAAM,IAAI,CAAC,SAAU,QAAQ;QAAI,OAAO,YAAY;IAAU,IAAI;QACrE,MAAM,IAAI,eACR,UAAU,2BAA2B,MAAM,WAAW,UAAU,UAChE,WACA;IAEJ;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/getActual.js"],"sourcesContent":["/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;CASC,GAED,OAAO,OAAO,GAAG,SAAS,UAAU,GAAG,EAAE,IAAI;IAC3C,OAAO,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,EAAE,GAAG,IAAI,IAAI;AAC7C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/config.js"],"sourcesContent":["module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON'],\n\n  /**\n   * ### config.deepEqual\n   *\n   * User configurable property, defines which a custom function to use for deepEqual\n   * comparisons.\n   * By default, the function used is the one from the `deep-eql` package without custom comparator.\n   *\n   *     // use a custom comparator\n   *     chai.config.deepEqual = (expected, actual) => {\n   *        return chai.util.eql(expected, actual, {\n   *           comparator: (expected, actual) => {\n   *              // for non number comparison, use the default behavior\n   *              if(typeof expected !== 'number') return null;\n   *              // allow a difference of 10 between compared numbers\n   *              return typeof actual === 'number' && Math.abs(actual - expected) < 10\n   *           }\n   *        })\n   *     };\n   *\n   * @param {Function}\n   * @api public\n   */\n\n  deepEqual: null\n\n};\n"],"names":[],"mappings":"AAAA,OAAO,OAAO,GAAG;IAEf;;;;;;;;;;;GAWC,GAED,cAAc;IAEd;;;;;;;;;;;GAWC,GAED,UAAU;IAEV;;;;;;;;;;;;;;;;;;GAkBC,GAED,mBAAmB;IAEnB;;;;;;;;;;;;;;;;GAgBC,GAED,UAAU;IAEV;;;;;;;;;;;;;;;;GAgBC,GAED,mBAAmB;QAAC;QAAQ;QAAS;QAAW;KAAS;IAEzD;;;;;;;;;;;;;;;;;;;;;GAqBC,GAED,WAAW;AAEb","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/inspect.js"],"sourcesContent":["// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar loupe = require('loupe');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var options = {\n    colors: colors,\n    depth: (typeof depth === 'undefined' ? 2 : depth),\n    showHidden: showHidden,\n    truncate: config.truncateThreshold ? config.truncateThreshold : Infinity,\n  };\n  return loupe.inspect(obj, options);\n}\n"],"names":[],"mappings":"AAAA,+CAA+C;AAC/C,2FAA2F;AAE3F,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,OAAO,OAAO,GAAG;AAEjB;;;;;;;;;;;;;;CAcC,GACD,SAAS,QAAQ,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM;IAC7C,IAAI,UAAU;QACZ,QAAQ;QACR,OAAQ,OAAO,UAAU,cAAc,IAAI;QAC3C,YAAY;QACZ,UAAU,OAAO,iBAAiB,GAAG,OAAO,iBAAiB,GAAG;IAClE;IACA,OAAO,MAAM,OAAO,CAAC,KAAK;AAC5B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/objDisplay.js"],"sourcesContent":["/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @returns {string} stringified object\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;CAEC,GAED,IAAI;AACJ,IAAI;AAEJ;;;;;;;;;;;;CAYC,GAED,OAAO,OAAO,GAAG,SAAS,WAAW,GAAG;IACtC,IAAI,MAAM,QAAQ,MACd,OAAO,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC;IAE1C,IAAI,OAAO,iBAAiB,IAAI,IAAI,MAAM,IAAI,OAAO,iBAAiB,EAAE;QACtE,IAAI,SAAS,qBAAqB;YAChC,OAAO,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAC7B,eACA,gBAAgB,IAAI,IAAI,GAAG;QACjC,OAAO,IAAI,SAAS,kBAAkB;YACpC,OAAO,aAAa,IAAI,MAAM,GAAG;QACnC,OAAO,IAAI,SAAS,mBAAmB;YACrC,IAAI,OAAO,OAAO,IAAI,CAAC,MACnB,OAAO,KAAK,MAAM,GAAG,IACnB,KAAK,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,UAC/B,KAAK,IAAI,CAAC;YAChB,OAAO,eAAe,OAAO;QAC/B,OAAO;YACL,OAAO;QACT;IACF,OAAO;QACL,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/getMessage.js"],"sourcesContent":["/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;CAEC,GAED,IAAI,gHACA,0HACA;AAEJ;;;;;;;;;;;;;;;;;CAiBC,GAED,OAAO,OAAO,GAAG,SAAS,WAAW,GAAG,EAAE,IAAI;IAC5C,IAAI,SAAS,KAAK,KAAK,WACnB,MAAM,KAAK,KAAK,WAChB,WAAW,IAAI,CAAC,EAAE,EAClB,SAAS,UAAU,KAAK,OACxB,MAAM,SAAS,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAChC,UAAU,KAAK,KAAK;IAExB,IAAG,OAAO,QAAQ,YAAY,MAAM;IACpC,MAAM,OAAO;IACb,MAAM,IACH,OAAO,CAAC,cAAc;QAAc,OAAO,WAAW;IAAM,GAC5D,OAAO,CAAC,aAAa;QAAc,OAAO,WAAW;IAAS,GAC9D,OAAO,CAAC,aAAa;QAAc,OAAO,WAAW;IAAW;IAEnE,OAAO,UAAU,UAAU,OAAO,MAAM;AAC1C","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/transferFlags.js"],"sourcesContent":["/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;;;;;;;;;;;;CAqBC,GAED,OAAO,OAAO,GAAG,SAAS,cAAc,SAAS,EAAE,MAAM,EAAE,UAAU;IACnE,IAAI,QAAQ,UAAU,OAAO,IAAI,CAAC,UAAU,OAAO,GAAG,OAAO,MAAM,CAAC,KAAK;IAEzE,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,OAAO,MAAM,CAAC;IACjC;IAEA,aAAa,UAAU,MAAM,KAAK,IAAI,aAAa;IAEnD,IAAK,IAAI,QAAQ,MAAO;QACtB,IAAI,cACC,SAAS,YAAY,SAAS,UAAU,SAAS,cAAc,QAAQ,WAAY;YACtF,OAAO,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK;QACpC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/isProxyEnabled.js"],"sourcesContent":["var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n"],"names":[],"mappings":"AAAA,IAAI;AAEJ;;;;CAIC,GAED;;;;;;;;;CASC,GAED,OAAO,OAAO,GAAG,SAAS;IACxB,OAAO,OAAO,QAAQ,IACpB,OAAO,UAAU,eACjB,OAAO,YAAY;AACvB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/addProperty.js"],"sourcesContent":["/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;CAwBC,GAED,OAAO,OAAO,GAAG,SAAS,YAAY,GAAG,EAAE,IAAI,EAAE,MAAM;IACrD,SAAS,WAAW,YAAY,YAAa,IAAI;IAEjD,OAAO,cAAc,CAAC,KAAK,MACzB;QAAE,KAAK,SAAS;YACZ,sEAAsE;YACtE,oEAAoE;YACpE,qCAAqC;YACrC,EAAE;YACF,sEAAsE;YACtE,kEAAkE;YAClE,EAAE;YACF,qEAAqE;YACrE,uEAAuE;YACvE,uEAAuE;YACvE,mEAAmE;YACnE,qEAAqE;YACrE,EAAE;YACF,wEAAwE;YACxE,2BAA2B;YAC3B,IAAI,CAAC,oBAAoB,CAAC,KAAK,IAAI,EAAE,aAAa;gBAChD,KAAK,IAAI,EAAE,QAAQ;YACrB;YAEA,IAAI,SAAS,OAAO,IAAI,CAAC,IAAI;YAC7B,IAAI,WAAW,WACb,OAAO;YAET,IAAI,eAAe,IAAI,KAAK,SAAS;YACrC,cAAc,IAAI,EAAE;YACpB,OAAO;QACT;QACA,cAAc;IAClB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/addLengthGuard.js"],"sourcesContent":["var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n"],"names":[],"mappings":"AAAA,IAAI,eAAe,OAAO,wBAAwB,CAAC,YAAa,GAAG;AAEnE;;;;CAIC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCC,GAED,OAAO,OAAO,GAAG,SAAS,eAAgB,EAAE,EAAE,aAAa,EAAE,WAAW;IACtE,IAAI,CAAC,aAAa,YAAY,EAAE,OAAO;IAEvC,OAAO,cAAc,CAAC,IAAI,UAAU;QAClC,KAAK;YACH,IAAI,aAAa;gBACf,MAAM,MAAM,4BAA4B,gBAAgB,iBACtD,iEACA,gBAAgB,aAAa,gBAAgB;YACjD;YAEA,MAAM,MAAM,4BAA4B,gBAAgB,iBACtD,gCAAgC,gBAAgB;QACpD;IACF;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 553, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/getProperties.js"],"sourcesContent":["/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;;CAWC,GAED,OAAO,OAAO,GAAG,SAAS,cAAc,MAAM;IAC5C,IAAI,SAAS,OAAO,mBAAmB,CAAC;IAExC,SAAS,YAAY,QAAQ;QAC3B,IAAI,OAAO,OAAO,CAAC,cAAc,CAAC,GAAG;YACnC,OAAO,IAAI,CAAC;QACd;IACF;IAEA,IAAI,QAAQ,OAAO,cAAc,CAAC;IAClC,MAAO,UAAU,KAAM;QACrB,OAAO,mBAAmB,CAAC,OAAO,OAAO,CAAC;QAC1C,QAAQ,OAAO,cAAc,CAAC;IAChC;IAEA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 587, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/proxify.js"],"sourcesContent":["var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 710, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/addMethod.js"],"sourcesContent":["/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;CAwBC,GAED,OAAO,OAAO,GAAG,SAAS,UAAU,GAAG,EAAE,IAAI,EAAE,MAAM;IACnD,IAAI,gBAAgB;QAClB,4EAA4E;QAC5E,4EAA4E;QAC5E,sBAAsB;QACtB,EAAE;QACF,0EAA0E;QAC1E,6BAA6B;QAC7B,EAAE;QACF,qEAAqE;QACrE,4EAA4E;QAC5E,sEAAsE;QACtE,yEAAyE;QACzE,2DAA2D;QAC3D,IAAI,CAAC,KAAK,IAAI,EAAE,aAAa;YAC3B,KAAK,IAAI,EAAE,QAAQ;QACrB;QAEA,IAAI,SAAS,OAAO,KAAK,CAAC,IAAI,EAAE;QAChC,IAAI,WAAW,WACb,OAAO;QAET,IAAI,eAAe,IAAI,KAAK,SAAS;QACrC,cAAc,IAAI,EAAE;QACpB,OAAO;IACT;IAEA,eAAe,eAAe,MAAM;IACpC,GAAG,CAAC,KAAK,GAAG,QAAQ,eAAe;AACrC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 774, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/overwriteProperty.js"],"sourcesContent":["/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCC,GAED,OAAO,OAAO,GAAG,SAAS,kBAAkB,GAAG,EAAE,IAAI,EAAE,MAAM;IAC3D,IAAI,OAAO,OAAO,wBAAwB,CAAC,KAAK,OAC5C,SAAS,YAAa;IAE1B,IAAI,QAAQ,eAAe,OAAO,KAAK,GAAG,EACxC,SAAS,KAAK,GAAG;IAEnB,OAAO,cAAc,CAAC,KAAK,MACzB;QAAE,KAAK,SAAS;YACZ,qEAAqE;YACrE,uEAAuE;YACvE,8CAA8C;YAC9C,EAAE;YACF,sEAAsE;YACtE,kEAAkE;YAClE,EAAE;YACF,qEAAqE;YACrE,uEAAuE;YACvE,uEAAuE;YACvE,mEAAmE;YACnE,qEAAqE;YACrE,EAAE;YACF,wEAAwE;YACxE,2BAA2B;YAC3B,IAAI,CAAC,oBAAoB,CAAC,KAAK,IAAI,EAAE,aAAa;gBAChD,KAAK,IAAI,EAAE,QAAQ;YACrB;YAEA,iEAAiE;YACjE,qEAAqE;YACrE,wEAAwE;YACxE,IAAI,eAAe,KAAK,IAAI,EAAE;YAC9B,KAAK,IAAI,EAAE,YAAY;YACvB,IAAI,SAAS,OAAO,QAAQ,IAAI,CAAC,IAAI;YACrC,KAAK,IAAI,EAAE,YAAY;YAEvB,IAAI,WAAW,WAAW;gBACxB,OAAO;YACT;YAEA,IAAI,eAAe,IAAI,KAAK,SAAS;YACrC,cAAc,IAAI,EAAE;YACpB,OAAO;QACT;QACA,cAAc;IAClB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 859, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/overwriteMethod.js"],"sourcesContent":["/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCC,GAED,OAAO,OAAO,GAAG,SAAS,gBAAgB,GAAG,EAAE,IAAI,EAAE,MAAM;IACzD,IAAI,UAAU,GAAG,CAAC,KAAK,EACnB,SAAS;QACT,MAAM,IAAI,MAAM,OAAO;IACzB;IAEF,IAAI,WAAW,eAAe,OAAO,SACnC,SAAS;IAEX,IAAI,2BAA2B;QAC7B,oEAAoE;QACpE,4EAA4E;QAC5E,yCAAyC;QACzC,EAAE;QACF,0EAA0E;QAC1E,6BAA6B;QAC7B,EAAE;QACF,qEAAqE;QACrE,4EAA4E;QAC5E,sEAAsE;QACtE,yEAAyE;QACzE,2DAA2D;QAC3D,IAAI,CAAC,KAAK,IAAI,EAAE,aAAa;YAC3B,KAAK,IAAI,EAAE,QAAQ;QACrB;QAEA,2EAA2E;QAC3E,2EAA2E;QAC3E,wDAAwD;QACxD,IAAI,eAAe,KAAK,IAAI,EAAE;QAC9B,KAAK,IAAI,EAAE,YAAY;QACvB,IAAI,SAAS,OAAO,QAAQ,KAAK,CAAC,IAAI,EAAE;QACxC,KAAK,IAAI,EAAE,YAAY;QAEvB,IAAI,WAAW,WAAW;YACxB,OAAO;QACT;QAEA,IAAI,eAAe,IAAI,KAAK,SAAS;QACrC,cAAc,IAAI,EAAE;QACpB,OAAO;IACT;IAEA,eAAe,0BAA0B,MAAM;IAC/C,GAAG,CAAC,KAAK,GAAG,QAAQ,0BAA0B;AAChD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 943, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/addChainableMethod.js"],"sourcesContent":["/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;CAEC,GAED,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ;;CAEC,GAED,qDAAqD;AACrD,IAAI,kBAAkB,OAAO,OAAO,cAAc,KAAK;AAEvD,kGAAkG;AAClG,oFAAoF;AACpF,IAAI,SAAS,YAAY;AACzB,IAAI,eAAe,OAAO,mBAAmB,CAAC,QAAQ,MAAM,CAAC,SAAS,IAAI;IACxE,IAAI,WAAW,OAAO,wBAAwB,CAAC,QAAQ;IAEvD,6EAA6E;IAC7E,6EAA6E;IAC7E,6EAA6E;IAC7E,gEAAgE;IAChE,IAAI,OAAO,aAAa,UACtB,OAAO;IAET,OAAO,CAAC,SAAS,YAAY;AAC/B;AAEA,8BAA8B;AAC9B,IAAI,OAAQ,SAAS,SAAS,CAAC,IAAI,EAC/B,QAAQ,SAAS,SAAS,CAAC,KAAK;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BC,GAED,OAAO,OAAO,GAAG,SAAS,mBAAmB,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,gBAAgB;IAC9E,IAAI,OAAO,qBAAqB,YAAY;QAC1C,mBAAmB,YAAc;IACnC;IAEA,IAAI,oBAAoB;QACpB,QAAQ;QACR,kBAAkB;IACtB;IAEA,kEAAkE;IAClE,IAAI,CAAC,IAAI,SAAS,EAAE;QAClB,IAAI,SAAS,GAAG,CAAC;IACnB;IACA,IAAI,SAAS,CAAC,KAAK,GAAG;IAEtB,OAAO,cAAc,CAAC,KAAK,MACzB;QAAE,KAAK,SAAS;YACZ,kBAAkB,gBAAgB,CAAC,IAAI,CAAC,IAAI;YAE5C,IAAI,yBAAyB;gBAC3B,kEAAkE;gBAClE,gEAAgE;gBAChE,qDAAqD;gBACrD,EAAE;gBACF,sEAAsE;gBACtE,iCAAiC;gBACjC,EAAE;gBACF,8DAA8D;gBAC9D,qEAAqE;gBACrE,oDAAoD;gBACpD,EAAE;gBACF,qEAAqE;gBACrE,iEAAiE;gBACjE,mEAAmE;gBACnE,sCAAsC;gBACtC,IAAI,CAAC,KAAK,IAAI,EAAE,aAAa;oBAC3B,KAAK,IAAI,EAAE,QAAQ;gBACrB;gBAEA,IAAI,SAAS,kBAAkB,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE;gBAClD,IAAI,WAAW,WAAW;oBACxB,OAAO;gBACT;gBAEA,IAAI,eAAe,IAAI,KAAK,SAAS;gBACrC,cAAc,IAAI,EAAE;gBACpB,OAAO;YACT;YAEA,eAAe,wBAAwB,MAAM;YAE7C,2CAA2C;YAC3C,IAAI,iBAAiB;gBACnB,+EAA+E;gBAC/E,IAAI,YAAY,OAAO,MAAM,CAAC,IAAI;gBAClC,yDAAyD;gBACzD,UAAU,IAAI,GAAG;gBACjB,UAAU,KAAK,GAAG;gBAClB,OAAO,cAAc,CAAC,wBAAwB;YAChD,OAEK;gBACH,IAAI,gBAAgB,OAAO,mBAAmB,CAAC;gBAC/C,cAAc,OAAO,CAAC,SAAU,YAAY;oBAC1C,IAAI,aAAa,OAAO,CAAC,kBAAkB,CAAC,GAAG;wBAC7C;oBACF;oBAEA,IAAI,KAAK,OAAO,wBAAwB,CAAC,KAAK;oBAC9C,OAAO,cAAc,CAAC,wBAAwB,cAAc;gBAC9D;YACF;YAEA,cAAc,IAAI,EAAE;YACpB,OAAO,QAAQ;QACjB;QACA,cAAc;IAClB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1072, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/overwriteChainableMethod.js"],"sourcesContent":["/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,IAAI;AACJ,IAAI;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BC,GAED,OAAO,OAAO,GAAG,SAAS,yBAAyB,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,gBAAgB;IACpF,IAAI,oBAAoB,IAAI,SAAS,CAAC,KAAK;IAE3C,IAAI,oBAAoB,kBAAkB,gBAAgB;IAC1D,kBAAkB,gBAAgB,GAAG,SAAS;QAC5C,IAAI,SAAS,iBAAiB,mBAAmB,IAAI,CAAC,IAAI;QAC1D,IAAI,WAAW,WAAW;YACxB,OAAO;QACT;QAEA,IAAI,eAAe,IAAI,KAAK,SAAS;QACrC,cAAc,IAAI,EAAE;QACpB,OAAO;IACT;IAEA,IAAI,UAAU,kBAAkB,MAAM;IACtC,kBAAkB,MAAM,GAAG,SAAS;QAClC,IAAI,SAAS,OAAO,SAAS,KAAK,CAAC,IAAI,EAAE;QACzC,IAAI,WAAW,WAAW;YACxB,OAAO;QACT;QAEA,IAAI,eAAe,IAAI,KAAK,SAAS;QACrC,cAAc,IAAI,EAAE;QACpB,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1137, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/compareByInspect.js"],"sourcesContent":["/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;CAEC,GAED,IAAI;AAEJ;;;;;;;;;;;;;;CAcC,GAED,OAAO,OAAO,GAAG,SAAS,iBAAiB,CAAC,EAAE,CAAC;IAC7C,OAAO,QAAQ,KAAK,QAAQ,KAAK,CAAC,IAAI;AACxC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1166, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js"],"sourcesContent":["/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;;;CAYC,GAED,OAAO,OAAO,GAAG,SAAS,gCAAgC,GAAG;IAC3D,IAAI,OAAO,OAAO,qBAAqB,KAAK,YAAY,OAAO,EAAE;IAEjE,OAAO,OAAO,qBAAqB,CAAC,KAAK,MAAM,CAAC,SAAU,GAAG;QAC3D,OAAO,OAAO,wBAAwB,CAAC,KAAK,KAAK,UAAU;IAC7D;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1193, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js"],"sourcesContent":["/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;CAEC,GAED,IAAI;AAEJ;;;;;;;;;;;;CAYC,GAED,OAAO,OAAO,GAAG,SAAS,2BAA2B,GAAG;IACtD,OAAO,OAAO,IAAI,CAAC,KAAK,MAAM,CAAC,gCAAgC;AACjE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1220, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/isNaN.js"],"sourcesContent":["/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;CAUC,GAED,SAAS,MAAM,KAAK;IAClB,yEAAyE;IACzE,kBAAkB;IAClB,OAAO,UAAU;AACnB;AAEA,0DAA0D;AAC1D,OAAO,OAAO,GAAG,OAAO,KAAK,IAAI","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1246, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/getOperator.js"],"sourcesContent":["var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n"],"names":[],"mappings":"AAAA,IAAI;AAEJ,IAAI;AAEJ,SAAS,aAAa,GAAG;IACvB,IAAI,aAAa,KAAK;IACtB,IAAI,cAAc;QAAC;QAAS;QAAU;KAAW;IAEjD,OAAO,YAAY,OAAO,CAAC,gBAAgB,CAAC;AAC9C;AAEA;;;;;;;;;;;;;;CAcC,GAED,OAAO,OAAO,GAAG,SAAS,YAAY,GAAG,EAAE,IAAI;IAC7C,IAAI,WAAW,KAAK,KAAK;IACzB,IAAI,SAAS,KAAK,KAAK;IACvB,IAAI,WAAW,IAAI,CAAC,EAAE;IACtB,IAAI,MAAM,SAAS,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;IAEpC,IAAI,UAAU;QACZ,OAAO;IACT;IAEA,IAAI,OAAO,QAAQ,YAAY,MAAM;IAErC,MAAM,OAAO;IACb,IAAI,CAAC,KAAK;QACR,OAAO;IACT;IAEA,IAAI,WAAW,IAAI,CAAC,MAAM;QACxB,OAAO;IACT;IAEA,IAAI,WAAW,aAAa;IAC5B,IAAI,UAAU,IAAI,CAAC,MAAM;QACvB,OAAO,WAAW,uBAAuB;IAC3C;IAEA,OAAO,WAAW,oBAAoB;AACxC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1298, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/utils/index.js"],"sourcesContent":["/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');"],"names":[],"mappings":"AAAA;;;;CAIC,GAED;;CAEC,GAED,IAAI;AAEJ;;CAEC,GAED,QAAQ,IAAI;AAEZ;;CAEC,GAED,QAAQ,IAAI;AAEZ;;CAEC,GACD,QAAQ,WAAW;AAEnB;;CAEC,GAED,QAAQ,UAAU;AAElB;;CAEC,GAED,QAAQ,SAAS;AAEjB;;CAEC,GAED,QAAQ,OAAO;AAEf;;CAEC,GAED,QAAQ,UAAU;AAElB;;CAEC,GAED,QAAQ,IAAI;AAEZ;;CAEC,GAED,QAAQ,aAAa;AAErB;;CAEC,GAED,QAAQ,GAAG;AAEX;;CAEC,GAED,QAAQ,WAAW,GAAG,QAAQ,WAAW;AAEzC;;CAEC,GAED,QAAQ,WAAW,GAAG,QAAQ,WAAW;AAEzC;;CAEC,GAED,QAAQ,OAAO;AAEf;;CAEC,GAED,QAAQ,WAAW;AAEnB;;CAEC,GAED,QAAQ,SAAS;AAEjB;;CAEC,GAED,QAAQ,iBAAiB;AAEzB;;CAEC,GAED,QAAQ,eAAe;AAEvB;;CAEC,GAED,QAAQ,kBAAkB;AAE1B;;CAEC,GAED,QAAQ,wBAAwB;AAEhC;;CAEC,GAED,QAAQ,gBAAgB;AAExB;;CAEC,GAED,QAAQ,+BAA+B;AAEvC;;CAEC,GAED,QAAQ,0BAA0B;AAElC;;CAEC,GAED,QAAQ,UAAU;AAElB;;CAEC,GAED,QAAQ,OAAO;AAEf;;CAEC,GAED,QAAQ,cAAc;AAEtB;;CAEC,GAED,QAAQ,cAAc;AAEtB;;CAEC,GAED,QAAQ,KAAK;AAEb;;CAEC,GAED,QAAQ,WAAW","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1394, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/assertion.js"],"sourcesContent":["/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * - `eql`: This flag contains the deepEqual function to be used by the assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n    flag(this, 'eql', config.deepEqual || util.eql);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1544, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/core/assertions.js"],"sourcesContent":["/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : ''\n      , isEql = isDeep ? flag(this, 'eql') : SameValueZero;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || isEql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return isEql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    var eql = flag(this, 'eql');\n    this.assert(\n        eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toISOString() + '..' + finish.toISOString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name]\n      , isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;;\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && isEql(val, value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    var eql = flag(this, 'eql');\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys\n      , isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          return isEql(expectedKey, actualKey);\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          return isEql(expectedKey, actualKey);\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? flag(this, 'eql') : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep')\n      , eql = flag(this, 'eql');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4700, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/interface/expect.js"],"sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,OAAO,OAAO,GAAG,SAAU,IAAI,EAAE,IAAI;IACnC,KAAK,MAAM,GAAG,SAAU,GAAG,EAAE,OAAO;QAClC,OAAO,IAAI,KAAK,SAAS,CAAC,KAAK;IACjC;IAEA;;;;;;;;;;;;;;;;;;;;GAoBC,GAED,KAAK,MAAM,CAAC,IAAI,GAAG,SAAU,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ;QAC9D,IAAI,UAAU,MAAM,GAAG,GAAG;YACtB,UAAU;YACV,SAAS;QACb;QAEA,UAAU,WAAW;QACrB,MAAM,IAAI,KAAK,cAAc,CAAC,SAAS;YACnC,QAAQ;YACR,UAAU;YACV,UAAU;QACd,GAAG,KAAK,MAAM,CAAC,IAAI;IACrB;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4746, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/interface/should.js"],"sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,OAAO,OAAO,GAAG,SAAU,IAAI,EAAE,IAAI;IACnC,IAAI,YAAY,KAAK,SAAS;IAE9B,SAAS;QACP,sFAAsF;QACtF,SAAS;YACP,IAAI,IAAI,YAAY,UACb,IAAI,YAAY,UAChB,IAAI,YAAY,WAChB,OAAO,WAAW,cAAc,IAAI,YAAY,UAChD,OAAO,WAAW,cAAc,IAAI,YAAY,QAAQ;gBAC7D,OAAO,IAAI,UAAU,IAAI,CAAC,OAAO,IAAI,MAAM;YAC7C;YACA,OAAO,IAAI,UAAU,IAAI,EAAE,MAAM;QACnC;QACA,SAAS,aAAa,KAAK;YACzB,2DAA2D;YAC3D,mEAAmE;YACnE,oEAAoE;YACpE,EAAE;YACF,iEAAiE;YACjE,qDAAqD;YACrD,OAAO,cAAc,CAAC,IAAI,EAAE,UAAU;gBACpC,OAAO;gBACP,YAAY;gBACZ,cAAc;gBACd,UAAU;YACZ;QACF;QACA,2CAA2C;QAC3C,OAAO,cAAc,CAAC,OAAO,SAAS,EAAE,UAAU;YAChD,KAAK;YACH,KAAK;YACL,cAAc;QAClB;QAEA,IAAI,SAAS,CAAC;QAEd;;;;;;;;;;;;;;;;;;;;;KAqBC,GAED,OAAO,IAAI,GAAG,SAAU,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ;YACzD,IAAI,UAAU,MAAM,GAAG,GAAG;gBACtB,UAAU;gBACV,SAAS;YACb;YAEA,UAAU,WAAW;YACrB,MAAM,IAAI,KAAK,cAAc,CAAC,SAAS;gBACnC,QAAQ;gBACR,UAAU;gBACV,UAAU;YACd,GAAG,OAAO,IAAI;QAChB;QAEA;;;;;;;;;;;;;KAaC,GAED,OAAO,KAAK,GAAG,SAAU,IAAI,EAAE,IAAI,EAAE,GAAG;YACtC,IAAI,UAAU,MAAM,KAAK,EAAE,CAAC,KAAK,CAAC;QACpC;QAEA;;;;;;;;;;;;;;;;;;;;;;KAsBC,GAED,OAAO,KAAK,GAAG,SAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;YAC1C,IAAI,UAAU,IAAI,KAAK,EAAE,CAAC,KAAK,CAAC,MAAM;QACxC;QAEA;;;;;;;;;;;;KAYC,GAED,OAAO,KAAK,GAAG,SAAU,GAAG,EAAE,GAAG;YAC/B,IAAI,UAAU,KAAK,KAAK,EAAE,CAAC,KAAK;QAClC;QAEA,WAAW;QACX,OAAO,GAAG,GAAG,CAAC;QAEd;;;;;;;;;;;;;KAaC,GAED,OAAO,GAAG,CAAC,KAAK,GAAG,SAAU,IAAI,EAAE,IAAI,EAAE,GAAG;YAC1C,IAAI,UAAU,MAAM,KAAK,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;QACxC;QAEA;;;;;;;;;;;;;;;;;;KAkBC,GAED,OAAO,GAAG,CAAC,KAAK,GAAG,SAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;YAC9C,IAAI,UAAU,IAAI,KAAK,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM;QAC5C;QAEA;;;;;;;;;;;;KAYC,GAED,OAAO,GAAG,CAAC,KAAK,GAAG,SAAU,GAAG,EAAE,GAAG;YACnC,IAAI,UAAU,KAAK,KAAK,EAAE,CAAC,GAAG,CAAC,KAAK;QACtC;QAEA,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ;QACjC,OAAO,GAAG,CAAC,QAAQ,GAAG,OAAO,GAAG,CAAC,QAAQ;QAEzC,OAAO;IACT;;IAEA,KAAK,MAAM,GAAG;IACd,KAAK,MAAM,GAAG;AAChB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4937, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai/interface/assert.js"],"sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7538, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/lib/chai.js"],"sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.8';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,IAAI,OAAO,EAAE;AAEb;;CAEC,GAED,QAAQ,OAAO,GAAG;AAElB;;CAEC,GAED,QAAQ,cAAc;AAEtB;;CAEC,GAED,IAAI;AAEJ;;;;;;;;CAQC,GAED,QAAQ,GAAG,GAAG,SAAU,EAAE;IACxB,IAAI,CAAC,CAAC,KAAK,OAAO,CAAC,KAAK;QACtB,GAAG,SAAS;QACZ,KAAK,IAAI,CAAC;IACZ;IAEA,OAAO;AACT;AAEA;;CAEC,GAED,QAAQ,IAAI,GAAG;AAEf;;CAEC,GAED,IAAI;AACJ,QAAQ,MAAM,GAAG;AAEjB;;CAEC,GAED,IAAI;AACJ,QAAQ,GAAG,CAAC;AAEZ;;CAEC,GAED,IAAI;AACJ,QAAQ,GAAG,CAAC;AAEZ;;CAEC,GAED,IAAI;AACJ,QAAQ,GAAG,CAAC;AAEZ;;CAEC,GAED,IAAI;AACJ,QAAQ,GAAG,CAAC;AAEZ;;CAEC,GAED,IAAI;AACJ,QAAQ,GAAG,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7599, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/chai/index.js"],"sourcesContent":["module.exports = require('./lib/chai');\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}