(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@thirdweb-dev/sdk/dist/assertEnabled-d1700f0b.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "E": (()=>EndDateSchema),
    "R": (()=>RawDateSchema),
    "S": (()=>StartDateSchema),
    "a": (()=>assertEnabled)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-client] (ecmascript) <export * as z>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js [app-client] (ecmascript)");
;
;
;
const RawDateSchema = /* @__PURE__ */ (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].union([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].date().transform((i)=>{
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(Math.floor(i.getTime() / 1000));
        }),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number().transform((i)=>{
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(i);
        })
    ]))();
/**
 * Default to now
 */ const StartDateSchema = /* @__PURE__ */ (()=>RawDateSchema.default(new Date(0)))();
/**
 * Default to 10 years from now
 */ const EndDateSchema = /* @__PURE__ */ (()=>RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10)))();
/**
 * Checks whether the given DetectableFeature is defined
 * @internal
 * @param namespace - The namespace to check
 * @param feature - The corresponding feature
 */ function assertEnabled(namespace, feature) {
    if (!namespace) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"](feature);
    }
    return namespace;
}
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "C": (()=>ContractMetadata),
    "G": (()=>GasCostEstimator),
    "a": (()=>ContractEvents),
    "b": (()=>ContractAppURI),
    "d": (()=>detectContractFeature),
    "h": (()=>hasFunction),
    "t": (()=>toEther)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__ = __turbopack_context__.i("[project]/node_modules/ethers/lib.esm/utils.js [app-client] (ecmascript) <export * as utils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$storage$2f$dist$2f$thirdweb$2d$dev$2d$storage$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/storage/dist/thirdweb-dev-storage.esm.js [app-client] (ecmascript)");
;
;
;
;
/**
 * Type guard for contractWrappers depending on passed feature name
 * @internal
 * @param contractWrapper - The contract wrapper to check
 * @param featureName - The feature name to check
 */ function detectContractFeature(contractWrapper, featureName) {
    const b = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ai"])(contractWrapper.abi, featureName, contractWrapper.extensions);
    return b;
}
/**
 * @internal
 * @param contractWrapper - The contract wrapper to check
 * @param functionName - The function name to check
 */ function hasFunction(functionName, contractWrapper) {
    return functionName in contractWrapper.readContract.functions;
}
/**
 * @internal
 */ /**
 * Handles metadata for a Contract
 * @remarks Read and update metadata for this contract
 * @example
 * ```javascript
 * const contract = await sdk.getContract("{{contract_address}}");
 * const metadata = await contract.metadata.get();
 * await contract.metadata.set({
 *   name: "My Contract",
 *   description: "My contract description"
 * })
 * ```
 * @contract
 * @public
 */ class ContractMetadata {
    featureName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cJ"].name;
    constructor(contractWrapper, schema, storage){
        this.contractWrapper = contractWrapper;
        this.schema = schema;
        this.storage = storage;
    }
    /**
   * @internal
   */ parseOutputMetadata(metadata) {
        return this.schema.output.parseAsync(metadata);
    }
    /**
   * @internal
   */ parseInputMetadata(metadata) {
        return this.schema.input.parseAsync(metadata);
    }
    /**
   * Get the metadata of this contract
   * @remarks Get the metadata of a contract
   * @example
   * ```javascript
   * const metadata = await contract.metadata.get();
   * console.log(metadata);
   * ```
   * @public
   * @returns The metadata of the given contract
   * @twfeature ContractMetadata
   */ async get() {
        let data;
        if (this.supportsContractMetadata(this.contractWrapper)) {
            const uri = await this.contractWrapper.read("contractURI", []);
            if (uri && uri.includes("://")) {
                data = await this.storage.downloadJSON(uri);
            }
        }
        if (!data) {
            try {
                // try fetching metadata from bytecode and / or contract itself
                let contractName;
                try {
                    if (hasFunction("name", this.contractWrapper)) {
                        contractName = await this.contractWrapper.read("name", []);
                    }
                } catch (err) {
                // no-op
                }
                let contractSymbol;
                try {
                    if (hasFunction("symbol", this.contractWrapper)) {
                        contractSymbol = await this.contractWrapper.read("symbol", []);
                    }
                } catch (err) {
                // no-op
                }
                let publishedMetadata;
                try {
                    publishedMetadata = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["K"])(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);
                } catch (err) {}
                data = {
                    name: contractName || publishedMetadata?.name,
                    symbol: contractSymbol,
                    description: publishedMetadata?.info.title
                };
            } catch (e) {
                throw new Error("Could not fetch contract metadata");
            }
        }
        return this.parseOutputMetadata(data);
    }
    /**
   * Set the metadata of this contract
   * @remarks OVERWRITE the metadata of a contract
   * @example
   * ```javascript
   * await contract.metadata.set({
   *   name: "My Contract",
   *   description: "My contract description"
   * })
   * ```
   * @public
   * @param metadata - the metadata to set
   * @twfeature ContractMetadata
   */ set = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (metadata)=>{
        const uri = await this._parseAndUploadMetadata(metadata);
        const wrapper = this.contractWrapper;
        if (this.supportsContractMetadata(wrapper)) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
                contractWrapper: this.contractWrapper,
                method: "setContractURI",
                args: [
                    uri
                ],
                parse: (receipt)=>{
                    return {
                        receipt,
                        data: this.get
                    };
                }
            });
        } else {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["x"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cJ"]);
        }
    });
    /**
   * Update the metadata of a contract
   * @remarks Update the metadata of a contract
   * @example
   * ```javascript
   * await contract.metadata.update({
   *   description: "My new contract description"
   * })
   * ```
   * @public
   * @param metadata - the metadata to update
   * @twfeature ContractMetadata
   * */ update = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (metadata)=>{
        return await this.set.prepare({
            ...await this.get(),
            ...metadata
        });
    });
    /**
   *
   * @internal
   * @param metadata - the metadata to set
   * @returns
   */ async _parseAndUploadMetadata(metadata) {
        const parsedMetadata = await this.parseInputMetadata(metadata);
        return this.storage.upload(parsedMetadata);
    }
    supportsContractMetadata(contractWrapper) {
        return detectContractFeature(contractWrapper, "ContractMetadata");
    }
}
/**
 * Listen to Contract events in real time
 * @contract
 * @public
 */ class ContractEvents {
    constructor(contractWrapper){
        this.contractWrapper = contractWrapper;
    }
    /**
   * Subscribe to transactions in this contract.
   * @remarks Will emit an "event" object containing the transaction status ('submitted' and 'completed') and hash
   * @example
   * ```javascript
   * contract.events.addTransactionListener((event) => {
   *   console.log(event);
   * }
   * ```
   * @param listener - the callback function that will be called on every transaction
   * @public
   */ addTransactionListener(listener) {
        this.contractWrapper.addListener(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aZ"].Transaction, listener);
    }
    /**
   * Remove a transaction listener
   * @remarks Remove a listener that was added with addTransactionListener
   * @example
   * ```javascript
   * contract.events.removeTransactionListener((event) => {
   *  console.log(event);
   * }
   * ```
   * @param listener - the callback function to remove
   * @public
   */ removeTransactionListener(listener) {
        this.contractWrapper.off(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aZ"].Transaction, listener);
    }
    /**
   * Subscribe to contract events
   * @remarks You can add a listener for any contract event to run a function when
   * the event is emitted. For example, if you wanted to listen for a "TokensMinted" event,
   * you could do the following:
   * @example
   * ```javascript
   * contract.events.addEventListener("TokensMinted", (event) => {
   *   console.log(event);
   * });
   * ```
   * @public
   * @param eventName - the event name as defined in the contract
   * @param listener - the callback function that will be called on every new event
   * @returns A function to un-subscribe from the event
   */ addEventListener(// eslint-disable-next-line @typescript-eslint/ban-types
    eventName, listener) {
        // validates event, throws error if not found
        const event = this.contractWrapper.readContract.interface.getEvent(eventName);
        const address = this.contractWrapper.address;
        const filter = {
            address,
            topics: [
                this.contractWrapper.readContract.interface.getEventTopic(event)
            ]
        };
        const wrappedListener = (log)=>{
            const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);
            listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));
        };
        this.contractWrapper.getProvider().on(filter, wrappedListener);
        return ()=>{
            this.contractWrapper.getProvider().off(filter, wrappedListener);
        };
    }
    /**
   * Listen to all events emitted from this contract
   *
   * @example
   * ```javascript
   * contract.events.listenToAllEvents((event) => {
   *   console.log(event.eventName) // the name of the emitted event
   *   console.log(event.data) // event payload
   * }
   * ```
   * @public
   * @param listener - the callback function that will be called on every new event
   * @returns A function that can be called to stop listening to events
   */ listenToAllEvents(listener) {
        const address = this.contractWrapper.address;
        const filter = {
            address
        };
        const wrappedListener = (log)=>{
            try {
                const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);
                listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));
            } catch (e) {
                console.error("Could not parse event:", log, e);
            }
        };
        this.contractWrapper.getProvider().on(filter, wrappedListener);
        return ()=>{
            this.contractWrapper.getProvider().off(filter, wrappedListener);
        };
    }
    /**
   * Remove an event listener from this contract
   * @remarks Remove a listener that was added with addEventListener
   * @example
   * ```javascript
   * contract.events.removeEventListener("TokensMinted", (event) => {
   *   console.log(event);
   * });
   * ```
   * @public
   * @param eventName - the event name as defined in the contract
   * @param listener - the listener to unregister
   */ removeEventListener(// eslint-disable-next-line @typescript-eslint/ban-types
    eventName, listener) {
        // validates event, throws error if not found
        const event = this.contractWrapper.readContract.interface.getEvent(eventName);
        this.contractWrapper.readContract.off(event.name, listener);
    }
    /**
   * Remove all listeners on this contract
   * @remarks Remove all listeners from a contract
   * @example
   * ```javascript
   * contract.events.removeAllListeners();
   * ```
   * @public
   */ removeAllListeners() {
        this.contractWrapper.readContract.removeAllListeners();
        const address = this.contractWrapper.address;
        const filter = {
            address
        };
        this.contractWrapper.getProvider().removeAllListeners(filter);
    }
    /**
   * Get All Events
   * @remarks Get a list of all the events emitted from this contract during the specified time period
   * @example
   * ```javascript
   * // Optionally pass in filters to limit the blocks from which events are retrieved
   * const filters = {
   *   fromBlock: 0,
   *   toBlock: 1000000,
   * }
   * const events = await contract.events.getAllEvents(filters);
   * console.log(events[0].eventName);
   * console.log(events[0].data);
   * ```
   *
   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks
   * @returns The event objects of the events emitted with event names and data for each event
   */ async getAllEvents() {
        let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            fromBlock: 0,
            toBlock: "latest",
            order: "desc"
        };
        const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);
        const orderedEvents = events.sort((a, b)=>{
            return filters.order === "desc" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;
        });
        return this.parseEvents(orderedEvents);
    }
    /**
   * Get Events
   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period
   * @example
   * ```javascript
   * // The name of the event to get logs for
   * const eventName = "Transfer";
   *
   * // Optionally pass in options to limit the blocks from which events are retrieved
   * const options = {
   *   fromBlock: 0,
   *   toBlock: 1000000, // can also pass "latest"
   *   order: "desc",
   *   // Configure event filters (filter on indexed event parameters)
   *   filters: {
   *     from: "0x...",
   *     to: "0x..."
   *   }
   * };
   *
   * const events = await contract.events.getEvents(eventName, options);
   * console.log(events[0].eventName);
   * console.log(events[0].data);
   * ```
   *
   * @param eventName - The name of the event to get logs for
   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions
   * @returns The requested event objects with event data
   */ async getEvents(eventName) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            fromBlock: 0,
            toBlock: "latest",
            order: "desc"
        };
        const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);
        const args = options.filters ? eventInterface.inputs.map((e)=>options.filters[e.name]) : [];
        const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);
        const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);
        const orderedEvents = events.sort((a, b)=>{
            return options.order === "desc" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;
        });
        return this.parseEvents(orderedEvents);
    }
    parseEvents(events) {
        return events.map((e)=>{
            const transaction = Object.fromEntries(Object.entries(e).filter((a)=>typeof a[1] !== "function" && a[0] !== "args"));
            if (e.args) {
                const entries = Object.entries(e.args);
                const args = entries.slice(entries.length / 2, entries.length);
                const data = {};
                for (const [key, value] of args){
                    data[key] = value;
                }
                return {
                    eventName: e.event || "",
                    data: data,
                    transaction
                };
            }
            return {
                eventName: e.event || "",
                data: {},
                transaction
            };
        });
    }
    toContractEvent(event, args, rawLog) {
        const transaction = Object.fromEntries(Object.entries(rawLog).filter((a)=>typeof a[1] !== "function" && a[0] !== "args"));
        const results = {};
        event.inputs.forEach((param, index)=>{
            if (Array.isArray(args[index])) {
                const components = param.components;
                if (components) {
                    const arr = args[index];
                    if (param.type === "tuple[]") {
                        // tuple[]
                        const objArray = [];
                        for(let i = 0; i < arr.length; i++){
                            const tuple = arr[i];
                            const obj = {};
                            for(let j = 0; j < components.length; j++){
                                const name = components[j].name;
                                obj[name] = tuple[j];
                            }
                            objArray.push(obj);
                        }
                        results[param.name] = objArray;
                    } else {
                        // simple tuple
                        const obj = {};
                        for(let i = 0; i < components.length; i++){
                            const name = components[i].name;
                            obj[name] = arr[i];
                        }
                        results[param.name] = obj;
                    }
                }
            } else {
                results[param.name] = args[index];
            }
        });
        return {
            eventName: event.name,
            data: results,
            transaction
        };
    }
}
function toEther(amount) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].formatEther(amount);
}
/**
 * Estimates the gas cost of Contract calls
 * @public
 */ class GasCostEstimator {
    constructor(contractWrapper){
        this.contractWrapper = contractWrapper;
    }
    /**
   * Estimates the cost of gas in native token of the current chain
   * Pass in the same parameters as the contract's function.
   * @remarks Estimate the cost of gas in native token of the current chain
   * @example
   * ```javascript
   * const costOfClaim = await nftDrop?.estimator.gasCostOf("claim", [
   *   "0x...", // receiver
   *   1, // quantity
   *   "0x...", // currency
   *   1, // price per token
   *   [], // proofs
   *   1, // proof max quantity per transaction
   * ]);
   * ```
   * @returns The estimated price in native currency (ETH, MATIC, etc) of calling this function
   * @public
   */ async gasCostOf(// eslint-disable-next-line @typescript-eslint/ban-types
    fn, args) {
        const gasCost = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(this.contractWrapper.getProvider(), await this.contractWrapper.populateTransaction(fn, args));
        return toEther(gasCost);
    }
    /**
   * Estimates the gas limit of a transaction
   * Pass in the same parameters as the contract's function.
   * @remarks Estimates the gas limit of a transaction
   * @example
   * ```javascript
   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf("claim", [
   *   "0x...", // receiver
   *   1, // quantity
   *   "0x...", // currency
   *   1, // price per token
   *   [], // proofs
   *   1, // proof max quantity per transaction
   * ]);
   * ```
   * @returns The estimated gas limit of the transaction
   * @public
   */ async gasLimitOf(// eslint-disable-next-line @typescript-eslint/ban-types
    fn, args) {
        return this.contractWrapper.estimateGas(fn, args);
    }
    /**
   * Returns the current gas price in gwei
   * @remarks Get the current gas price in gwei
   * @example
   * ```javascript
   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();
   * ```
   * @returns The current gas price in gwei
   * @public
   */ async currentGasPriceInGwei() {
        const price = await this.contractWrapper.getProvider().getGasPrice();
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].formatUnits(price, "gwei");
    }
}
/**
 * Have an official Application URI for this contract.
 * @remarks Configure an official Application URI for this contract.
 * @example
 * ```javascript
 * const contract = await sdk.getContract("{{contract_address}}");
 * const appURI = await contract.app.get();
 * appURI = "ipfs://some_ipfs_hash";
 *
 * await contract.app.set(appURI)
 * ```
 * @public
 */ class ContractAppURI {
    featureName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cK"].name;
    constructor(contractWrapper, metadata, storage){
        this.contractWrapper = contractWrapper;
        this.metadata = metadata;
        this.storage = storage;
    }
    /**
   * Get App URI
   * @returns The appURI (typically an IPFS hash)
   * @example
   * ```javascript
   * const appURI = await contract.app.get();
   * console.log(appURI) // "ipfs://some_ipfs_hash";
   * ```
   * @twfeature AppURI
   */ async get() {
        if (detectContractFeature(this.contractWrapper, "AppURI")) {
            return await this.contractWrapper.read("appURI", []);
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$storage$2f$dist$2f$thirdweb$2d$dev$2d$storage$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["replaceGatewayUrlWithScheme"])((await this.metadata.get()).app_uri || "", this.storage.getGatewayUrls());
    }
    /**
   * Set App URI
   * @param appURI - the uri to set (typically an IPFS hash)
   * @example
   * ```javascript
   * const appURI = "ipfs://some_ipfs_hash";
   * await contract.app.set(appURI);
   * ```
   * @twfeature AppURI
   */ set = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (appURI)=>{
        if (detectContractFeature(this.contractWrapper, "AppURI")) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
                contractWrapper: this.contractWrapper,
                method: "setAppURI",
                args: [
                    appURI
                ]
            });
        }
        return await this.metadata.update.prepare({
            app_uri: appURI
        });
    });
}
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Allows overriding transaction behavior for this contract
 * @internal
 */ __turbopack_context__.s({
    "C": (()=>ContractInterceptor)
});
class ContractInterceptor {
    constructor(contractWrapper){
        this.contractWrapper = contractWrapper;
    }
    /**
   * The next transaction executed will add/replace any overrides passed via the passed in hook.
   * @remarks Overridden values will be applied to the next transaction executed.
   * @example
   * ```javascript
   * contract.interceptor.overrideNextTransaction(() => ({
   *   gasLimit: 3000000,
   * }));
   * ```
   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)
   * @public
   */ overrideNextTransaction(hook) {
        this.contractWrapper.withTransactionOverride(hook);
    }
}
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-e756e68f.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "C": (()=>ContractPlatformFee)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js [app-client] (ecmascript)");
;
;
/**
 * Handle platform fees and recipients
 * @remarks Configure platform fees for a contract, which can be applied on certain paid transactions
 * @example
 * ```javascript
 * const contract = await sdk.getContract("{{contract_address}}");
 * const feeInfo = await contract.platformFees.get();
 * await contract.platformFees.set({
 *   platform_fee_basis_points: 100, // 1% fee
 *   platform_fee_recipient: "0x..." // the fee recipient
 * })
 * ```
 * @public
 */ class ContractPlatformFee {
    featureName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["du"].name;
    constructor(contractWrapper){
        this.contractWrapper = contractWrapper;
    }
    /**
   * Get the platform fee recipient and basis points
   *
   * @example
   * ```javascript
   * const feeInfo = await contract.platformFees.get();
   * console.log(feeInfo.platform_fee_recipient);
   * console.log(feeInfo.platform_fee_basis_points);
   * ```
   * @twfeature PlatformFee
   */ async get() {
        const [platformFeeRecipient, platformFeeBps] = await this.contractWrapper.read("getPlatformFeeInfo", []);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bH"].parseAsync({
            platform_fee_recipient: platformFeeRecipient,
            platform_fee_basis_points: platformFeeBps
        });
    }
    /**
   * Set the platform fee recipient and basis points
   *
   * @example
   * ```javascript
   * await contract.platformFees.set({
   *   platform_fee_basis_points: 100, // 1% fee
   *   platform_fee_recipient: "0x..." // the fee recipient
   * })
   * ```
   *
   * @param platformFeeInfo - the platform fee information
   * @twfeature PlatformFee
   */ set = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (platformFeeInfo)=>{
        const parsed = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bH"].parseAsync(platformFeeInfo);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "setPlatformFeeInfo",
            args: [
                parsed.platform_fee_recipient,
                parsed.platform_fee_basis_points
            ]
        });
    });
}
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/contract-roles-71988d2e.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "C": (()=>ContractRoles)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tiny-invariant/dist/esm/tiny-invariant.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-32d08b05.browser.esm.js [app-client] (ecmascript)");
;
;
;
;
;
/**
 * Handle contract permissions
 * @remarks Configure roles and permissions for a contract, to restrict certain actions.
 * @example
 * ```javascript
 * const contract = await sdk.getContract("{{contract_address}}");
 * const rolesAndMembers = await contract.roles.getAll();
 * await contract.roles.grantRole("admin", "0x...");
 * ```
 * @public
 */ // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4
class ContractRoles {
    featureName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d4"].name;
    /**
   * @internal
   * @remarks This is used for typing inside react hooks which is why it has to be public.
   */ constructor(contractWrapper, roles){
        this.contractWrapper = contractWrapper;
        this.roles = roles;
    }
    /** **************************
   * READ FUNCTIONS
   ****************************/ /**
   * Get all members of all roles
   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.
   * @example
   * ```javascript
   * const rolesAndMembers = await contract.roles.getAll();
   * ```
   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.
   * @throws If the contract does not support roles this will throw an error.
   *
   * @public
   * @twfeature PermissionsEnumerable
   */ async getAll() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this.roles.length, "this contract has no support for roles");
        const roles = {};
        const entries = Object.entries(this.roles);
        (await Promise.all(entries.map((_ref)=>{
            let [, role] = _ref;
            return this.get(role);
        }))).forEach((item, index)=>roles[entries[index][1]] = item);
        return roles;
    }
    /**
   * Get all members of a specific role
   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.
   * @param role - The Role to get a memberlist for.
   * @returns The list of addresses that are members of the specific role.
   * @throws If you are requesting a role that does not exist on the contract this will throw an error.
   *
   * @example Say you want to get the list of addresses that are members of the minter role.
   * ```javascript
   * const minterAddresses = await contract.roles.get("minter");
   * ```
   *
   * @public
   * @twfeature Permissions
   */ async get(role) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this.roles.includes(role), `this contract does not support the "${role}" role`);
        const wrapper = this.contractWrapper;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])("getRoleMemberCount", wrapper) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])("getRoleMember", wrapper)) {
            const roleHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(role);
            const count = (await wrapper.read("getRoleMemberCount", [
                roleHash
            ])).toNumber();
            return await Promise.all(Array.from(Array(count).keys()).map((i)=>wrapper.read("getRoleMember", [
                    roleHash,
                    i
                ])));
        }
        throw new Error("Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.");
    }
    /**
   * Overwrite the list of members for specific roles
   *
   * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.
   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.
   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.
   * @throws If you are requesting a role that does not exist on the contract this will throw an error.
   * @example Say you want to overwrite the list of addresses that are members of the minter role.
   * ```javascript
   * const minterAddresses = await contract.roles.get("minter");
   * await contract.roles.setAll({
   *  minter: []
   * });
   * console.log(await contract.roles.get("minter")); // No matter what members had the role before, the new list will be set to []
   * ```
   * @public
   * @twfeature Permissions
   *
   * */ setAll = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (rolesWithAddresses, actingAddress)=>{
        // if we are removing multiple roles, we need to allways remove the connected wallet address *last*
        // this is so we don't renounce (i.e.)  admin role first and then try to revoke someone else's (i.e.) admin role after (which will revert the entire txn because we are no longer an admin)
        // if it is explicitly passed in (i.e. for estimation) we use that value, otherwise we get it from the connected signer
        const connectedWalletAddress = actingAddress || await this.contractWrapper.getSignerAddress();
        const contractEncoder = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        const roles = Object.keys(rolesWithAddresses);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(roles.length, "you must provide at least one role to set");
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(roles.every((role)=>this.roles.includes(role)), "this contract does not support the given role");
        const currentRoles = await this.getAll();
        const encoded = [];
        // add / remove admin role at the end so we don't revoke admin then grant
        const sortedRoles = roles.sort((role)=>role === "admin" ? 1 : -1);
        for(let i = 0; i < sortedRoles.length; i++){
            const role = sortedRoles[i];
            const [addresses, currentAddresses] = await Promise.all([
                Promise.all(rolesWithAddresses[role]?.map((addressOrEns)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(addressOrEns)) || []),
                Promise.all(currentRoles[role]?.map((addressOrEns)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(addressOrEns)) || [])
            ]);
            const toAdd = addresses.filter((address)=>!currentAddresses.includes(address));
            const toRemove = currentAddresses.filter((address)=>!addresses.includes(address));
            // if we're removing more than one address we have to make sure we always remove the *connected* (acting) wallet address first
            // otherwise we'll revoke the connected wallet address and then try to revoke someone else's address which will revert the entire txn
            if (toRemove.length > 1) {
                const index = toRemove.indexOf(connectedWalletAddress);
                if (index > -1) {
                    toRemove.splice(index, 1);
                    toRemove.push(connectedWalletAddress);
                }
            }
            if (toAdd.length) {
                toAdd.forEach((address)=>{
                    encoded.push(contractEncoder.encode("grantRole", [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(role),
                        address
                    ]));
                });
            }
            if (toRemove.length) {
                const revokeFunctionNames = await Promise.all(toRemove.map((address)=>this.getRevokeRoleFunctionName(address)));
                revokeFunctionNames.forEach((revokeFunctionName, index)=>encoded.push(contractEncoder.encode(revokeFunctionName, [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(role),
                        toRemove[index]
                    ])));
            }
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "multicall",
            args: [
                encoded
            ]
        });
    });
    /**
   * Throws an error if an address is missing the roles specified.
   *
   * @param roles - The roles to check
   * @param address - The address to check
   *
   * @internal
   */ async verify(roles, address) {
        await Promise.all(roles.map(async (role)=>{
            const [members, resolvedAddress] = await Promise.all([
                this.get(role),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(address)
            ]);
            if (!members.map((a)=>a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["o"](resolvedAddress, role);
            }
        }));
    }
    /** **************************
   * WRITE FUNCTIONS
   ****************************/ /**
   * Grant a role to a specific address
   *
   * @remarks Make sure you are sure you want to grant the role to the address.
   *
   * @example
   * ```javascript
   * await contract.roles.grant("minter", "{{wallet_address}}");
   * ```
   *
   * @param role - The {@link Role} to grant to the address
   * @param address - The address to grant the role to
   * @returns The transaction receipt
   * @throws If you are trying to grant does not exist on the contract this will throw an error.
   *
   * @public
   * @twfeature Permissions
   */ grant = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (role, address)=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this.roles.includes(role), `this contract does not support the "${role}" role`);
        const resolvedAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(address);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "grantRole",
            args: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(role),
                resolvedAddress
            ]
        });
    });
    /**
   * Revoke a role from a specific address
   *
   * @remarks
   *
   * -- Caution --
   *
   * This will let you remove yourself from the role, too.
   * If you remove yourself from the admin role, you will no longer be able to administer the contract.
   * There is no way to recover from this.
   *
   * @example
   * ```javascript
   * await contract.roles.revoke("minter", "{{wallet_address}}");
   * ```
   *
   * @param role - The {@link Role} to revoke
   * @param address - The address to revoke the role from
   * @returns The transaction receipt
   * @throws If you are trying to revoke does not exist on the module this will throw an error.
   *
   * @public
   * @twfeature Permissions
   */ revoke = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (role, address)=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this.roles.includes(role), `this contract does not support the "${role}" role`);
        const resolvedAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(address);
        const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: revokeFunctionName,
            args: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["H"])(role),
                resolvedAddress
            ]
        });
    });
    /** **************************
   * PRIVATE FUNCTIONS
   ****************************/ async getRevokeRoleFunctionName(address) {
        const [resolvedAddress, signerAddress] = await Promise.all([
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(address),
            this.contractWrapper.getSignerAddress()
        ]);
        if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {
            return "renounceRole";
        }
        return "revokeRole";
    }
}
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/cleanCurrencyAddress-ded19cfe.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "c": (()=>cleanCurrencyAddress)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-32d08b05.browser.esm.js [app-client] (ecmascript)");
;
;
/**
 * @internal
 */ function cleanCurrencyAddress(currencyAddress) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])(currencyAddress)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aV"];
    }
    return currencyAddress;
}
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/QueryParams-32a56510.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "D": (()=>DEFAULT_QUERY_ALL_COUNT),
    "F": (()=>FALLBACK_METADATA),
    "I": (()=>InterfaceId_IERC721),
    "a": (()=>InterfaceId_IERC1155),
    "b": (()=>uploadOrExtractURI),
    "c": (()=>fetchTokenMetadataForContract),
    "f": (()=>fetchTokenMetadata),
    "g": (()=>getBaseUriFromBatch),
    "u": (()=>uploadOrExtractURIs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/compiled/buffer/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-7f76f677.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__ = __turbopack_context__.i("[project]/node_modules/ethers/lib.esm/utils.js [app-client] (ecmascript) <export * as utils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/contracts/lib.esm/index.js [app-client] (ecmascript)");
;
;
;
/**
 * @internal
 */ /**
 * @internal
 */ const InterfaceId_IERC721 = /* @__PURE__ */ (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].arrayify("0x80ac58cd"))();
/**
 * @internal
 */ const InterfaceId_IERC1155 = /* @__PURE__ */ (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].arrayify("0xd9b67a26"))();
const FALLBACK_METADATA = {
    name: "Failed to load NFT metadata"
};
/**
 * fetches the token metadata
 * @param tokenId - the id (to get it back in the output)
 * @param tokenUri - the uri to fetch
 * @param storage - which storage to fetch from
 *
 * @internal
 */ async function fetchTokenMetadata(tokenId, tokenUri, storage) {
    // check for base64 encoded JSON
    if (tokenUri.startsWith("data:application/json;base64") && typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"] !== "undefined") {
        const base64 = tokenUri.split(",")[1];
        const jsonMetadata = JSON.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$buffer$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Buffer"].from(base64, "base64").toString("utf-8"));
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].parse({
            ...jsonMetadata,
            id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(tokenId).toString(),
            uri: tokenUri
        });
    }
    // handle dynamic id URIs (2 possible formats)
    const parsedUri = tokenUri.replace("{id}", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].hexZeroPad(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(tokenId).toHexString(), 32).slice(2));
    let jsonMetadata;
    try {
        jsonMetadata = await storage.downloadJSON(parsedUri);
    } catch (err) {
        const unparsedTokenIdUri = tokenUri.replace("{id}", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(tokenId).toString());
        try {
            jsonMetadata = await storage.downloadJSON(unparsedTokenIdUri);
        } catch (e) {
            console.warn(`failed to get token metadata: ${JSON.stringify({
                tokenId: tokenId.toString(),
                tokenUri
            })} -- falling back to default metadata`);
            jsonMetadata = FALLBACK_METADATA;
        }
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].parse({
        ...jsonMetadata,
        id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(tokenId).toString(),
        uri: tokenUri
    });
}
// Used for marketplace to fetch NFT metadata from contract address + tokenId
/**
 * @internal
 * @param contractAddress - the contract address
 * @param provider - the provider to use
 * @param tokenId - the token id
 * @param storage - the storage to use
 */ async function fetchTokenMetadataForContract(contractAddress, provider, tokenId, storage) {
    let uri;
    const ERC165MetadataAbi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC165.json (json, async loader)")(__turbopack_context__.i)).default;
    const erc165 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](contractAddress, ERC165MetadataAbi, provider);
    const [isERC721, isERC1155] = await Promise.all([
        erc165.supportsInterface(InterfaceId_IERC721),
        erc165.supportsInterface(InterfaceId_IERC1155)
    ]);
    if (isERC721) {
        const ERC721MetadataAbi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json (json, async loader)")(__turbopack_context__.i)).default;
        const erc721 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](contractAddress, ERC721MetadataAbi, provider);
        uri = await erc721.tokenURI(tokenId);
    } else if (isERC1155) {
        const ERC1155MetadataAbi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json (json, async loader)")(__turbopack_context__.i)).default;
        const erc1155 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](contractAddress, ERC1155MetadataAbi, provider);
        uri = await erc1155.uri(tokenId);
    } else {
        throw Error("Contract must implement ERC 1155 or ERC 721.");
    }
    if (!uri) {
        // no uri found, return fallback metadata
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"].parse({
            ...FALLBACK_METADATA,
            id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(tokenId).toString(),
            uri: ""
        });
    }
    return fetchTokenMetadata(tokenId, uri, storage);
}
/**
 * @internal
 * @param metadata - the metadata to upload
 * @param storage - the storage to use
 */ async function uploadOrExtractURI(metadata, storage) {
    if (typeof metadata === "string") {
        return metadata;
    } else {
        return await storage.upload(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"].parse(metadata));
    }
}
/**
 * @internal
 * @param metadatas - the metadata to upload
 * @param storage - the storage to use
 * @param startNumber - the number to start the file names at
 * @param contractAddress - the contract address
 * @param signerAddress - the signer address
 * @param options - options
 */ async function uploadOrExtractURIs(metadatas, storage, startNumber, options) {
    if (isUriList(metadatas)) {
        return metadatas;
    } else if (isMetadataList(metadatas)) {
        const uris = await storage.uploadBatch(metadatas.map((m)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"].parse(m)), {
            rewriteFileNames: {
                fileStartNumber: startNumber || 0
            },
            onProgress: options?.onProgress
        });
        return uris;
    } else {
        throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)");
    }
}
function getBaseUriFromBatch(uris) {
    const baseUri = uris[0].substring(0, uris[0].lastIndexOf("/"));
    for(let i = 0; i < uris.length; i++){
        const uri = uris[i].substring(0, uris[i].lastIndexOf("/"));
        if (baseUri !== uri) {
            throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${baseUri}' but got '${uri}'`);
        }
    }
    // Ensure that baseUri ends with trailing slash
    return baseUri.replace(/\/$/, "") + "/";
}
function isUriList(metadatas) {
    return metadatas.find((m)=>typeof m !== "string") === undefined;
}
function isMetadataList(metadatas) {
    return metadatas.find((m)=>typeof m !== "object") === undefined;
}
/**
 * @internal
 */ const DEFAULT_QUERY_ALL_COUNT = 100;
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/marketplace-e3129e2f.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "a": (()=>isWinningBid),
    "g": (()=>getAllInBatches),
    "h": (()=>handleTokenApproval),
    "i": (()=>isTokenApprovedForTransfer),
    "m": (()=>mapOffer),
    "v": (()=>validateNewListingParam)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/contracts/lib.esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tiny-invariant/dist/esm/tiny-invariant.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/QueryParams-32a56510.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-32d08b05.browser.esm.js [app-client] (ecmascript)");
;
;
;
;
;
/**
 * This method checks if the given token is approved for the transferrerContractAddress contract.
 * This is particularly useful for contracts that need to transfer NFTs on the users' behalf
 *
 * @internal
 * @param provider - The connected provider
 * @param transferrerContractAddress - The address of the marketplace contract
 * @param assetContract - The address of the asset contract.
 * @param tokenId - The token id of the token.
 * @param owner - The address of the account that owns the token.
 * @returns  True if the transferrerContractAddress is approved on the token, false otherwise.
 */ async function isTokenApprovedForTransfer(provider, transferrerContractAddress, assetContract, tokenId, owner) {
    try {
        const ERC165Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC165.json (json, async loader)")(__turbopack_context__.i)).default;
        const erc165 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](assetContract, ERC165Abi, provider);
        const [isERC721, isERC1155] = await Promise.all([
            erc165.supportsInterface(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["I"]),
            erc165.supportsInterface(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])
        ]);
        if (isERC721) {
            const ERC721Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721.json (json, async loader)")(__turbopack_context__.i)).default;
            const asset = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](assetContract, ERC721Abi, provider);
            const approved = await asset.isApprovedForAll(owner, transferrerContractAddress);
            if (approved) {
                return true;
            }
            // Handle reverts in case of non-existent tokens
            let approvedAddress;
            try {
                approvedAddress = await asset.getApproved(tokenId);
            } catch (e) {}
            return approvedAddress?.toLowerCase() === transferrerContractAddress.toLowerCase();
        } else if (isERC1155) {
            const ERC1155Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155.json (json, async loader)")(__turbopack_context__.i)).default;
            const asset = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](assetContract, ERC1155Abi, provider);
            return await asset.isApprovedForAll(owner, transferrerContractAddress);
        } else {
            console.error("Contract does not implement ERC 1155 or ERC 721.");
            return false;
        }
    } catch (err) {
        console.error("Failed to check if token is approved", err);
        return false;
    }
}
/**
 * Checks if the marketplace is approved to make transfers on the assetContract
 * If not, it tries to set the approval.
 * @param contractWrapper - The contract wrapper to use
 * @param marketplaceAddress - The address of the marketplace contract
 * @param assetContract - The address of the asset contract.
 * @param tokenId - The token id of the token.
 * @param from - The address of the account that owns the token.
 */ async function handleTokenApproval(contractWrapper, marketplaceAddress, assetContract, tokenId, from) {
    const ERC165Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC165.json (json, async loader)")(__turbopack_context__.i)).default;
    const erc165 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cs"](contractWrapper.getSignerOrProvider(), assetContract, ERC165Abi, contractWrapper.options, contractWrapper.storage);
    const [isERC721, isERC1155] = await Promise.all([
        erc165.read("supportsInterface", [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["I"]
        ]),
        erc165.read("supportsInterface", [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]
        ])
    ]);
    // check for token approval
    if (isERC721) {
        const ERC721Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721.json (json, async loader)")(__turbopack_context__.i)).default;
        const asset = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cs"](contractWrapper.getSignerOrProvider(), assetContract, ERC721Abi, contractWrapper.options, contractWrapper.storage);
        const approved = await asset.read("isApprovedForAll", [
            from,
            marketplaceAddress
        ]);
        if (!approved) {
            const isTokenApproved = (await asset.read("getApproved", [
                tokenId
            ])).toLowerCase() === marketplaceAddress.toLowerCase();
            if (!isTokenApproved) {
                await asset.sendTransaction("setApprovalForAll", [
                    marketplaceAddress,
                    true
                ]);
            }
        }
    } else if (isERC1155) {
        const ERC1155Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155.json (json, async loader)")(__turbopack_context__.i)).default;
        const asset = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cs"](contractWrapper.getSignerOrProvider(), assetContract, ERC1155Abi, contractWrapper.options, contractWrapper.storage);
        const approved = await asset.read("isApprovedForAll", [
            from,
            marketplaceAddress
        ]);
        if (!approved) {
            await asset.sendTransaction("setApprovalForAll", [
                marketplaceAddress,
                true
            ]);
        }
    } else {
        throw Error("Contract must implement ERC 1155 or ERC 721.");
    }
}
/**
 * Used to verify fields in new listing.
 * @internal
 */ // TODO this should be done in zod
function validateNewListingParam(param) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(param.assetContractAddress !== undefined && param.assetContractAddress !== null, "Asset contract address is required");
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(param.buyoutPricePerToken !== undefined && param.buyoutPricePerToken !== null, "Buyout price is required");
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(param.listingDurationInSeconds !== undefined && param.listingDurationInSeconds !== null, "Listing duration is required");
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(param.startTimestamp !== undefined && param.startTimestamp !== null, "Start time is required");
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(param.tokenId !== undefined && param.tokenId !== null, "Token ID is required");
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(param.quantity !== undefined && param.quantity !== null, "Quantity is required");
    switch(param.type){
        case "NewAuctionListing":
            {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(param.reservePricePerToken !== undefined && param.reservePricePerToken !== null, "Reserve price is required");
            }
    }
}
/**
 * Maps a contract offer to the strict interface
 *
 * @internal
 * @param offer - The offer to map
 * @returns  An `Offer` object
 */ async function mapOffer(provider, listingId, offer) {
    return {
        quantity: offer.quantityDesired,
        pricePerToken: offer.pricePerToken,
        currencyContractAddress: offer.currency,
        buyerAddress: offer.offeror,
        quantityDesired: offer.quantityWanted,
        currencyValue: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(provider, offer.currency, offer.quantityWanted.mul(offer.pricePerToken)),
        listingId
    };
}
function isWinningBid(winningPrice, newBidPrice, bidBuffer) {
    bidBuffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(bidBuffer);
    winningPrice = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(winningPrice);
    newBidPrice = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(newBidPrice);
    if (winningPrice.eq(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(0))) {
        return false;
    }
    const buffer = newBidPrice.sub(winningPrice).mul(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dE"]).div(winningPrice);
    return buffer.gte(bidBuffer);
}
async function getAllInBatches(start, end, fn) {
    const batches = [];
    while(end - start > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"]){
        batches.push(fn(start, start + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"] - 1));
        start += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["D"];
    }
    batches.push(fn(start, end - 1));
    return await Promise.all(batches);
}
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/marketplacev3-offers-ce1f096b.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "M": (()=>MarketplaceV3DirectListings),
    "S": (()=>Status),
    "a": (()=>MarketplaceV3EnglishAuctions),
    "b": (()=>MarketplaceV3Offers)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/contracts/lib.esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$constants$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__constants$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/constants/lib.esm/index.js [app-client] (ecmascript) <export * as constants>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__ = __turbopack_context__.i("[project]/node_modules/ethers/lib.esm/utils.js [app-client] (ecmascript) <export * as utils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tiny-invariant/dist/esm/tiny-invariant.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$cleanCurrencyAddress$2d$ded19cfe$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/cleanCurrencyAddress-ded19cfe.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-32d08b05.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$normalizePriceValue$2d$9851c0eb$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/normalizePriceValue-9851c0eb.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/setErc20Allowance-7f76f677.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/marketplace-e3129e2f.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/QueryParams-32a56510.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/assertEnabled-d1700f0b.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-client] (ecmascript) <export * as z>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$interceptor$2d$d7b164a7$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * @internal
 */ const DirectListingInputParamsSchema = /* @__PURE__ */ (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        /**
   * The address of the asset being listed.
   */ assetContractAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b9"],
        /**
   * The ID of the token to list.
   */ tokenId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b6"],
        /**
   * The quantity of tokens to include in the listing.
   *
   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).
   */ quantity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b6"].default(1),
        /**
   * The address of the currency to accept for the listing.
   */ currencyContractAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b9"].default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aV"]),
        /**
   * The price to pay per unit of NFTs listed.
   */ pricePerToken: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cw"],
        /**
   * The start time of the listing.
   */ startTimestamp: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"].default(new Date()),
        /**
   * The end time of the listing.
   */ endTimestamp: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"],
        /**
   * Whether the listing is reserved to be bought from a specific set of buyers.
   */ isReservedListing: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].boolean().default(false)
    }))();
/**
 * @public
 */ let Status = /*#__PURE__*/ function(Status) {
    Status[Status["UNSET"] = 0] = "UNSET";
    Status[Status["Created"] = 1] = "Created";
    Status[Status["Completed"] = 2] = "Completed";
    Status[Status["Cancelled"] = 3] = "Cancelled";
    Status[Status["Active"] = 4] = "Active";
    Status[Status["Expired"] = 5] = "Expired";
    return Status;
}({});
/**
 * Handles direct listings
 * @public
 */ class MarketplaceV3DirectListings {
    featureName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dA"].name;
    // utilities
    constructor(contractWrapper, storage){
        this.contractWrapper = contractWrapper;
        this.storage = storage;
        this.events = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"](this.contractWrapper);
        this.encoder = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        this.interceptor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$interceptor$2d$d7b164a7$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        this.estimator = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["G"](this.contractWrapper);
    }
    getAddress() {
        return this.contractWrapper.address;
    }
    /** ******************************
   * READ FUNCTIONS
   *******************************/ /**
   * Get the total number of direct listings
   *
   * @returns Returns the total number of direct listings created.
   * @public
   *
   * @example
   * ```javascript
   * const totalListings = await contract.directListings.getTotalCount();
   * ```
   * @twfeature DirectListings
   */ async getTotalCount() {
        return await this.contractWrapper.read("totalListings", []);
    }
    /**
   * Get all direct listings
   *
   * @example
   * ```javascript
   * const listings = await contract.directListings.getAll();
   * ```
   *
   * @param filter - optional filter parameters
   * @returns The Direct listing object array
   * @twfeature DirectListings
   */ async getAll(filter) {
        const totalListings = await this.getTotalCount();
        const start = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(filter?.start || 0).toNumber();
        const end = totalListings.toNumber();
        if (end === 0) {
            throw new Error(`No listings exist on the contract.`);
        }
        let rawListings = [];
        const batches = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(start, end, (startId, endId)=>this.contractWrapper.read("getAllListings", [
                startId,
                endId
            ]));
        rawListings = batches.flat();
        const filteredListings = await this.applyFilter(rawListings, filter);
        return await Promise.all(filteredListings.map((listing)=>this.mapListing(listing)));
    }
    /**
   * Get all valid direct listings
   *
   * @remarks A valid listing is where the listing is active, and the creator still owns & has approved Marketplace to transfer the listed NFTs.
   *
   * @example
   * ```javascript
   * const listings = await contract.directListings.getAllValid();
   * ```
   *
   * @param filter - optional filter parameters
   * @returns The Direct listing object array
   * @twfeature DirectListings
   */ async getAllValid(filter) {
        const totalListings = await this.getTotalCount();
        const start = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(filter?.start || 0).toNumber();
        const end = totalListings.toNumber();
        if (end === 0) {
            throw new Error(`No listings exist on the contract.`);
        }
        let rawListings = [];
        const batches = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(start, end, (startId, endId)=>this.contractWrapper.read("getAllValidListings", [
                startId,
                endId
            ]));
        rawListings = batches.flat();
        const filteredListings = await this.applyFilter(rawListings, filter);
        return await Promise.all(filteredListings.map((listing)=>this.mapListing(listing)));
    }
    /**
   * Get a single direct listing
   *
   * @example
   * ```javascript
   * const listingId = 0;
   * const listing = await contract.directListings.getListing(listingId);
   * ```
   *
   * @param listingId - the listing id
   * @returns The Direct listing object
   *
   * @example
   * ```javascript
   * const listingId = 0;
   * const listing = await contract.directListings.getListing(listingId);
   * ```
   * @twfeature DirectListings
   */ async getListing(listingId) {
        const listing = await this.contractWrapper.read("getListing", [
            listingId
        ]);
        return await this.mapListing(listing);
    }
    /**
   * Check if a buyer is approved for a specific direct listing
   *
   * @example
   * ```javascript
   * const listingId = 0;
   * const isBuyerApproved = await contract.directListings.isBuyerApprovedForListing(listingId, "{{wallet_address}}");
   * ```
   *
   * @param listingId - the listing id
   * @param buyer - buyer address
   * @twfeature DirectListings
   */ async isBuyerApprovedForListing(listingId, buyer) {
        const listing = await this.validateListing(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listingId));
        if (!listing.isReservedListing) {
            throw new Error(`Listing ${listingId} is not a reserved listing.`);
        }
        return await this.contractWrapper.read("isBuyerApprovedForListing", [
            listingId,
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(buyer)
        ]);
    }
    /**
   * Check if a currency is approved for a specific direct listing
   *
   * @example
   * ```javascript
   * const listingId = 0;
   * const currencyContractAddress = '0x1234';
   * const isApproved = await contract.directListings.isCurrencyApprovedForListing(listingId, currencyContractAddress);
   * ```
   *
   * @param listingId - the listing id
   * @param currency - currency address
   * @twfeature DirectListings
   */ async isCurrencyApprovedForListing(listingId, currency) {
        await this.validateListing(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listingId));
        return await this.contractWrapper.read("isCurrencyApprovedForListing", [
            listingId,
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(currency)
        ]);
    }
    /**
   * Check price per token for an approved currency
   *
   * @example
   * ```javascript
   * const listingId = 0;
   * const currencyContractAddress = '0x1234';
   * const price = await contract.directListings.currencyPriceForListing(listingId, currencyContractAddress);
   * ```
   *
   * @param listingId - the listing id
   * @param currencyContractAddress - currency contract address
   * @twfeature DirectListings
   */ async currencyPriceForListing(listingId, currencyContractAddress) {
        const listing = await this.validateListing(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listingId));
        const resolvedCurrencyAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(currencyContractAddress);
        if (resolvedCurrencyAddress === listing.currencyContractAddress) {
            return listing.pricePerToken;
        }
        const isApprovedCurrency = await this.isCurrencyApprovedForListing(listingId, resolvedCurrencyAddress);
        if (!isApprovedCurrency) {
            throw new Error(`Currency ${resolvedCurrencyAddress} is not approved for Listing ${listingId}.`);
        }
        return await this.contractWrapper.read("currencyPriceForListing", [
            listingId,
            resolvedCurrencyAddress
        ]);
    }
    /** ******************************
   * WRITE FUNCTIONS
   *******************************/ /**
   * Create new direct listing
   *
   * @remarks Create a new listing on the marketplace where people can buy an asset directly.
   *
   * @example
   * ```javascript
   * // Data of the listing you want to create
   * const listing = {
   *   // address of the contract the asset you want to list is on
   *   assetContractAddress: "0x...",
   *   // token ID of the asset you want to list
   *   tokenId: "0",
   *   // how many of the asset you want to list
   *   quantity: 1,
   *   // address of the currency contract that will be used to pay for the listing
   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,
   *   // The price to pay per unit of NFTs listed.
   *   pricePerToken: 1.5,
   *   // when should the listing open up for offers
   *   startTimestamp: new Date(Date.now()),
   *   // how long the listing will be open for
   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
   *   // Whether the listing is reserved for a specific set of buyers.
   *   isReservedListing: false
   * }
   *
   * const tx = await contract.directListings.createListing(listing);
   * const receipt = tx.receipt; // the transaction receipt
   * const id = tx.id; // the id of the newly created listing
   * ```
   * @twfeature DirectListings
   */ createListing = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listing)=>{
        const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());
        const normalizedPricePerToken = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$normalizePriceValue$2d$9851c0eb$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);
        const block = await this.contractWrapper.getProvider().getBlock("latest");
        const blockTime = block.timestamp;
        if (parsedListing.startTimestamp.lt(blockTime)) {
            parsedListing.startTimestamp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(blockTime);
        }
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "createListing",
            args: [
                {
                    assetContract: parsedListing.assetContractAddress,
                    tokenId: parsedListing.tokenId,
                    quantity: parsedListing.quantity,
                    currency: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$cleanCurrencyAddress$2d$ded19cfe$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(parsedListing.currencyContractAddress),
                    pricePerToken: normalizedPricePerToken,
                    startTimestamp: parsedListing.startTimestamp,
                    endTimestamp: parsedListing.endTimestamp,
                    reserved: parsedListing.isReservedListing
                }
            ],
            parse: (receipt)=>{
                const event = this.contractWrapper.parseLogs("NewListing", receipt?.logs);
                return {
                    id: event[0].args.listingId,
                    receipt
                };
            }
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Create a batch of new listings
   *
   * @remarks Create a batch of new listings on the marketplace
   *
   * @example
   * ```javascript
   * const listings = [...];
   * const tx = await contract.directListings.createListingsBatch(listings);
   * ```
   */ createListingsBatch = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listings)=>{
        const data = (await Promise.all(listings.map((listing)=>this.createListing.prepare(listing)))).map((tx)=>tx.encode());
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "multicall",
            args: [
                data
            ],
            parse: (receipt)=>{
                const events = this.contractWrapper.parseLogs("NewListing", receipt?.logs);
                return events.map((event)=>{
                    return {
                        id: event.args.listingId,
                        receipt
                    };
                });
            }
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Update a direct listing
   *
   * @param listing - the new listing information
   *
   * @example
   * ```javascript
   * // Data of the listing you want to update
   *
   * const listingId = 0; // ID of the listing you want to update
   *
   * const listing = {
   *   // address of the contract the asset you want to list is on
   *   assetContractAddress: "0x...", // should be same as original listing
   *   // token ID of the asset you want to list
   *   tokenId: "0", // should be same as original listing
   *   // how many of the asset you want to list
   *   quantity: 1,
   *   // address of the currency contract that will be used to pay for the listing
   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,
   *   // The price to pay per unit of NFTs listed.
   *   pricePerToken: 1.5,
   *   // when should the listing open up for offers
   *   startTimestamp: new Date(Date.now()), // can't change this if listing already active
   *   // how long the listing will be open for
   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
   *   // Whether the listing is reserved for a specific set of buyers.
   *   isReservedListing: false
   * }
   *
   * const tx = await contract.directListings.updateListing(listingId, listing);
   * const receipt = tx.receipt; // the transaction receipt
   * const id = tx.id; // the id of the newly created listing
   * ```
   * @twfeature DirectListings
   */ updateListing = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listingId, listing)=>{
        const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());
        const normalizedPricePerToken = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$normalizePriceValue$2d$9851c0eb$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "updateListing",
            args: [
                listingId,
                {
                    assetContract: parsedListing.assetContractAddress,
                    tokenId: parsedListing.tokenId,
                    quantity: parsedListing.quantity,
                    currency: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$cleanCurrencyAddress$2d$ded19cfe$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(parsedListing.currencyContractAddress),
                    pricePerToken: normalizedPricePerToken,
                    startTimestamp: parsedListing.startTimestamp,
                    endTimestamp: parsedListing.endTimestamp,
                    reserved: parsedListing.isReservedListing
                }
            ],
            parse: (receipt)=>{
                const event = this.contractWrapper.parseLogs("UpdatedListing", receipt?.logs);
                return {
                    id: event[0].args.listingId,
                    receipt
                };
            }
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Cancel Direct Listing
   *
   * @remarks Cancel a direct listing on the marketplace
   *
   * @example
   * ```javascript
   * // The listing ID of the direct listing you want to cancel
   * const listingId = 0;
   *
   * await contract.directListings.cancelListing(listingId);
   * ```
   * @twfeature DirectListings
   */ cancelListing = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listingId)=>{
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "cancelListing",
            args: [
                listingId
            ]
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Buy direct listing for a specific wallet
   *
   * @remarks Buy from a specific direct listing from the marketplace.
   *
   * @example
   * ```javascript
   * // The ID of the listing you want to buy from
   * const listingId = 0;
   * // Quantity of the asset you want to buy
   * const quantityDesired = 1;
   *
   * await contract.directListings.buyFromListing(listingId, quantityDesired, "{{wallet_address}}");
   * ```
   *
   * @param listingId - The listing id to buy
   * @param quantityDesired - the quantity to buy
   * @param receiver - optional receiver of the bought listing if different from the connected wallet
   * @twfeature DirectListings
   */ buyFromListing = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listingId, quantityDesired, receiver)=>{
        if (receiver) {
            receiver = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(receiver);
        }
        const listing = await this.validateListing(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listingId));
        const { valid, error } = await this.isStillValidListing(listing, quantityDesired);
        if (!valid) {
            throw new Error(`Listing ${listingId} is no longer valid. ${error}`);
        }
        const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();
        const quantity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(quantityDesired);
        const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listing.pricePerToken).mul(quantity);
        const overrides = await this.contractWrapper.getCallOverrides() || {};
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(this.contractWrapper, value, listing.currencyContractAddress, overrides);
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "buyFromListing",
            args: [
                listingId,
                buyFor,
                quantity,
                listing.currencyContractAddress,
                value
            ],
            overrides
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Approve buyer for a reserved direct listing
   *
   * @remarks Approve a buyer to buy from a reserved listing.
   *
   * @example
   * ```javascript
   * // The listing ID of the direct listing you want to approve buyer for
   * const listingId = "0";
   *
   * await contract.directListings.approveBuyerForReservedListing(listingId, "{{wallet_address}}");
   * ```
   *
   * @param listingId - The listing id to buy
   * @param buyer - Address of buyer being approved
   * @twfeature DirectListings
   */ approveBuyerForReservedListing = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listingId, buyer)=>{
        const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);
        if (!isApproved) {
            const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
                contractWrapper: this.contractWrapper,
                method: "approveBuyerForListing",
                args: [
                    listingId,
                    buyer,
                    true
                ]
            });
            tx.setGasLimitMultiple(1.2);
            return tx;
        } else {
            throw new Error(`Buyer ${buyer} already approved for listing ${listingId}.`);
        }
    });
    /**
   * Revoke approval of a buyer for a reserved direct listing
   *
   * @example
   * ```javascript
   * // The listing ID of the direct listing you want to approve buyer for
   * const listingId = "0";
   *
   * await contract.directListings.revokeBuyerApprovalForReservedListing(listingId, "{{wallet_address}}");
   * ```
   *
   * @param listingId - The listing id to buy
   * @param buyer - Address of buyer being approved
   */ revokeBuyerApprovalForReservedListing = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listingId, buyer)=>{
        const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);
        if (isApproved) {
            const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
                contractWrapper: this.contractWrapper,
                method: "approveBuyerForListing",
                args: [
                    listingId,
                    buyer,
                    false
                ]
            });
            tx.setGasLimitMultiple(1.2);
            return tx;
        } else {
            throw new Error(`Buyer ${buyer} not approved for listing ${listingId}.`);
        }
    });
    /**
   * Approve a currency for a direct listing
   *
   *
   * @example
   * ```javascript
   * // The listing ID of the direct listing you want to approve currency for
   * const listingId = "0";
   *
   * await contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);
   * ```
   *
   * @param listingId - The listing id to buy
   * @param currencyContractAddress - Address of currency being approved
   * @param pricePerTokenInCurrency - Price per token in the currency
   * @twfeature DirectListings
   */ approveCurrencyForListing = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listingId, currencyContractAddress, pricePerTokenInCurrency)=>{
        const listing = await this.validateListing(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listingId));
        const resolvedCurrencyAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(currencyContractAddress);
        if (resolvedCurrencyAddress === listing.currencyContractAddress) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(pricePerTokenInCurrency === listing.pricePerToken, "Approving listing currency with a different price.");
        }
        const currencyPrice = await this.contractWrapper.read("currencyPriceForListing", [
            listingId,
            resolvedCurrencyAddress
        ]);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(pricePerTokenInCurrency === currencyPrice, "Currency already approved with this price.");
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "approveCurrencyForListing",
            args: [
                listingId,
                resolvedCurrencyAddress,
                pricePerTokenInCurrency
            ]
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Revoke approval of a currency for a direct listing
   *
   *
   * @example
   * ```javascript
   * // The listing ID of the direct listing you want to revoke currency for
   * const listingId = "0";
   *
   * await contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);
   * ```
   *
   * @param listingId - The listing id to buy
   * @param currencyContractAddress - Address of currency
   * @twfeature DirectListings
   */ revokeCurrencyApprovalForListing = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listingId, currencyContractAddress)=>{
        const listing = await this.validateListing(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listingId));
        const resolvedCurrencyAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(currencyContractAddress);
        if (resolvedCurrencyAddress === listing.currencyContractAddress) {
            throw new Error(`Can't revoke approval for main listing currency.`);
        }
        const currencyPrice = await this.contractWrapper.read("currencyPriceForListing", [
            listingId,
            resolvedCurrencyAddress
        ]);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(!currencyPrice.isZero(), "Currency not approved.");
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "approveCurrencyForListing",
            args: [
                listingId,
                resolvedCurrencyAddress,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(0)
            ]
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /** ******************************
   * PRIVATE FUNCTIONS
   *******************************/ /**
   * Throws error if listing could not be found
   *
   * @param listingId - Listing to check for
   */ async validateListing(listingId) {
        try {
            return await this.getListing(listingId);
        } catch (err) {
            console.error(`Error getting the listing with id ${listingId}`);
            throw err;
        }
    }
    /**
   * Helper method maps the auction listing to the direct listing interface.
   *
   * @internal
   * @param listing - The listing to map, as returned from the contract.
   * @returns  The mapped interface.
   */ async mapListing(listing) {
        let status = Status.UNSET;
        const block = await this.contractWrapper.getProvider().getBlock("latest");
        const blockTime = block.timestamp;
        switch(listing.status){
            case 1:
                status = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listing.startTimestamp).gt(blockTime) ? Status.Created : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listing.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;
                break;
            case 2:
                status = Status.Completed;
                break;
            case 3:
                status = Status.Cancelled;
                break;
        }
        return {
            assetContractAddress: listing.assetContract,
            currencyContractAddress: listing.currency,
            pricePerToken: listing.pricePerToken.toString(),
            currencyValuePerToken: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.contractWrapper.getProvider(), listing.currency, listing.pricePerToken),
            id: listing.listingId.toString(),
            tokenId: listing.tokenId.toString(),
            quantity: listing.quantity.toString(),
            startTimeInSeconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listing.startTimestamp).toNumber(),
            asset: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),
            endTimeInSeconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(listing.endTimestamp).toNumber(),
            creatorAddress: listing.listingCreator,
            isReservedListing: listing.reserved,
            status: status
        };
    }
    /**
   * Use this method to check if a direct listing is still valid.
   *
   * Ways a direct listing can become invalid:
   * 1. The asset holder transferred the asset to another wallet
   * 2. The asset holder burned the asset
   * 3. The asset holder removed the approval on the marketplace
   *
   * @internal
   * @param listing - The listing to check.
   * @returns  True if the listing is valid, false otherwise.
   */ async isStillValidListing(listing, quantity) {
        const approved = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.creatorAddress);
        if (!approved) {
            return {
                valid: false,
                error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`
            };
        }
        const provider = this.contractWrapper.getProvider();
        const ERC165Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC165.json (json, async loader)")(__turbopack_context__.i)).default;
        const erc165 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](listing.assetContractAddress, ERC165Abi, provider);
        const isERC721 = await erc165.supportsInterface(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["I"]);
        const isERC1155 = await erc165.supportsInterface(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"]);
        if (isERC721) {
            const ERC721Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721.json (json, async loader)")(__turbopack_context__.i)).default;
            const asset = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](listing.assetContractAddress, ERC721Abi, provider);
            // Handle reverts in case of non-existent tokens
            let owner;
            try {
                owner = await asset.ownerOf(listing.tokenId);
            } catch (e) {}
            const valid = owner?.toLowerCase() === listing.creatorAddress.toLowerCase();
            return {
                valid,
                error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`
            };
        } else if (isERC1155) {
            const ERC1155Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155.json (json, async loader)")(__turbopack_context__.i)).default;
            const asset = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$contracts$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Contract"](listing.assetContractAddress, ERC1155Abi, provider);
            const balance = await asset.balanceOf(listing.creatorAddress, listing.tokenId);
            const valid = balance.gte(quantity || listing.quantity);
            return {
                valid,
                error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`
            };
        } else {
            return {
                valid: false,
                error: "Contract does not implement ERC 1155 or ERC 721."
            };
        }
    }
    async applyFilter(listings, filter) {
        let rawListings = [
            ...listings
        ];
        if (filter) {
            if (filter.seller) {
                const resolvedSeller = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(filter.seller);
                rawListings = rawListings.filter((seller)=>seller.listingCreator.toString().toLowerCase() === resolvedSeller?.toString().toLowerCase());
            }
            if (filter.tokenContract) {
                const resolvedToken = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(filter.tokenContract);
                rawListings = rawListings.filter((tokenContract)=>tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());
            }
            if (filter.tokenId !== undefined) {
                rawListings = rawListings.filter((tokenContract)=>tokenContract.tokenId.toString() === filter?.tokenId?.toString());
            }
        }
        return filter?.count && filter.count < rawListings.length ? rawListings.slice(0, filter.count) : rawListings;
    }
}
/**
 * @internal
 */ const EnglishAuctionInputParamsSchema = /* @__PURE__ */ (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        /**
   * The address of the asset being auctioned.
   */ assetContractAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b9"],
        /**
   * The ID of the token to auction.
   */ tokenId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b6"],
        /**
   * The quantity of tokens to include in the listing.
   *
   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).
   */ quantity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b6"].default(1),
        /**
   * The address of the currency to accept for the listing.
   */ currencyContractAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b9"].default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aV"]),
        /**
   * The minimum price that a bid must be in order to be accepted.
   */ minimumBidAmount: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cw"],
        /**
   * The buyout price of the auction.
   */ buyoutBidAmount: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cw"],
        /**
   * This is a buffer e.g. x seconds.
   *
   * If a new winning bid is made less than x seconds before expirationTimestamp, the
   * expirationTimestamp is increased by x seconds.
   */ timeBufferInSeconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b6"].default(900),
        // 15 minutes by default
        /**
   * This is a buffer in basis points e.g. x%.
   *
   * To be considered as a new winning bid, a bid must be at least x% greater than
   * the current winning bid.
   */ bidBufferBps: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b6"].default(500),
        // 5% by default
        /**
   * The start time of the auction.
   */ startTimestamp: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["R"].default(new Date()),
        /**
   * The end time of the auction.
   */ endTimestamp: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"]
    }))();
/**
 * @public
 */ /**
 * Handles auctions
 * @public
 */ class MarketplaceV3EnglishAuctions {
    featureName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dB"].name;
    // utilities
    constructor(contractWrapper, storage){
        this.contractWrapper = contractWrapper;
        this.storage = storage;
        this.events = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"](this.contractWrapper);
        this.encoder = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        this.interceptor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$interceptor$2d$d7b164a7$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        this.estimator = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["G"](this.contractWrapper);
    }
    getAddress() {
        return this.contractWrapper.address;
    }
    /** ******************************
   * READ FUNCTIONS
   *******************************/ /**
   * Get the total number of english auctions
   *
   * @returns Returns the total number of auctions created.
   * @public
   *
   * @example
   * ```javascript
   * const totalAuctions = await contract.englishAuctions.getTotalCount();
   * ```
   * @twfeature EnglishAuctions
   */ async getTotalCount() {
        return await this.contractWrapper.read("totalAuctions", []);
    }
    /**
   * Get all english auctions
   *
   * @example
   * ```javascript
   * const auctions = await contract.englishAuctions.getAll();
   * ```
   *
   * @param filter - optional filter parameters
   * @returns The Auction object array
   * @twfeature EnglishAuctions
   */ async getAll(filter) {
        const totalAuctions = await this.getTotalCount();
        const start = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(filter?.start || 0).toNumber();
        const end = totalAuctions.toNumber();
        if (end === 0) {
            throw new Error(`No auctions exist on the contract.`);
        }
        let rawAuctions = [];
        const batches = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(start, end, (startId, endId)=>this.contractWrapper.read("getAllAuctions", [
                startId,
                endId
            ]));
        rawAuctions = batches.flat();
        const filteredAuctions = await this.applyFilter(rawAuctions, filter);
        return await Promise.all(filteredAuctions.map((auction)=>this.mapAuction(auction)));
    }
    /**
   * Get all valid english auctions
   *
   * @example
   * ```javascript
   * const auctions = await contract.englishAuctions.getAllValid();
   * ```
   *
   * @param filter - optional filter parameters
   * @returns The Auction object array
   * @twfeature EnglishAuctions
   */ async getAllValid(filter) {
        const totalAuctions = await this.getTotalCount();
        const start = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(filter?.start || 0).toNumber();
        const end = totalAuctions.toNumber();
        if (end === 0) {
            throw new Error(`No auctions exist on the contract.`);
        }
        let rawAuctions = [];
        const batches = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(start, end, (startId, endId)=>this.contractWrapper.read("getAllValidAuctions", [
                startId,
                endId
            ]));
        rawAuctions = batches.flat();
        const filteredAuctions = await this.applyFilter(rawAuctions, filter);
        return await Promise.all(filteredAuctions.map((auction)=>this.mapAuction(auction)));
    }
    /**
   * Get a single english auction
   *
   * @example
   * ```javascript
   * const auctionId = 0;
   * const auction = await contract.englishAuctions.getAuction(auctionId);
   * ```
   *
   * @param auctionId - the auction Id
   * @returns The Auction object
   * @twfeature EnglishAuctions
   */ async getAuction(auctionId) {
        const auction = await this.contractWrapper.read("getAuction", [
            auctionId
        ]);
        return await this.mapAuction(auction);
    }
    /**
   * Get winning bid of an english auction
   *
   * @remarks Get the current highest bid of an active auction.
   *
   * @example
   * ```javascript
   * // The ID of the auction
   * const auctionId = 0;
   * const winningBid = await contract.englishAuctions.getWinningBid(auctionId);
   * ```
   * @param auctionId - the auction Id
   * @twfeature EnglishAuctions
   */ async getWinningBid(auctionId) {
        await this.validateAuction(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId));
        const bid = await this.contractWrapper.read("getWinningBid", [
            auctionId
        ]);
        if (bid._bidder === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$constants$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__constants$3e$__["constants"].AddressZero) {
            return undefined;
        }
        return await this.mapBid(auctionId.toString(), bid._bidder, bid._currency, bid._bidAmount.toString());
    }
    /**
   * Check if a bid is or will be a winning bid
   *
   * @example
   * ```javascript
   * const auctionId = 0;
   * const bidAmount = 100;
   * const isWinningBid = await contract.englishAuctions.isWinningBid(auctionId, bidAmount);
   * ```
   *
   * @param auctionId - Auction Id
   * @param bidAmount - Amount to bid
   * @returns true if the bid is or will be a winning bid
   * @twfeature EnglishAuctions
   */ async isWinningBid(auctionId, bidAmount) {
        return await this.contractWrapper.read("isNewWinningBid", [
            auctionId,
            bidAmount
        ]);
    }
    /**
   * Get the winner for a specific english auction
   *
   * @remarks Get the winner of the auction after an auction ends.
   *
   * @example
   * ```javascript
   * // The auction ID of a closed english auction
   * const auctionId = 0;
   * const auctionWinner = await contract.englishAuctions.getWinner(auctionId);
   * ```
   * @param auctionId - the auction Id
   * @returns The address of the auction winner
   * @twfeature EnglishAuctions
   */ async getWinner(auctionId) {
        const auction = await this.validateAuction(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId));
        const bid = await this.contractWrapper.read("getWinningBid", [
            auctionId
        ]);
        const now = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(Math.floor(Date.now() / 1000));
        const endTime = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.endTimeInSeconds);
        // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner
        if (now.gt(endTime) && bid._bidder !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$constants$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__constants$3e$__["constants"].AddressZero) {
            return bid._bidder;
        }
        // otherwise fall back to query filter things
        // TODO this should be via indexer or direct contract call
        const contractEvent = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"](this.contractWrapper);
        const closedAuctions = await contractEvent.getEvents("AuctionClosed");
        const closed = closedAuctions.find((a)=>a.data.auctionId.eq(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId)));
        if (!closed) {
            throw new Error(`Could not find auction with ID ${auctionId} in closed auctions`);
        }
        return closed.data.winningBidder;
    }
    /** ******************************
   * WRITE FUNCTIONS
   *******************************/ /**
   * Create an english auction
   *
   * @remarks Create a new auction where people can bid on an asset.
   *
   * @example
   * ```javascript
   * // Data of the auction you want to create
   * const auction = {
   *   // address of the contract of the asset you want to auction
   *   assetContractAddress: "0x...",
   *   // token ID of the asset you want to auction
   *   tokenId: "0",
   *   // how many of the asset you want to auction
   *   quantity: 1,
   *   // address of the currency contract that will be used to pay for the auctioned tokens
   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,
   *   // the minimum bid that will be accepted for the token
   *   minimumBidAmount: "1.5",
   *   // how much people would have to bid to instantly buy the asset
   *   buyoutBidAmount: "10",
   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.
   *   timeBufferInSeconds: "900", // 15 minutes by default
   *   // A bid must be at least this much bps greater than the current winning bid
   *   bidBufferBps: "500", // 5% by default
   *   // when should the auction open up for bidding
   *   startTimestamp: new Date(Date.now()),
   *   // end time of auction
   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
   * }
   *
   * const tx = await contract.englishAuctions.createAuction(auction);
   * const receipt = tx.receipt; // the transaction receipt
   * const id = tx.id; // the id of the newly created auction
   * ```
   * @param auction - the auction data
   * @returns The transaction hash and the auction id
   * @twfeature EnglishAuctions
   */ createAuction = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (auction)=>{
        const parsedAuction = EnglishAuctionInputParamsSchema.parse(auction);
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])(this.contractWrapper, this.getAddress(), parsedAuction.assetContractAddress, parsedAuction.tokenId, await this.contractWrapper.getSignerAddress());
        const normalizedBuyoutAmount = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$normalizePriceValue$2d$9851c0eb$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])(this.contractWrapper.getProvider(), parsedAuction.buyoutBidAmount, parsedAuction.currencyContractAddress);
        const normalizedMinBidAmount = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$normalizePriceValue$2d$9851c0eb$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])(this.contractWrapper.getProvider(), parsedAuction.minimumBidAmount, parsedAuction.currencyContractAddress);
        const block = await this.contractWrapper.getProvider().getBlock("latest");
        const blockTime = block.timestamp;
        if (parsedAuction.startTimestamp.lt(blockTime)) {
            parsedAuction.startTimestamp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(blockTime);
        }
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "createAuction",
            args: [
                {
                    assetContract: parsedAuction.assetContractAddress,
                    tokenId: parsedAuction.tokenId,
                    quantity: parsedAuction.quantity,
                    currency: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$cleanCurrencyAddress$2d$ded19cfe$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(parsedAuction.currencyContractAddress),
                    minimumBidAmount: normalizedMinBidAmount,
                    buyoutBidAmount: normalizedBuyoutAmount,
                    timeBufferInSeconds: parsedAuction.timeBufferInSeconds,
                    bidBufferBps: parsedAuction.bidBufferBps,
                    startTimestamp: parsedAuction.startTimestamp,
                    endTimestamp: parsedAuction.endTimestamp
                }
            ],
            parse: (receipt)=>{
                const event = this.contractWrapper.parseLogs("NewAuction", receipt.logs)[0];
                return {
                    id: event.args.auctionId,
                    receipt
                };
            }
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Create a batch of new auctions
   *
   * @remarks Create a batch of new auctions on the marketplace
   *
   * @example
   * ```javascript
   * const auctions = [...];
   * const tx = await contract.englishAuctions.createAuctionsBatch(auctions);
   * ```
   */ createAuctionsBatch = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (listings)=>{
        const data = (await Promise.all(listings.map((listing)=>this.createAuction.prepare(listing)))).map((tx)=>tx.encode());
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "multicall",
            args: [
                data
            ],
            parse: (receipt)=>{
                const events = this.contractWrapper.parseLogs("NewAuction", receipt?.logs);
                return events.map((event)=>{
                    return {
                        id: event.args.auctionId,
                        receipt
                    };
                });
            }
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Buyout an english auction
   *
   * @remarks Buy a specific auction from the marketplace.
   *
   * @example
   * ```javascript
   * // The auction ID you want to buy
   * const auctionId = 0;
   *
   * await contract.englishAuctions.buyoutAuction(auctionId);
   * ```
   * @param auctionId - the auction id
   * @returns The transaction result
   * @twfeature EnglishAuctions
   */ buyoutAuction = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (auctionId)=>{
        const auction = await this.validateAuction(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId));
        const currencyMetadata = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(this.contractWrapper.getProvider(), auction.currencyContractAddress);
        return this.makeBid.prepare(auctionId, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].formatUnits(auction.buyoutBidAmount, currencyMetadata.decimals));
    });
    /**
   * Bid on an english auction
   *
   * @remarks Make a bid on an auction
   *
   * @example
   * ```javascript
   * // The auction ID of the asset you want to bid on
   * const auctionId = 0;
   * // The total amount you are willing to bid for auctioned tokens
   * const bidAmount = 1;
   *
   * await contract.englishAuctions.makeBid(auctionId, bidAmount);
   * ```
   * @param auctionId - the auction id
   * @param bidAmount - the amount you are willing to bid
   * @returns The transaction result
   * @twfeature EnglishAuctions
   */ makeBid = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (auctionId, bidAmount)=>{
        const auction = await this.validateAuction(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId));
        const normalizedBidAmount = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$normalizePriceValue$2d$9851c0eb$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])(this.contractWrapper.getProvider(), bidAmount, auction.currencyContractAddress);
        if (normalizedBidAmount.eq(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(0))) {
            throw new Error("Cannot make a bid with 0 value");
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.buyoutBidAmount).gt(0) && normalizedBidAmount.gt(auction.buyoutBidAmount)) {
            throw new Error("Bid amount must be less than or equal to buyoutBidAmount");
        }
        const winningBid = await this.getWinningBid(auctionId);
        if (winningBid) {
            const isWinnner = await this.isWinningBid(auctionId, normalizedBidAmount);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(isWinnner, "Bid price is too low based on the current winning bid and the bid buffer");
        } else {
            const tokenPrice = normalizedBidAmount;
            const minimumBidAmount = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.minimumBidAmount);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(tokenPrice.gte(minimumBidAmount), "Bid price is too low based on minimum bid amount");
        }
        const overrides = await this.contractWrapper.getCallOverrides() || {};
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(this.contractWrapper, normalizedBidAmount, auction.currencyContractAddress, overrides);
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "bidInAuction",
            overrides,
            args: [
                auctionId,
                normalizedBidAmount
            ]
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Cancel an english auction
   *
   * @remarks Cancel an auction on the marketplace
   *
   * @example
   * ```javascript
   * // The ID of the auction you want to cancel
   * const auctionId = "0";
   *
   * await contract.englishAuctions.cancelAuction(auctionId);
   * ```
   * @param auctionId - the auction id
   * @returns The transaction result
   * @twfeature EnglishAuctions
   */ cancelAuction = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (auctionId)=>{
        const winningBid = await this.getWinningBid(auctionId);
        if (winningBid) {
            throw new Error(`Bids already made.`);
        }
        const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "cancelAuction",
            args: [
                auctionId
            ]
        });
        tx.setGasLimitMultiple(1.2);
        return tx;
    });
    /**
   * Close the english auction for the bidder
   *
   * @remarks Closes the Auction and executes the sale for the buyer.
   *
   * @example
   * ```javascript
   * // The ID of the auction you want to close
   * const auction = "0";
   * await contract.englishAuctions.closeAuctionForBidder(auctionId);
   * ```
   *
   * @param auctionId - the auction id to close
   * @param closeFor - optionally pass the winning bid offeror address to close the auction on their behalf
   * @returns The transaction result
   * @twfeature EnglishAuctions
   */ closeAuctionForBidder = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (auctionId, closeFor)=>{
        if (!closeFor) {
            closeFor = await this.contractWrapper.getSignerAddress();
        }
        const auction = await this.validateAuction(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId));
        try {
            const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
                contractWrapper: this.contractWrapper,
                method: "collectAuctionTokens",
                args: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId)
                ]
            });
            tx.setGasLimitMultiple(1.2);
            return tx;
        } catch (err) {
            if (err.message.includes("Marketplace: auction still active.")) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"](auctionId.toString(), auction.endTimeInSeconds.toString());
            } else {
                throw err;
            }
        }
    });
    /**
   * Close the english auction for the seller
   *
   * @remarks Closes the Auction and executes the sale for the seller.
   *
   * @example
   * ```javascript
   * // The ID of the auction you want to close
   * const auctionId = "0";
   * await contract.englishAuctions.closeAuctionForSeller(auctionId);
   * ```
   *
   * @param auctionId - the auction id to close
   * @returns The transaction result
   * @twfeature EnglishAuctions
   */ closeAuctionForSeller = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (auctionId)=>{
        const auction = await this.validateAuction(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId));
        try {
            const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
                contractWrapper: this.contractWrapper,
                method: "collectAuctionPayout",
                args: [
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId)
                ]
            });
            tx.setGasLimitMultiple(1.2);
            return tx;
        } catch (err) {
            if (err.message.includes("Marketplace: auction still active.")) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"](auctionId.toString(), auction.endTimeInSeconds.toString());
            } else {
                throw err;
            }
        }
    });
    /**
   * Close the english auction for both the seller and the bidder
   *
   * @remarks Closes the Auction and executes the sale for both parties.
   *
   * @example
   * ```javascript
   * // The ID of the auction you want to close
   * const auction = "0";
   * await contract.englishAuctions.executeSale(auctionId);
   * ```
   *
   * @param auctionId - the auction to close
   * @returns The transaction result
   * @twfeature EnglishAuctions
   */ executeSale = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (auctionId)=>{
        const auction = await this.validateAuction(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId));
        try {
            const winningBid = await this.getWinningBid(auctionId);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(winningBid, "No winning bid found");
            const closeForSeller = this.encoder.encode("collectAuctionPayout", [
                auctionId
            ]);
            const closeForBuyer = this.encoder.encode("collectAuctionTokens", [
                auctionId
            ]);
            const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
                contractWrapper: this.contractWrapper,
                method: "multicall",
                args: [
                    [
                        closeForSeller,
                        closeForBuyer
                    ]
                ]
            });
            tx.setGasLimitMultiple(1.2);
            return tx;
        } catch (err) {
            if (err.message.includes("Marketplace: auction still active.")) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"](auctionId.toString(), auction.endTimeInSeconds.toString());
            } else {
                throw err;
            }
        }
    });
    /**
   * Get the buffer for an english auction
   *
   * @example
   * ```javascript
   * // The ID of the auction you want to get the buffer for
   * const auctionId = "0";
   * const buffer = await contract.englishAuctions.getBidBufferBps(auctionId);
   * ```
   *
   * @param auctionId - id of the auction
   * @returns The buffer in basis points
   * @twfeature EnglishAuctions
   */ async getBidBufferBps(auctionId) {
        return (await this.getAuction(auctionId)).bidBufferBps;
    }
    /**
   * Get the minimum next bid for an english auction
   *
   * @example
   * ```javascript
   * // The ID of the auction you want to get the minimum next bid for
   * const auctionId = "0";
   * const minimumNextBid = await contract.englishAuctions.getMinimumNextBid(auctionId);
   * ```
   *
   * @returns The minimum bid a user can place to outbid the previous highest bid
   * @param auctionId - id of the auction
   * @twfeature EnglishAuctions
   */ async getMinimumNextBid(auctionId) {
        // we can fetch all of these at the same time using promise.all
        const [currentBidBufferBps, winningBid, auction] = await Promise.all([
            this.getBidBufferBps(auctionId),
            this.getWinningBid(auctionId),
            this.validateAuction(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auctionId))
        ]);
        const currentBidOrReservePrice = winningBid ? // if there is a winning bid use the value of it
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(winningBid.bidAmount) : // if there is no winning bid use the reserve price
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.minimumBidAmount);
        const minimumNextBid = currentBidOrReservePrice.add(// the addition of the current bid and the buffer
        // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))
        currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));
        // it's more useful to return a currency value here
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.contractWrapper.getProvider(), auction.currencyContractAddress, minimumNextBid);
    }
    /** ******************************
   * PRIVATE FUNCTIONS
   *******************************/ /**
   * Throws error if auction could not be found
   *
   * @param auctionId - Auction to check for
   */ async validateAuction(auctionId) {
        try {
            return await this.getAuction(auctionId);
        } catch (err) {
            console.error(`Error getting the auction with id ${auctionId}`);
            throw err;
        }
    }
    /**
   * Helper method maps the auction to the auction interface.
   *
   * @internal
   * @param auction - The auction to map, as returned from the contract.
   * @returns  The mapped interface.
   */ async mapAuction(auction) {
        let status = Status.UNSET;
        const block = await this.contractWrapper.getProvider().getBlock("latest");
        const blockTime = block.timestamp;
        switch(auction.status){
            case 1:
                status = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.startTimestamp).gt(blockTime) ? Status.Created : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;
                break;
            case 2:
                status = Status.Completed;
                break;
            case 3:
                status = Status.Cancelled;
                break;
        }
        return {
            id: auction.auctionId.toString(),
            creatorAddress: auction.auctionCreator,
            assetContractAddress: auction.assetContract,
            tokenId: auction.tokenId.toString(),
            quantity: auction.quantity.toString(),
            currencyContractAddress: auction.currency,
            minimumBidAmount: auction.minimumBidAmount.toString(),
            minimumBidCurrencyValue: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.contractWrapper.getProvider(), auction.currency, auction.minimumBidAmount),
            buyoutBidAmount: auction.buyoutBidAmount.toString(),
            buyoutCurrencyValue: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.contractWrapper.getProvider(), auction.currency, auction.buyoutBidAmount),
            timeBufferInSeconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.timeBufferInSeconds).toNumber(),
            bidBufferBps: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.bidBufferBps).toNumber(),
            startTimeInSeconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.startTimestamp).toNumber(),
            endTimeInSeconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(auction.endTimestamp).toNumber(),
            asset: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(auction.assetContract, this.contractWrapper.getProvider(), auction.tokenId, this.storage),
            status: status
        };
    }
    /**
   * Maps an auction-bid to the strict interface
   *
   * @internal
   * @param bid - The bid to map, as returned from the contract.
   * @returns  A `Bid` object
   */ async mapBid(auctionId, bidderAddress, currencyContractAddress, bidAmount) {
        const resolvedBidderAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(bidderAddress);
        const resolvedCurrencyAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(currencyContractAddress);
        return {
            auctionId,
            bidderAddress: resolvedBidderAddress,
            currencyContractAddress: resolvedCurrencyAddress,
            bidAmount,
            bidAmountCurrencyValue: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.contractWrapper.getProvider(), resolvedCurrencyAddress, bidAmount)
        };
    }
    async applyFilter(auctions, filter) {
        let rawAuctions = [
            ...auctions
        ];
        if (filter) {
            if (filter.seller) {
                const resolvedSeller = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(filter.seller);
                rawAuctions = rawAuctions.filter((seller)=>seller.auctionCreator.toString().toLowerCase() === resolvedSeller?.toString().toLowerCase());
            }
            if (filter.tokenContract) {
                const resolvedToken = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(filter.tokenContract);
                rawAuctions = rawAuctions.filter((tokenContract)=>tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());
            }
            if (filter.tokenId !== undefined) {
                rawAuctions = rawAuctions.filter((tokenContract)=>tokenContract.tokenId.toString() === filter?.tokenId?.toString());
            }
        }
        return filter?.count && filter.count < rawAuctions.length ? rawAuctions.slice(0, filter.count) : rawAuctions;
    }
}
/**
 * @internal
 */ const OfferInputParamsSchema = /* @__PURE__ */ (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        /**
   * The address of the asset being sought.
   */ assetContractAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b9"],
        /**
   * The ID of the token.
   */ tokenId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b6"],
        /**
   * The quantity of tokens to buy.
   *
   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).
   */ quantity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b6"].default(1),
        /**
   * The address of the currency offered for the NFTs.
   */ currencyContractAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b9"].default(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aV"]),
        /**
   * The total offer amount for the NFTs.
   */ totalPrice: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cw"],
        /**
   * The end time of the offer.
   */ endTimestamp: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["E"]
    }))();
/**
 * @public
 */ /**
 * Handles marketplace offers
 * @public
 */ class MarketplaceV3Offers {
    featureName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dC"].name;
    // utilities
    constructor(contractWrapper, storage){
        this.contractWrapper = contractWrapper;
        this.storage = storage;
        this.events = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"](this.contractWrapper);
        this.encoder = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        this.interceptor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$interceptor$2d$d7b164a7$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        this.estimator = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["G"](this.contractWrapper);
    }
    getAddress() {
        return this.contractWrapper.address;
    }
    /** ******************************
   * READ FUNCTIONS
   *******************************/ /**
   * Get the total number of offers
   *
   * @returns Returns the total number of offers created.
   * @public
   *
   * @example
   * ```javascript
   * const totalOffers = await contract.offers.getTotalCount();
   * ```
   * @twfeature Offers
   */ async getTotalCount() {
        return await this.contractWrapper.read("totalOffers", []);
    }
    /**
   * Get all offers
   *
   * @example
   * ```javascript
   * const offers = await contract.offers.getAll();
   * ```
   *
   * @param filter - optional filter parameters
   * @returns The Offer object array
   * @twfeature Offers
   */ async getAll(filter) {
        const totalOffers = await this.getTotalCount();
        const start = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(filter?.start || 0).toNumber();
        const end = totalOffers.toNumber();
        if (end === 0) {
            throw new Error(`No offers exist on the contract.`);
        }
        let rawOffers = [];
        const batches = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(start, end, (startId, endId)=>this.contractWrapper.read("getAllOffers", [
                startId,
                endId
            ]));
        rawOffers = batches.flat();
        const filteredOffers = await this.applyFilter(rawOffers, filter);
        return await Promise.all(filteredOffers.map((offer)=>this.mapOffer(offer)));
    }
    /**
   * Get all valid offers
   *
   * @example
   * ```javascript
   * const offers = await contract.offers.getAllValid();
   * ```
   *
   * @param filter - optional filter parameters
   * @returns The Offer object array
   * @twfeature Offers
   */ async getAllValid(filter) {
        const totalOffers = await this.getTotalCount();
        const start = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(filter?.start || 0).toNumber();
        const end = totalOffers.toNumber();
        if (end === 0) {
            throw new Error(`No offers exist on the contract.`);
        }
        let rawOffers = [];
        const batches = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(start, end, (startId, endId)=>this.contractWrapper.read("getAllValidOffers", [
                startId,
                endId
            ]));
        rawOffers = batches.flat();
        const filteredOffers = await this.applyFilter(rawOffers, filter);
        return await Promise.all(filteredOffers.map((offer)=>this.mapOffer(offer)));
    }
    /**
   * Get a single offer
   *
   * @example
   * ```javascript
   * const offerId = 0;
   * const offer = await contract.offers.getOffer(offerId);
   * ```
   *
   * @param offerId - the listing id
   * @returns The Direct listing object
   * @twfeature Offers
   */ async getOffer(offerId) {
        const offer = await this.contractWrapper.read("getOffer", [
            offerId
        ]);
        return await this.mapOffer(offer);
    }
    /** ******************************
   * WRITE FUNCTIONS
   *******************************/ /**
   * Make an offer
   *
   * @remarks Make an offer on the marketplace for an asset.
   *
   * @example
   * ```javascript
   * // Data of the offer you want to make
   * const offer = {
   *   // address of the contract the asset you want to make an offer for
   *   assetContractAddress: "0x...",
   *   // token ID of the asset you want to buy
   *   tokenId: "0",
   *   // how many of the asset you want to buy
   *   quantity: 1,
   *   // address of the currency contract that you offer to pay in
   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,
   *   // Total price you offer to pay for the mentioned token(s)
   *   totalPrice: "1.5",
   *   // Offer valid until
   *   endTimestamp: new Date(),
   * }
   *
   * const tx = await contract.offers.makeOffer(offer);
   * const receipt = tx.receipt; // the transaction receipt
   * const id = tx.id; // the id of the newly created offer
   * ```
   * @param offer - the offer data
   * @returns The transaction receipt and the id of the newly created offer
   * @twfeature Offers
   */ makeOffer = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (offer)=>{
        const parsedOffer = await OfferInputParamsSchema.parseAsync(offer);
        const chainId = await this.contractWrapper.getChainID();
        const currency = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])(parsedOffer.currencyContractAddress) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aW"][chainId].wrapped.address : parsedOffer.currencyContractAddress;
        const normalizedTotalPrice = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$normalizePriceValue$2d$9851c0eb$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])(this.contractWrapper.getProvider(), parsedOffer.totalPrice, currency);
        const overrides = await this.contractWrapper.getCallOverrides();
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$setErc20Allowance$2d$7f76f677$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["s"])(this.contractWrapper, normalizedTotalPrice, currency, overrides);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "makeOffer",
            args: [
                {
                    assetContract: parsedOffer.assetContractAddress,
                    tokenId: parsedOffer.tokenId,
                    quantity: parsedOffer.quantity,
                    currency: currency,
                    totalPrice: normalizedTotalPrice,
                    expirationTimestamp: parsedOffer.endTimestamp
                }
            ],
            parse: (receipt)=>{
                const event = this.contractWrapper.parseLogs("NewOffer", receipt?.logs);
                return {
                    id: event[0].args.offerId,
                    receipt
                };
            }
        });
    });
    /**
   * Cancel an offer
   *
   * @remarks Cancel an offer on the marketplace
   *
   * @example
   * ```javascript
   * // The ID of the offer you want to cancel
   * const offerId = "0";
   *
   * await contract.offers.cancelOffer(offerId);
   * ```
   * @param offerId - the offer id
   * @returns The transaction receipt
   * @twfeature Offers
   */ cancelOffer = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (offerId)=>{
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "cancelOffer",
            args: [
                offerId
            ]
        });
    });
    /**
   * Accept an offer
   *
   * @example
   * ```javascript
   * // The ID of the offer you want to accept
   * const offerId = 0;
   *
   * await contract.offers.acceptOffer(offerId);
   * ```
   *
   * @param offerId - The offer id
   * @returns The transaction receipt
   * @twfeature Offers
   */ acceptOffer = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["f"])(async (offerId)=>{
        const offer = await this.validateOffer(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(offerId));
        const { valid, error } = await this.isStillValidOffer(offer);
        if (!valid) {
            throw new Error(`Offer ${offerId} is no longer valid. ${error}`);
        }
        const overrides = await this.contractWrapper.getCallOverrides() || {};
        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplace$2d$e3129e2f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["h"])(this.contractWrapper, this.getAddress(), offer.assetContractAddress, offer.tokenId, await this.contractWrapper.getSignerAddress());
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method: "acceptOffer",
            args: [
                offerId
            ],
            overrides
        });
    });
    /** ******************************
   * PRIVATE FUNCTIONS
   *******************************/ /**
   * Throws error if offer could not be found
   *
   * @param offerId - offer to check for
   */ async validateOffer(offerId) {
        try {
            return await this.getOffer(offerId);
        } catch (err) {
            console.error(`Error getting the offer with id ${offerId}`);
            throw err;
        }
    }
    /**
   * Helper method maps the offer to the offer interface.
   *
   * @internal
   * @param offer - The offer to map, as returned from the contract.
   * @returns  The mapped interface.
   */ async mapOffer(offer) {
        let status = Status.UNSET;
        const block = await this.contractWrapper.getProvider().getBlock("latest");
        const blockTime = block.timestamp;
        switch(offer.status){
            case 1:
                status = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(offer.expirationTimestamp).lt(blockTime) ? Status.Expired : Status.Active;
                break;
            case 2:
                status = Status.Completed;
                break;
            case 3:
                status = Status.Cancelled;
                break;
        }
        return {
            id: offer.offerId.toString(),
            offerorAddress: offer.offeror,
            assetContractAddress: offer.assetContract,
            currencyContractAddress: offer.currency,
            tokenId: offer.tokenId.toString(),
            quantity: offer.quantity.toString(),
            totalPrice: offer.totalPrice.toString(),
            currencyValue: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.contractWrapper.getProvider(), offer.currency, offer.totalPrice),
            asset: await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$QueryParams$2d$32a56510$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["c"])(offer.assetContract, this.contractWrapper.getProvider(), offer.tokenId, this.storage),
            endTimeInSeconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(offer.expirationTimestamp).toNumber(),
            status: status
        };
    }
    /**
   * Use this method to check if an offer is still valid.
   *
   * Ways an offer can become invalid:
   * 1. The offer has expired
   * 2. The offeror doesn't have enough balance of currency tokens
   * 3. The offeror removed the approval of currency tokens on the marketplace
   *
   * @internal
   * @param offer - The offer to check.
   * @returns  True if the offer is valid, false otherwise.
   */ async isStillValidOffer(offer) {
        const now = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BigNumber"].from(Math.floor(Date.now() / 1000));
        if (now.gt(offer.endTimeInSeconds)) {
            return {
                valid: false,
                error: `Offer with ID ${offer.id} has expired`
            };
        }
        const chainId = await this.contractWrapper.getChainID();
        const currency = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["i"])(offer.currencyContractAddress) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aW"][chainId].wrapped.address : offer.currencyContractAddress;
        const provider = this.contractWrapper.getProvider();
        const ERC20Abi = (await __turbopack_context__.r("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json (json, async loader)")(__turbopack_context__.i)).default;
        const erc20 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cs"](provider, currency, ERC20Abi, {}, this.storage);
        const offerorBalance = await erc20.read("balanceOf", [
            offer.offerorAddress
        ]);
        if (offerorBalance.lt(offer.totalPrice)) {
            return {
                valid: false,
                error: `Offeror ${offer.offerorAddress} doesn't have enough balance of token ${currency}`
            };
        }
        const offerorAllowance = await erc20.read("allowance", [
            offer.offerorAddress,
            this.getAddress()
        ]);
        if (offerorAllowance.lt(offer.totalPrice)) {
            return {
                valid: false,
                error: `Offeror ${offer.offerorAddress} hasn't approved enough amount of token ${currency}`
            };
        }
        return {
            valid: true,
            error: ""
        };
    }
    async applyFilter(offers, filter) {
        let rawOffers = [
            ...offers
        ];
        if (filter) {
            if (filter.offeror) {
                const resolvedOfferor = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(filter.offeror);
                rawOffers = rawOffers.filter((offeror)=>offeror.offeror.toString().toLowerCase() === resolvedOfferor?.toString().toLowerCase());
            }
            if (filter.tokenContract) {
                const resolvedToken = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["aL"])(filter.tokenContract);
                rawOffers = rawOffers.filter((tokenContract)=>tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());
            }
            if (filter.tokenId !== undefined) {
                rawOffers = rawOffers.filter((tokenContract)=>tokenContract.tokenId.toString() === filter?.tokenId?.toString());
            }
        }
        return filter?.count && filter.count < rawOffers.length ? rawOffers.slice(0, filter.count) : rawOffers;
    }
}
;
}}),
"[project]/node_modules/@thirdweb-dev/sdk/dist/marketplacev3-ef469d89.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MarketplaceV3": (()=>MarketplaceV3)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/assertEnabled-d1700f0b.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/index-33cd3415.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/fetchCurrencyValue-32d08b05.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$interceptor$2d$d7b164a7$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$platform$2d$fee$2d$e756e68f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/contract-platform-fee-e756e68f.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$roles$2d$71988d2e$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/contract-roles-71988d2e.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplacev3$2d$offers$2d$ce1f096b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/marketplacev3-offers-ce1f096b.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/sdk/dist/transactions-72f9603c.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$tiny$2d$invariant$2f$dist$2f$esm$2f$tiny$2d$invariant$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/tiny-invariant/dist/esm/tiny-invariant.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bn$2e$js$2f$lib$2f$bn$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/bn.js/lib/bn.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/bs58/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IBurnableERC20$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDrop$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDrop.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDropERC20_V2$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDropSinglePhase$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDropSinglePhase_V1$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC20$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC20Permit$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IMintableERC20$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IMulticall$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IMulticall.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$ISignatureMintERC20$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC20Metadata$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IBurnableERC721$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IClaimableERC721$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDelayedReveal$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDropERC721_V3$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC721$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC721Enumerable$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC721AQueryableUpgradeable$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC721Supply$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$ILazyMint$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IMintableERC721$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$ISignatureMintERC721$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$ISignatureMintERC721_V1$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$LazyMintWithTier_V1$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$SharedMetadata$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$zora_IERC721Drop$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$ILoyaltyCard$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$INFTMetadata$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC721Metadata$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IBurnableERC1155$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IClaimableERC1155$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDrop1155$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDropERC1155_V2$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDropSinglePhase1155$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDropSinglePhase1155_V1$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC1155$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC1155Metadata$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC1155Supply$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC1155Enumerable$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IMintableERC1155$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$ISignatureMintERC1155$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IERC2771Context$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IAppURI$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IAppURI.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IContractMetadata$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IDirectListings$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IEnglishAuctions$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IOffers$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IOffers.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IPackVRFDirect$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IPermissions$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IPermissions.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IPermissionsEnumerable$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IPlatformFee$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IPrimarySale$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IRoyalty$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$Ownable$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/Ownable.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IAirdropERC20$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IAirdropERC721$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IAirdropERC1155$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IAccountFactoryCore$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IAccountPermissions$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IAccountPermissions_V1$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$contracts$2d$js$2f$dist$2f$abis$2f$IAccount$2e$json__$28$json$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/contracts-js/dist/abis/IAccount.json (json)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$eventemitter3$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/eventemitter3/index.mjs [app-client] (ecmascript) <module evaluation>");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.
 *
 * @example
 *
 * ```javascript
 * import { ThirdwebSDK } from "@thirdweb-dev/sdk";
 *
 * const sdk = new ThirdwebSDK("{{chainName}}");
 * const contract = await sdk.getContract("{{contract_address}}", "marketplace");
 * ```
 *
 * @internal
 * @deprecated use contract.directListings / contract.auctions / contract.offers instead
 */ class MarketplaceV3 {
    static contractRoles = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dH"];
    /**
   * @internal
   */ /**
   * Direct listings
   * @remarks Create and manage direct listings in your marketplace.
   * ```javascript
   * // Data of the listing you want to create
   * const listing = {
   *   // address of the contract the asset you want to list is on
   *   assetContractAddress: "0x...",
   *   // token ID of the asset you want to list
   *   tokenId: "0",
   *   // how many of the asset you want to list
   *   quantity: 1,
   *   // address of the currency contract that will be used to pay for the listing
   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,
   *   // The price to pay per unit of NFTs listed.
   *   pricePerToken: 1.5,
   *   // when should the listing open up for offers
   *   startTimestamp: new Date(Date.now()),
   *   // how long the listing will be open for
   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
   *   // Whether the listing is reserved for a specific set of buyers.
   *   isReservedListing: false
   * }
   *
   * const tx = await contract.directListings.createListing(listing);
   * const receipt = tx.receipt; // the transaction receipt
   * const id = tx.id; // the id of the newly created listing
   *
   * // And on the buyers side:
   * // The ID of the listing you want to buy from
   * const listingId = 0;
   * // Quantity of the asset you want to buy
   * const quantityDesired = 1;
   *
   * await contract.directListings.buyFromListing(listingId, quantityDesired);
   * ```
   */ get directListings() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.detectDirectListings(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dA"]);
    }
    /**
   * Auctions
   * @remarks Create and manage auctions in your marketplace.
   * @example
   * ```javascript
   * // Data of the auction you want to create
   * const auction = {
   *   // address of the contract of the asset you want to auction
   *   assetContractAddress: "0x...",
   *   // token ID of the asset you want to auction
   *   tokenId: "0",
   *   // how many of the asset you want to auction
   *   quantity: 1,
   *   // address of the currency contract that will be used to pay for the auctioned tokens
   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,
   *   // the minimum bid that will be accepted for the token
   *   minimumBidAmount: "1.5",
   *   // how much people would have to bid to instantly buy the asset
   *   buyoutBidAmount: "10",
   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.
   *   timeBufferInSeconds: "1000",
   *   // A bid must be at least this much bps greater than the current winning bid
   *   bidBufferBps: "100", // 100 bps stands for 1%
   *   // when should the auction open up for bidding
   *   startTimestamp: new Date(Date.now()),
   *   // end time of auction
   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
   * }
   *
   * const tx = await contract.englishAuctions.createAuction(auction);
   * const receipt = tx.receipt; // the transaction receipt
   * const id = tx.id; // the id of the newly created auction
   *
   * // And on the buyers side:
   * // The auction ID of the asset you want to bid on
   * const auctionId = 0;
   * // The total amount you are willing to bid for auctioned tokens
   * const bidAmount = 1;
   *
   * await contract.englishAuctions.makeBid(auctionId, bidAmount);
   * ```
   */ get englishAuctions() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.detectEnglishAuctions(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dB"]);
    }
    /**
   * Offers
   * @remarks Make and manage offers.
   * @example
   * ```javascript
   * // Data of the offer you want to make
   * const offer = {
   *   // address of the contract the asset you want to make an offer for
   *   assetContractAddress: "0x...",
   *   // token ID of the asset you want to buy
   *   tokenId: "0",
   *   // how many of the asset you want to buy
   *   quantity: 1,
   *   // address of the currency contract that you offer to pay in
   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,
   *   // Total price you offer to pay for the mentioned token(s)
   *   totalPrice: "1.5",
   *   // Offer valid until
   *   endTimestamp: new Date(),
   * }
   *
   * const tx = await contract.offers.makeOffer(offer);
   * const receipt = tx.receipt; // the transaction receipt
   * const id = tx.id; // the id of the newly created offer
   *
   * // And on the seller's side:
   * // The ID of the offer you want to accept
   * const offerId = 0;
   * await contract.offers.acceptOffer(offerId);
   * ```
   */ get offers() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$assertEnabled$2d$d1700f0b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"])(this.detectOffers(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dC"]);
    }
    get chainId() {
        return this._chainId;
    }
    constructor(network, address, storage){
        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        let abi = arguments.length > 4 ? arguments[4] : undefined;
        let chainId = arguments.length > 5 ? arguments[5] : undefined;
        let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cs"](network, address, abi, options, storage);
        this._chainId = chainId;
        this.abi = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["bj"].parse(abi || []);
        this.contractWrapper = contractWrapper;
        this.storage = storage;
        this.metadata = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$index$2d$33cd3415$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b$"], this.storage);
        this.app = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"](this.contractWrapper, this.metadata, this.storage);
        this.roles = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$roles$2d$71988d2e$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper, MarketplaceV3.contractRoles);
        this.encoder = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$fetchCurrencyValue$2d$32d08b05$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        this.estimator = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["G"](this.contractWrapper);
        this.events = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"](this.contractWrapper);
        this.platformFees = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$platform$2d$fee$2d$e756e68f$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
        this.interceptor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$interceptor$2d$d7b164a7$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"](this.contractWrapper);
    }
    onNetworkUpdated(network) {
        this.contractWrapper.updateSignerOrProvider(network);
    }
    getAddress() {
        return this.contractWrapper.address;
    }
    /**
   * @internal
   */ async prepare(method, args, overrides) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$transactions$2d$72f9603c$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["T"].fromContractWrapper({
            contractWrapper: this.contractWrapper,
            method,
            args,
            overrides
        });
    }
    /**
   * @internal
   */ async call(functionName, args, overrides) {
        return this.contractWrapper.call(functionName, args, overrides);
    }
    /** ********************
   * FEATURE DETECTION
   * ********************/ detectDirectListings() {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(this.contractWrapper, "DirectListings")) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplacev3$2d$offers$2d$ce1f096b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["M"](this.contractWrapper, this.storage);
        }
        return undefined;
    }
    detectEnglishAuctions() {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(this.contractWrapper, "EnglishAuctions")) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplacev3$2d$offers$2d$ce1f096b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["a"](this.contractWrapper, this.storage);
        }
        return undefined;
    }
    detectOffers() {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$contract$2d$appuri$2d$5c40af52$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["d"])(this.contractWrapper, "Offers")) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$sdk$2f$dist$2f$marketplacev3$2d$offers$2d$ce1f096b$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["b"](this.contractWrapper, this.storage);
        }
        return undefined;
    }
}
;
}}),
}]);

//# sourceMappingURL=node_modules_%40thirdweb-dev_sdk_dist_d257ad55._.js.map