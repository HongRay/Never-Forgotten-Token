(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "W": (()=>WagmiConnector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$chains$2f$dist$2f$thirdweb$2d$dev$2d$chains$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/chains/dist/thirdweb-dev-chains.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$eventemitter3$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/eventemitter3/index.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$eventemitter3$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/eventemitter3/index.mjs [app-client] (ecmascript) <locals>");
;
;
class WagmiConnector extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$eventemitter3$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__["default"] {
    /** Unique connector id */ /** Connector name */ /** Chains connector supports */ /** Options to use with connector */ /** Whether connector is usable */ constructor(_ref){
        let { chains = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$chains$2f$dist$2f$thirdweb$2d$dev$2d$chains$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaultChains"], options } = _ref;
        super();
        this.chains = chains;
        this.options = options;
    }
    getBlockExplorerUrls(chain) {
        const explorers = chain.explorers?.map((x)=>x.url) ?? [];
        return explorers.length > 0 ? explorers : undefined;
    }
    isChainUnsupported(chainId) {
        return !this.chains.some((x)=>x.chainId === chainId);
    }
    updateChains(chains) {
        this.chains = chains;
    }
}
;
}}),
"[project]/node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "A": (()=>AddChainError),
    "C": (()=>ChainNotConfiguredError),
    "P": (()=>ProviderRpcError),
    "R": (()=>ResourceUnavailableError),
    "S": (()=>SwitchChainError),
    "U": (()=>UserRejectedRequestError),
    "a": (()=>ConnectorNotFoundError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/defineProperty-350fc508.browser.esm.js [app-client] (ecmascript)");
;
/**
 * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors per EIP-1474.
 * @see https://eips.ethereum.org/EIPS/eip-1474
 */ class RpcError extends Error {
    constructor(/** Human-readable string */ message, options){
        const { cause, code, data } = options;
        if (!Number.isInteger(code)) {
            throw new Error('"code" must be an integer.');
        }
        if (!message || typeof message !== "string") {
            throw new Error('"message" must be a nonempty string.');
        }
        super(`${message}. Cause: ${JSON.stringify(cause)}`);
        this.cause = cause;
        this.code = code;
        this.data = data;
    }
}
/**
 * @internal
 * Error subclass implementing Ethereum Provider errors per EIP-1193.
 * @see https://eips.ethereum.org/EIPS/eip-1193
 */ class ProviderRpcError extends RpcError {
    /**
   * Create an Ethereum Provider JSON-RPC error.
   * `code` must be an integer in the `1000 <= 4999` range.
   */ constructor(/** Human-readable string */ message, options){
        const { cause, code, data } = options;
        if (!(Number.isInteger(code) && code >= 1000 && code <= 4999)) {
            throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
        }
        super(message, {
            cause,
            code,
            data
        });
    }
}
/**
 * @internal
 */ class AddChainError extends Error {
    constructor(){
        super(...arguments);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "name", "AddChainError");
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "message", "Error adding chain");
    }
}
/**
 * @internal
 */ class ChainNotConfiguredError extends Error {
    constructor(_ref){
        let { chainId, connectorId } = _ref;
        super(`Chain "${chainId}" not configured for connector "${connectorId}".`);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "name", "ChainNotConfigured");
    }
}
class ConnectorNotFoundError extends Error {
    constructor(){
        super(...arguments);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "name", "ConnectorNotFoundError");
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "message", "Connector not found");
    }
}
class ResourceUnavailableError extends RpcError {
    constructor(cause){
        super("Resource unavailable", {
            cause,
            code: -32002
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "name", "ResourceUnavailable");
    }
}
/**
 * @internal
 */ class SwitchChainError extends ProviderRpcError {
    constructor(cause){
        super("Error switching chain", {
            cause,
            code: 4902
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "name", "SwitchChainError");
    }
}
/**
 * @internal
 */ class UserRejectedRequestError extends ProviderRpcError {
    constructor(cause){
        super("User rejected request", {
            cause,
            code: 4001
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "name", "UserRejectedRequestError");
    }
}
;
}}),
"[project]/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * @internal
 */ __turbopack_context__.s({
    "n": (()=>normalizeChainId)
});
function normalizeChainId(chainId) {
    if (typeof chainId === "string") {
        return Number.parseInt(chainId, chainId.trim().substring(0, 2) === "0x" ? 16 : 10);
    }
    if (typeof chainId === "bigint") {
        return Number(chainId);
    }
    return chainId;
}
;
}}),
"[project]/node_modules/@thirdweb-dev/wallets/evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CoinbaseWalletConnector": (()=>CoinbaseWalletConnector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/defineProperty-350fc508.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$WagmiConnector$2d$2f14002d$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/WagmiConnector-2f14002d.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$errors$2d$9edc08c8$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/errors-9edc08c8.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__ = __turbopack_context__.i("[project]/node_modules/ethers/lib.esm/utils.js [app-client] (ecmascript) <export * as utils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$providers$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__providers$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/providers/lib.esm/index.js [app-client] (ecmascript) <export * as providers>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$walletIds$2d$dff6dced$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/walletIds-dff6dced.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$url$2d$a45219bd$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/url-a45219bd.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$normalizeChainId$2d$1fb9aedf$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-1fb9aedf.browser.esm.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$eventemitter3$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/eventemitter3/index.mjs [app-client] (ecmascript) <module evaluation>");
;
;
;
;
;
;
;
;
;
class CoinbaseWalletConnector extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$WagmiConnector$2d$2f14002d$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["W"] {
    constructor(_ref){
        let { chains, options } = _ref;
        super({
            chains,
            options: {
                reloadOnDisconnect: false,
                ...options
            }
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "id", __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$walletIds$2d$dff6dced$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["w"].coinbase);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "name", "Coinbase Wallet");
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "ready", true);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "onAccountsChanged", (accounts)=>{
            if (accounts.length === 0) {
                this.emit("disconnect");
            } else {
                this.emit("change", {
                    account: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].getAddress(accounts[0])
                });
            }
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "onChainChanged", (chainId)=>{
            const id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$normalizeChainId$2d$1fb9aedf$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])(chainId);
            const unsupported = this.isChainUnsupported(id);
            this.emit("change", {
                chain: {
                    id,
                    unsupported
                }
            });
        });
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$350fc508$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["_"])(this, "onDisconnect", ()=>{
            this.emit("disconnect");
        });
    }
    async connect() {
        let { chainId } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        try {
            const provider = await this.getProvider();
            this.setupListeners();
            this.emit("message", {
                type: "connecting"
            });
            const accounts = await provider.enable();
            const account = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].getAddress(accounts[0]);
            // Switch to chain if provided
            let id = await this.getChainId();
            let unsupported = this.isChainUnsupported(id);
            if (chainId && id !== chainId) {
                try {
                    const chain = await this.switchChain(chainId);
                    id = chain.chainId;
                    unsupported = this.isChainUnsupported(id);
                } catch (e) {
                    console.error(`Connected but failed to switch to desired chain ${chainId}`, e);
                }
            }
            return {
                account,
                chain: {
                    id,
                    unsupported
                },
                provider: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$providers$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__providers$3e$__["providers"].Web3Provider(provider)
            };
        } catch (error) {
            if (/(user closed modal|accounts received is empty)/i.test(error.message)) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$errors$2d$9edc08c8$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["U"](error);
            }
            throw error;
        }
    }
    async disconnect() {
        if (!this._provider) {
            return;
        }
        const provider = await this.getProvider();
        provider.removeListener("accountsChanged", this.onAccountsChanged);
        provider.removeListener("chainChanged", this.onChainChanged);
        provider.removeListener("disconnect", this.onDisconnect);
        provider.disconnect();
        provider.close();
    }
    async getAccount() {
        const provider = await this.getProvider();
        const accounts = await provider.request({
            method: "eth_accounts"
        });
        if (accounts.length === 0) {
            throw new Error("No accounts found");
        }
        // return checksum address
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].getAddress(accounts[0]);
    }
    async getChainId() {
        const provider = await this.getProvider();
        const chainId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$normalizeChainId$2d$1fb9aedf$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["n"])(provider.chainId);
        return chainId;
    }
    async getProvider() {
        if (!this._provider) {
            let CoinbaseWalletSDK = (await __turbopack_context__.r("[project]/node_modules/@coinbase/wallet-sdk/dist/index.js [app-client] (ecmascript, async loader)")(__turbopack_context__.i)).default;
            // Workaround for Vite dev import errors
            // https://github.com/vitejs/vite/issues/7112
            if (typeof CoinbaseWalletSDK !== "function" && // @ts-expect-error This import error is not visible to TypeScript
            typeof CoinbaseWalletSDK.default === "function") {
                CoinbaseWalletSDK = CoinbaseWalletSDK.default;
            }
            this._client = new CoinbaseWalletSDK(this.options);
            const walletExtensionChainId = this._client.walletExtension?.getChainId();
            const chain = this.chains.find((chain_)=>this.options.chainId ? chain_.chainId === this.options.chainId : chain_.chainId === walletExtensionChainId) || this.chains[0];
            const chainId = this.options.chainId || chain?.chainId;
            const jsonRpcUrl = this.options.jsonRpcUrl || chain?.rpc[0];
            this._provider = this._client.makeWeb3Provider(jsonRpcUrl, chainId);
        }
        return this._provider;
    }
    async getSigner() {
        let { chainId } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        const [provider, account] = await Promise.all([
            this.getProvider(),
            this.getAccount()
        ]);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$providers$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__providers$3e$__["providers"].Web3Provider(provider, chainId).getSigner(account);
    }
    async isAuthorized() {
        try {
            const account = await this.getAccount();
            return !!account;
        } catch  {
            return false;
        }
    }
    async switchChain(chainId) {
        const provider = await this.getProvider();
        const id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].hexValue(chainId);
        try {
            await provider.request({
                method: "wallet_switchEthereumChain",
                params: [
                    {
                        chainId: id
                    }
                ]
            });
            return this.chains.find((x)=>x.chainId === chainId) ?? {
                chainId: chainId,
                name: `Chain ${id}`,
                slug: `${id}`,
                nativeCurrency: {
                    name: "Ether",
                    decimals: 18,
                    symbol: "ETH"
                },
                rpc: [
                    ""
                ],
                testnet: false,
                chain: "ethereum",
                shortName: "eth"
            };
        } catch (error) {
            const chain = this.chains.find((x)=>x.chainId === chainId);
            if (!chain) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$errors$2d$9edc08c8$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["C"]({
                    chainId,
                    connectorId: this.id
                });
            }
            // Indicates chain is not added to provider
            if (error.code === 4902) {
                try {
                    await provider.request({
                        method: "wallet_addEthereumChain",
                        params: [
                            {
                                chainId: id,
                                chainName: chain.name,
                                nativeCurrency: chain.nativeCurrency,
                                rpcUrls: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$url$2d$a45219bd$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["g"])(chain),
                                // no client id on purpose here
                                blockExplorerUrls: this.getBlockExplorerUrls(chain)
                            }
                        ]
                    });
                    return chain;
                } catch (addError) {
                    if (this._isUserRejectedRequestError(addError)) {
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$errors$2d$9edc08c8$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["U"](addError);
                    }
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$errors$2d$9edc08c8$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["A"]();
                }
            }
            if (this._isUserRejectedRequestError(error)) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$errors$2d$9edc08c8$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["U"](error);
            }
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$errors$2d$9edc08c8$2e$browser$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["S"](error);
        }
    }
    _isUserRejectedRequestError(error) {
        return /(user rejected)/i.test(error.message);
    }
    async setupListeners() {
        const provider = await this.getProvider();
        provider.on("accountsChanged", this.onAccountsChanged);
        provider.on("chainChanged", this.onChainChanged);
        provider.on("disconnect", this.onDisconnect);
    }
    async getQrUrl() {
        await this.getProvider();
        if (!this._client) {
            throw new Error("Coinbase Wallet SDK not initialized");
        }
        return this._client.getQrUrl();
    }
}
;
}}),
}]);

//# sourceMappingURL=node_modules_%40thirdweb-dev_wallets_81e9c6d5._.js.map