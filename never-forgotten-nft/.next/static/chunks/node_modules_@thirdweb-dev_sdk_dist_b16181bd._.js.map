{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js"],"sourcesContent":["import { ai as isExtensionEnabled, cJ as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, aZ as EventType, cK as FEATURE_APPURI } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction, c as estimateTransactionCost } from './transactions-72f9603c.browser.esm.js';\nimport { utils } from 'ethers';\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param featureName - The feature name to check\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  const b = isExtensionEnabled(contractWrapper.abi, featureName, contractWrapper.extensions);\n  return b;\n}\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param functionName - The function name to check\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @contract\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns The metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @contract\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\nfunction toEther(amount) {\n  return utils.formatEther(amount);\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns The estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const gasCost = await estimateTransactionCost(this.contractWrapper.getProvider(), await this.contractWrapper.populateTransaction(fn, args));\n    return toEther(gasCost);\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns The estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns The current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns The appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h, toEther as t };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js"],"sourcesContent":["/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n"],"names":[],"mappings":"AAAA;;;CAGC;;;AACD,MAAM;IACJ,YAAY,eAAe,CAAE;QAC3B,IAAI,CAAC,eAAe,GAAG;IACzB;IAEA;;;;;;;;;;;GAWC,GACD,wBAAwB,IAAI,EAAE;QAC5B,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC;IAC/C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/sdk/dist/Vote-3b66775c.browser.esm.js"],"sourcesContent":["let VoteType = /*#__PURE__*/function (VoteType) {\n  VoteType[VoteType[\"Against\"] = 0] = \"Against\";\n  VoteType[VoteType[\"For\"] = 1] = \"For\";\n  VoteType[VoteType[\"Abstain\"] = 2] = \"Abstain\";\n  return VoteType;\n}({});\n\nexport { VoteType as V };\n"],"names":[],"mappings":";;;AAAA,IAAI,WAAW,WAAW,GAAE,SAAU,QAAQ;IAC5C,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,EAAE,GAAG;IACpC,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE,GAAG;IAChC,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,EAAE,GAAG;IACpC,OAAO;AACT,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 644, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/sdk/dist/vote-e5646e80.browser.esm.js"],"sourcesContent":["import { BigNumber, utils, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue, f as fetchCurrencyMetadata } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { cs as ContractWrapper, bj as AbiSchema, cp as VoteContractSchema, aL as resolveAddress } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-5c40af52.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers for this\nclass Vote {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns  The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns  All the proposals in the contract.\n   */\n  async getAll() {\n    const _proposals = (await this.contractWrapper.read(\"getAllProposals\", [])) ?? [];\n    const _items = await Promise.all(_proposals.map(item => Promise.all([this.contractWrapper.read(\"state\", [item.proposalId]), this.getProposalVotes(item.proposalId)])));\n    return _items.map((_ref, index) => {\n      let [state, votes] = _ref;\n      const data = _proposals[index];\n      return {\n        proposalId: data.proposalId,\n        proposer: data.proposer,\n        description: data.description,\n        startBlock: data.startBlock,\n        endBlock: data.endBlock,\n        state: state,\n        votes: votes,\n        executions: data[3].map((c, i) => ({\n          toAddress: data.targets[i],\n          nativeTokenValue: c,\n          transactionData: data.calldatas[i]\n        }))\n      };\n    });\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.read(\"proposalVotes\", [proposalId]);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns  True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.read(\"hasVoted\", [proposalId, await resolveAddress(account)]);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns  True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns  The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.getProvider().getBalance(this.contractWrapper.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns  The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(await resolveAddress(tokenAddress), ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.read(\"state\", [proposalId]);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.read(\"votingDelay\", []), this.contractWrapper.read(\"votingPeriod\", []), this.contractWrapper.read(\"token\", []), this.contractWrapper.read(\"quorumNumerator\", []), this.contractWrapper.read(\"proposalThreshold\", [])]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to set up in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns  The id of the created proposal and the transaction receipt.\n   */\n  propose = /* @__PURE__ */buildTransactionFunction(async (description, executions) => {\n    if (!executions) {\n      executions = [{\n        toAddress: this.contractWrapper.address,\n        nativeTokenValue: 0,\n        transactionData: \"0x\"\n      }];\n    }\n    const tos = executions.map(p => p.toAddress);\n    const values = executions.map(p => p.nativeTokenValue);\n    const datas = executions.map(p => p.transactionData);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"propose\",\n      args: [tos, values, datas, description],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n        return {\n          id: event[0].args.proposalId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  vote = /* @__PURE__ */buildTransactionFunction((() => {\n    var _this = this;\n    return async function (proposalId, voteType) {\n      let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      await _this.ensureExists(proposalId);\n      return Transaction.fromContractWrapper({\n        contractWrapper: _this.contractWrapper,\n        method: \"castVoteWithReason\",\n        args: [proposalId, voteType, reason]\n      });\n    };\n  })());\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  execute = /* @__PURE__ */buildTransactionFunction(async proposalId => {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = utils.id(proposal.description);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"execute\",\n      args: [tos, values, datas, descriptionHash]\n    });\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Vote };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}