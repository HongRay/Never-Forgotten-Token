{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/sdk/dist/contract-appuri-5c40af52.browser.esm.js"],"sourcesContent":["import { ai as isExtensionEnabled, cJ as FEATURE_METADATA, K as fetchContractMetadataFromAddress, x as ExtensionNotImplementedError, aZ as EventType, cK as FEATURE_APPURI } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction, c as estimateTransactionCost } from './transactions-72f9603c.browser.esm.js';\nimport { utils } from 'ethers';\nimport { replaceGatewayUrlWithScheme } from '@thirdweb-dev/storage';\n\n/**\n * Type guard for contractWrappers depending on passed feature name\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param featureName - The feature name to check\n */\nfunction detectContractFeature(contractWrapper, featureName) {\n  const b = isExtensionEnabled(contractWrapper.abi, featureName, contractWrapper.extensions);\n  return b;\n}\n\n/**\n * @internal\n * @param contractWrapper - The contract wrapper to check\n * @param functionName - The function name to check\n */\nfunction hasFunction(functionName, contractWrapper) {\n  return functionName in contractWrapper.readContract.functions;\n}\n\n/**\n * @internal\n */\n\n/**\n * Handles metadata for a Contract\n * @remarks Read and update metadata for this contract\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const metadata = await contract.metadata.get();\n * await contract.metadata.set({\n *   name: \"My Contract\",\n *   description: \"My contract description\"\n * })\n * ```\n * @contract\n * @public\n */\nclass ContractMetadata {\n  featureName = FEATURE_METADATA.name;\n  constructor(contractWrapper, schema, storage) {\n    this.contractWrapper = contractWrapper;\n    this.schema = schema;\n    this.storage = storage;\n  }\n  /**\n   * @internal\n   */\n  parseOutputMetadata(metadata) {\n    return this.schema.output.parseAsync(metadata);\n  }\n\n  /**\n   * @internal\n   */\n  parseInputMetadata(metadata) {\n    return this.schema.input.parseAsync(metadata);\n  }\n  /**\n   * Get the metadata of this contract\n   * @remarks Get the metadata of a contract\n   * @example\n   * ```javascript\n   * const metadata = await contract.metadata.get();\n   * console.log(metadata);\n   * ```\n   * @public\n   * @returns The metadata of the given contract\n   * @twfeature ContractMetadata\n   */\n  async get() {\n    let data;\n    if (this.supportsContractMetadata(this.contractWrapper)) {\n      const uri = await this.contractWrapper.read(\"contractURI\", []);\n      if (uri && uri.includes(\"://\")) {\n        data = await this.storage.downloadJSON(uri);\n      }\n    }\n    if (!data) {\n      try {\n        // try fetching metadata from bytecode and / or contract itself\n        let contractName;\n        try {\n          if (hasFunction(\"name\", this.contractWrapper)) {\n            contractName = await this.contractWrapper.read(\"name\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let contractSymbol;\n        try {\n          if (hasFunction(\"symbol\", this.contractWrapper)) {\n            contractSymbol = await this.contractWrapper.read(\"symbol\", []);\n          }\n        } catch (err) {\n          // no-op\n        }\n        let publishedMetadata;\n        try {\n          publishedMetadata = await fetchContractMetadataFromAddress(this.contractWrapper.address, this.contractWrapper.getProvider(), this.storage, this.contractWrapper.options);\n        } catch (err) {}\n        data = {\n          name: contractName || publishedMetadata?.name,\n          symbol: contractSymbol,\n          description: publishedMetadata?.info.title\n        };\n      } catch (e) {\n        throw new Error(\"Could not fetch contract metadata\");\n      }\n    }\n    return this.parseOutputMetadata(data);\n  }\n\n  /**\n   * Set the metadata of this contract\n   * @remarks OVERWRITE the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.set({\n   *   name: \"My Contract\",\n   *   description: \"My contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to set\n   * @twfeature ContractMetadata\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    const uri = await this._parseAndUploadMetadata(metadata);\n    const wrapper = this.contractWrapper;\n    if (this.supportsContractMetadata(wrapper)) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setContractURI\",\n        args: [uri],\n        parse: receipt => {\n          return {\n            receipt,\n            data: this.get\n          };\n        }\n      });\n    } else {\n      throw new ExtensionNotImplementedError(FEATURE_METADATA);\n    }\n  });\n\n  /**\n   * Update the metadata of a contract\n   * @remarks Update the metadata of a contract\n   * @example\n   * ```javascript\n   * await contract.metadata.update({\n   *   description: \"My new contract description\"\n   * })\n   * ```\n   * @public\n   * @param metadata - the metadata to update\n   * @twfeature ContractMetadata\n   * */\n  update = /* @__PURE__ */buildTransactionFunction(async metadata => {\n    return await this.set.prepare({\n      ...(await this.get()),\n      ...metadata\n    });\n  });\n\n  /**\n   *\n   * @internal\n   * @param metadata - the metadata to set\n   * @returns\n   */\n  async _parseAndUploadMetadata(metadata) {\n    const parsedMetadata = await this.parseInputMetadata(metadata);\n    return this.storage.upload(parsedMetadata);\n  }\n  supportsContractMetadata(contractWrapper) {\n    return detectContractFeature(contractWrapper, \"ContractMetadata\");\n  }\n}\n\n/**\n * Listen to Contract events in real time\n * @contract\n * @public\n */\nclass ContractEvents {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Subscribe to transactions in this contract.\n   * @remarks Will emit an \"event\" object containing the transaction status ('submitted' and 'completed') and hash\n   * @example\n   * ```javascript\n   * contract.events.addTransactionListener((event) => {\n   *   console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function that will be called on every transaction\n   * @public\n   */\n  addTransactionListener(listener) {\n    this.contractWrapper.addListener(EventType.Transaction, listener);\n  }\n\n  /**\n   * Remove a transaction listener\n   * @remarks Remove a listener that was added with addTransactionListener\n   * @example\n   * ```javascript\n   * contract.events.removeTransactionListener((event) => {\n   *  console.log(event);\n   * }\n   * ```\n   * @param listener - the callback function to remove\n   * @public\n   */\n  removeTransactionListener(listener) {\n    this.contractWrapper.off(EventType.Transaction, listener);\n  }\n\n  /**\n   * Subscribe to contract events\n   * @remarks You can add a listener for any contract event to run a function when\n   * the event is emitted. For example, if you wanted to listen for a \"TokensMinted\" event,\n   * you could do the following:\n   * @example\n   * ```javascript\n   * contract.events.addEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function to un-subscribe from the event\n   */\n  addEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const address = this.contractWrapper.address;\n    const filter = {\n      address,\n      topics: [this.contractWrapper.readContract.interface.getEventTopic(event)]\n    };\n    const wrappedListener = log => {\n      const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n      listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Listen to all events emitted from this contract\n   *\n   * @example\n   * ```javascript\n   * contract.events.listenToAllEvents((event) => {\n   *   console.log(event.eventName) // the name of the emitted event\n   *   console.log(event.data) // event payload\n   * }\n   * ```\n   * @public\n   * @param listener - the callback function that will be called on every new event\n   * @returns A function that can be called to stop listening to events\n   */\n  listenToAllEvents(listener) {\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    const wrappedListener = log => {\n      try {\n        const parsedLog = this.contractWrapper.readContract.interface.parseLog(log);\n        listener(this.toContractEvent(parsedLog.eventFragment, parsedLog.args, log));\n      } catch (e) {\n        console.error(\"Could not parse event:\", log, e);\n      }\n    };\n    this.contractWrapper.getProvider().on(filter, wrappedListener);\n    return () => {\n      this.contractWrapper.getProvider().off(filter, wrappedListener);\n    };\n  }\n\n  /**\n   * Remove an event listener from this contract\n   * @remarks Remove a listener that was added with addEventListener\n   * @example\n   * ```javascript\n   * contract.events.removeEventListener(\"TokensMinted\", (event) => {\n   *   console.log(event);\n   * });\n   * ```\n   * @public\n   * @param eventName - the event name as defined in the contract\n   * @param listener - the listener to unregister\n   */\n  removeEventListener(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  eventName, listener) {\n    // validates event, throws error if not found\n    const event = this.contractWrapper.readContract.interface.getEvent(eventName);\n    this.contractWrapper.readContract.off(event.name, listener);\n  }\n\n  /**\n   * Remove all listeners on this contract\n   * @remarks Remove all listeners from a contract\n   * @example\n   * ```javascript\n   * contract.events.removeAllListeners();\n   * ```\n   * @public\n   */\n  removeAllListeners() {\n    this.contractWrapper.readContract.removeAllListeners();\n    const address = this.contractWrapper.address;\n    const filter = {\n      address\n    };\n    this.contractWrapper.getProvider().removeAllListeners(filter);\n  }\n\n  /**\n   * Get All Events\n   * @remarks Get a list of all the events emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // Optionally pass in filters to limit the blocks from which events are retrieved\n   * const filters = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000,\n   * }\n   * const events = await contract.events.getAllEvents(filters);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param filters - Specify the from and to block numbers to get events for, defaults to all blocks\n   * @returns The event objects of the events emitted with event names and data for each event\n   */\n  async getAllEvents() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const events = await this.contractWrapper.readContract.queryFilter({}, filters.fromBlock, filters.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return filters.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n\n  /**\n   * Get Events\n   * @remarks Get a list of the events of a specific type emitted from this contract during the specified time period\n   * @example\n   * ```javascript\n   * // The name of the event to get logs for\n   * const eventName = \"Transfer\";\n   *\n   * // Optionally pass in options to limit the blocks from which events are retrieved\n   * const options = {\n   *   fromBlock: 0,\n   *   toBlock: 1000000, // can also pass \"latest\"\n   *   order: \"desc\",\n   *   // Configure event filters (filter on indexed event parameters)\n   *   filters: {\n   *     from: \"0x...\",\n   *     to: \"0x...\"\n   *   }\n   * };\n   *\n   * const events = await contract.events.getEvents(eventName, options);\n   * console.log(events[0].eventName);\n   * console.log(events[0].data);\n   * ```\n   *\n   * @param eventName - The name of the event to get logs for\n   * @param options - Specify the from and to block numbers to get events for, defaults to all blocks. @see EventQueryOptions\n   * @returns The requested event objects with event data\n   */\n  async getEvents(eventName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      fromBlock: 0,\n      toBlock: \"latest\",\n      order: \"desc\"\n    };\n    const eventInterface = this.contractWrapper.readContract.interface.getEvent(eventName);\n    const args = options.filters ? eventInterface.inputs.map(e => options.filters[e.name]) : [];\n    const filter = this.contractWrapper.readContract.filters[eventInterface.name](...args);\n    const events = await this.contractWrapper.readContract.queryFilter(filter, options.fromBlock, options.toBlock);\n    const orderedEvents = events.sort((a, b) => {\n      return options.order === \"desc\" ? b.blockNumber - a.blockNumber : a.blockNumber - b.blockNumber;\n    });\n    return this.parseEvents(orderedEvents);\n  }\n  parseEvents(events) {\n    return events.map(e => {\n      const transaction = Object.fromEntries(Object.entries(e).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n      if (e.args) {\n        const entries = Object.entries(e.args);\n        const args = entries.slice(entries.length / 2, entries.length);\n        const data = {};\n        for (const [key, value] of args) {\n          data[key] = value;\n        }\n        return {\n          eventName: e.event || \"\",\n          data: data,\n          transaction\n        };\n      }\n      return {\n        eventName: e.event || \"\",\n        data: {},\n        transaction\n      };\n    });\n  }\n  toContractEvent(event, args, rawLog) {\n    const transaction = Object.fromEntries(Object.entries(rawLog).filter(a => typeof a[1] !== \"function\" && a[0] !== \"args\"));\n    const results = {};\n    event.inputs.forEach((param, index) => {\n      if (Array.isArray(args[index])) {\n        const components = param.components;\n        if (components) {\n          const arr = args[index];\n          if (param.type === \"tuple[]\") {\n            // tuple[]\n            const objArray = [];\n            for (let i = 0; i < arr.length; i++) {\n              const tuple = arr[i];\n              const obj = {};\n              for (let j = 0; j < components.length; j++) {\n                const name = components[j].name;\n                obj[name] = tuple[j];\n              }\n              objArray.push(obj);\n            }\n            results[param.name] = objArray;\n          } else {\n            // simple tuple\n            const obj = {};\n            for (let i = 0; i < components.length; i++) {\n              const name = components[i].name;\n              obj[name] = arr[i];\n            }\n            results[param.name] = obj;\n          }\n        }\n      } else {\n        results[param.name] = args[index];\n      }\n    });\n    return {\n      eventName: event.name,\n      data: results,\n      transaction\n    };\n  }\n}\n\nfunction toEther(amount) {\n  return utils.formatEther(amount);\n}\n\n/**\n * Estimates the gas cost of Contract calls\n * @public\n */\nclass GasCostEstimator {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * Estimates the cost of gas in native token of the current chain\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimate the cost of gas in native token of the current chain\n   * @example\n   * ```javascript\n   * const costOfClaim = await nftDrop?.estimator.gasCostOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns The estimated price in native currency (ETH, MATIC, etc) of calling this function\n   * @public\n   */\n  async gasCostOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    const gasCost = await estimateTransactionCost(this.contractWrapper.getProvider(), await this.contractWrapper.populateTransaction(fn, args));\n    return toEther(gasCost);\n  }\n\n  /**\n   * Estimates the gas limit of a transaction\n   * Pass in the same parameters as the contract's function.\n   * @remarks Estimates the gas limit of a transaction\n   * @example\n   * ```javascript\n   * const gasLimitOfClaim = await nftDrop?.estimator.gasLimitOf(\"claim\", [\n   *   \"0x...\", // receiver\n   *   1, // quantity\n   *   \"0x...\", // currency\n   *   1, // price per token\n   *   [], // proofs\n   *   1, // proof max quantity per transaction\n   * ]);\n   * ```\n   * @returns The estimated gas limit of the transaction\n   * @public\n   */\n  async gasLimitOf(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  fn, args) {\n    return this.contractWrapper.estimateGas(fn, args);\n  }\n\n  /**\n   * Returns the current gas price in gwei\n   * @remarks Get the current gas price in gwei\n   * @example\n   * ```javascript\n   * const gasCostInGwei = await contract.estimator.currentGasPriceInGwei();\n   * ```\n   * @returns The current gas price in gwei\n   * @public\n   */\n  async currentGasPriceInGwei() {\n    const price = await this.contractWrapper.getProvider().getGasPrice();\n    return utils.formatUnits(price, \"gwei\");\n  }\n}\n\n/**\n * Have an official Application URI for this contract.\n * @remarks Configure an official Application URI for this contract.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const appURI = await contract.app.get();\n * appURI = \"ipfs://some_ipfs_hash\";\n *\n * await contract.app.set(appURI)\n * ```\n * @public\n */\nclass ContractAppURI {\n  featureName = FEATURE_APPURI.name;\n  constructor(contractWrapper, metadata, storage) {\n    this.contractWrapper = contractWrapper;\n    this.metadata = metadata;\n    this.storage = storage;\n  }\n\n  /**\n   * Get App URI\n   * @returns The appURI (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = await contract.app.get();\n   * console.log(appURI) // \"ipfs://some_ipfs_hash\";\n   * ```\n   * @twfeature AppURI\n   */\n  async get() {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return await this.contractWrapper.read(\"appURI\", []);\n    }\n    return replaceGatewayUrlWithScheme((await this.metadata.get()).app_uri || \"\", this.storage.getGatewayUrls());\n  }\n\n  /**\n   * Set App URI\n   * @param appURI - the uri to set (typically an IPFS hash)\n   * @example\n   * ```javascript\n   * const appURI = \"ipfs://some_ipfs_hash\";\n   * await contract.app.set(appURI);\n   * ```\n   * @twfeature AppURI\n   */\n  set = /* @__PURE__ */buildTransactionFunction(async appURI => {\n    if (detectContractFeature(this.contractWrapper, \"AppURI\")) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"setAppURI\",\n        args: [appURI]\n      });\n    }\n    return await this.metadata.update.prepare({\n      app_uri: appURI\n    });\n  });\n}\n\nexport { ContractMetadata as C, GasCostEstimator as G, ContractEvents as a, ContractAppURI as b, detectContractFeature as d, hasFunction as h, toEther as t };\n"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;;;;;AAEA;;;;;CAKC,GACD,SAAS,sBAAsB,eAAe,EAAE,WAAW;IACzD,MAAM,IAAI,CAAA,GAAA,0LAAA,CAAA,KAAkB,AAAD,EAAE,gBAAgB,GAAG,EAAE,aAAa,gBAAgB,UAAU;IACzF,OAAO;AACT;AAEA;;;;CAIC,GACD,SAAS,YAAY,YAAY,EAAE,eAAe;IAChD,OAAO,gBAAgB,gBAAgB,YAAY,CAAC,SAAS;AAC/D;AAEA;;CAEC,GAED;;;;;;;;;;;;;;CAcC,GACD,MAAM;IACJ,cAAc,0LAAA,CAAA,KAAgB,CAAC,IAAI,CAAC;IACpC,YAAY,eAAe,EAAE,MAAM,EAAE,OAAO,CAAE;QAC5C,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,OAAO,GAAG;IACjB;IACA;;GAEC,GACD,oBAAoB,QAAQ,EAAE;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;IACvC;IAEA;;GAEC,GACD,mBAAmB,QAAQ,EAAE;QAC3B,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC;IACtC;IACA;;;;;;;;;;;GAWC,GACD,MAAM,MAAM;QACV,IAAI;QACJ,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,eAAe,GAAG;YACvD,MAAM,MAAM,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,EAAE;YAC7D,IAAI,OAAO,IAAI,QAAQ,CAAC,QAAQ;gBAC9B,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;YACzC;QACF;QACA,IAAI,CAAC,MAAM;YACT,IAAI;gBACF,+DAA+D;gBAC/D,IAAI;gBACJ,IAAI;oBACF,IAAI,YAAY,QAAQ,IAAI,CAAC,eAAe,GAAG;wBAC7C,eAAe,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE;oBAC3D;gBACF,EAAE,OAAO,KAAK;gBACZ,QAAQ;gBACV;gBACA,IAAI;gBACJ,IAAI;oBACF,IAAI,YAAY,UAAU,IAAI,CAAC,eAAe,GAAG;wBAC/C,iBAAiB,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE;oBAC/D;gBACF,EAAE,OAAO,KAAK;gBACZ,QAAQ;gBACV;gBACA,IAAI;gBACJ,IAAI;oBACF,oBAAoB,MAAM,CAAA,GAAA,0LAAA,CAAA,IAAgC,AAAD,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO;gBACzK,EAAE,OAAO,KAAK,CAAC;gBACf,OAAO;oBACL,MAAM,gBAAgB,mBAAmB;oBACzC,QAAQ;oBACR,aAAa,mBAAmB,KAAK;gBACvC;YACF,EAAE,OAAO,GAAG;gBACV,MAAM,IAAI,MAAM;YAClB;QACF;QACA,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC;IAEA;;;;;;;;;;;;;GAaC,GACD,MAAM,aAAa,GAAE,CAAA,GAAA,iMAAA,CAAA,IAAwB,AAAD,EAAE,OAAM;QAClD,MAAM,MAAM,MAAM,IAAI,CAAC,uBAAuB,CAAC;QAC/C,MAAM,UAAU,IAAI,CAAC,eAAe;QACpC,IAAI,IAAI,CAAC,wBAAwB,CAAC,UAAU;YAC1C,OAAO,iMAAA,CAAA,IAAW,CAAC,mBAAmB,CAAC;gBACrC,iBAAiB,IAAI,CAAC,eAAe;gBACrC,QAAQ;gBACR,MAAM;oBAAC;iBAAI;gBACX,OAAO,CAAA;oBACL,OAAO;wBACL;wBACA,MAAM,IAAI,CAAC,GAAG;oBAChB;gBACF;YACF;QACF,OAAO;YACL,MAAM,IAAI,0LAAA,CAAA,IAA4B,CAAC,0LAAA,CAAA,KAAgB;QACzD;IACF,GAAG;IAEH;;;;;;;;;;;;KAYG,GACH,SAAS,aAAa,GAAE,CAAA,GAAA,iMAAA,CAAA,IAAwB,AAAD,EAAE,OAAM;QACrD,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YAC5B,GAAI,MAAM,IAAI,CAAC,GAAG,EAAE;YACpB,GAAG,QAAQ;QACb;IACF,GAAG;IAEH;;;;;GAKC,GACD,MAAM,wBAAwB,QAAQ,EAAE;QACtC,MAAM,iBAAiB,MAAM,IAAI,CAAC,kBAAkB,CAAC;QACrD,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B;IACA,yBAAyB,eAAe,EAAE;QACxC,OAAO,sBAAsB,iBAAiB;IAChD;AACF;AAEA;;;;CAIC,GACD,MAAM;IACJ,YAAY,eAAe,CAAE;QAC3B,IAAI,CAAC,eAAe,GAAG;IACzB;IAEA;;;;;;;;;;;GAWC,GACD,uBAAuB,QAAQ,EAAE;QAC/B,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,0LAAA,CAAA,KAAS,CAAC,WAAW,EAAE;IAC1D;IAEA;;;;;;;;;;;GAWC,GACD,0BAA0B,QAAQ,EAAE;QAClC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,0LAAA,CAAA,KAAS,CAAC,WAAW,EAAE;IAClD;IAEA;;;;;;;;;;;;;;;GAeC,GACD,iBACA,wDAAwD;IACxD,SAAS,EAAE,QAAQ,EAAE;QACnB,6CAA6C;QAC7C,MAAM,QAAQ,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;QACnE,MAAM,UAAU,IAAI,CAAC,eAAe,CAAC,OAAO;QAC5C,MAAM,SAAS;YACb;YACA,QAAQ;gBAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC;aAAO;QAC5E;QACA,MAAM,kBAAkB,CAAA;YACtB,MAAM,YAAY,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;YACvE,SAAS,IAAI,CAAC,eAAe,CAAC,UAAU,aAAa,EAAE,UAAU,IAAI,EAAE;QACzE;QACA,IAAI,CAAC,eAAe,CAAC,WAAW,GAAG,EAAE,CAAC,QAAQ;QAC9C,OAAO;YACL,IAAI,CAAC,eAAe,CAAC,WAAW,GAAG,GAAG,CAAC,QAAQ;QACjD;IACF;IAEA;;;;;;;;;;;;;GAaC,GACD,kBAAkB,QAAQ,EAAE;QAC1B,MAAM,UAAU,IAAI,CAAC,eAAe,CAAC,OAAO;QAC5C,MAAM,SAAS;YACb;QACF;QACA,MAAM,kBAAkB,CAAA;YACtB,IAAI;gBACF,MAAM,YAAY,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;gBACvE,SAAS,IAAI,CAAC,eAAe,CAAC,UAAU,aAAa,EAAE,UAAU,IAAI,EAAE;YACzE,EAAE,OAAO,GAAG;gBACV,QAAQ,KAAK,CAAC,0BAA0B,KAAK;YAC/C;QACF;QACA,IAAI,CAAC,eAAe,CAAC,WAAW,GAAG,EAAE,CAAC,QAAQ;QAC9C,OAAO;YACL,IAAI,CAAC,eAAe,CAAC,WAAW,GAAG,GAAG,CAAC,QAAQ;QACjD;IACF;IAEA;;;;;;;;;;;;GAYC,GACD,oBACA,wDAAwD;IACxD,SAAS,EAAE,QAAQ,EAAE;QACnB,6CAA6C;QAC7C,MAAM,QAAQ,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;QACnE,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,IAAI,EAAE;IACpD;IAEA;;;;;;;;GAQC,GACD,qBAAqB;QACnB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,kBAAkB;QACpD,MAAM,UAAU,IAAI,CAAC,eAAe,CAAC,OAAO;QAC5C,MAAM,SAAS;YACb;QACF;QACA,IAAI,CAAC,eAAe,CAAC,WAAW,GAAG,kBAAkB,CAAC;IACxD;IAEA;;;;;;;;;;;;;;;;;GAiBC,GACD,MAAM,eAAe;QACnB,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG;YAChF,WAAW;YACX,SAAS;YACT,OAAO;QACT;QACA,MAAM,SAAS,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,GAAG,QAAQ,SAAS,EAAE,QAAQ,OAAO;QACzG,MAAM,gBAAgB,OAAO,IAAI,CAAC,CAAC,GAAG;YACpC,OAAO,QAAQ,KAAK,KAAK,SAAS,EAAE,WAAW,GAAG,EAAE,WAAW,GAAG,EAAE,WAAW,GAAG,EAAE,WAAW;QACjG;QACA,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BC,GACD,MAAM,UAAU,SAAS,EAAE;QACzB,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG;YAChF,WAAW;YACX,SAAS;YACT,OAAO;QACT;QACA,MAAM,iBAAiB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC5E,MAAM,OAAO,QAAQ,OAAO,GAAG,eAAe,MAAM,CAAC,GAAG,CAAC,CAAA,IAAK,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE;QAC3F,MAAM,SAAS,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,IAAI,CAAC,IAAI;QACjF,MAAM,SAAS,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,QAAQ,SAAS,EAAE,QAAQ,OAAO;QAC7G,MAAM,gBAAgB,OAAO,IAAI,CAAC,CAAC,GAAG;YACpC,OAAO,QAAQ,KAAK,KAAK,SAAS,EAAE,WAAW,GAAG,EAAE,WAAW,GAAG,EAAE,WAAW,GAAG,EAAE,WAAW;QACjG;QACA,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B;IACA,YAAY,MAAM,EAAE;QAClB,OAAO,OAAO,GAAG,CAAC,CAAA;YAChB,MAAM,cAAc,OAAO,WAAW,CAAC,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,CAAA,IAAK,OAAO,CAAC,CAAC,EAAE,KAAK,cAAc,CAAC,CAAC,EAAE,KAAK;YAC5G,IAAI,EAAE,IAAI,EAAE;gBACV,MAAM,UAAU,OAAO,OAAO,CAAC,EAAE,IAAI;gBACrC,MAAM,OAAO,QAAQ,KAAK,CAAC,QAAQ,MAAM,GAAG,GAAG,QAAQ,MAAM;gBAC7D,MAAM,OAAO,CAAC;gBACd,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,KAAM;oBAC/B,IAAI,CAAC,IAAI,GAAG;gBACd;gBACA,OAAO;oBACL,WAAW,EAAE,KAAK,IAAI;oBACtB,MAAM;oBACN;gBACF;YACF;YACA,OAAO;gBACL,WAAW,EAAE,KAAK,IAAI;gBACtB,MAAM,CAAC;gBACP;YACF;QACF;IACF;IACA,gBAAgB,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE;QACnC,MAAM,cAAc,OAAO,WAAW,CAAC,OAAO,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAA,IAAK,OAAO,CAAC,CAAC,EAAE,KAAK,cAAc,CAAC,CAAC,EAAE,KAAK;QACjH,MAAM,UAAU,CAAC;QACjB,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO;YAC3B,IAAI,MAAM,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG;gBAC9B,MAAM,aAAa,MAAM,UAAU;gBACnC,IAAI,YAAY;oBACd,MAAM,MAAM,IAAI,CAAC,MAAM;oBACvB,IAAI,MAAM,IAAI,KAAK,WAAW;wBAC5B,UAAU;wBACV,MAAM,WAAW,EAAE;wBACnB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;4BACnC,MAAM,QAAQ,GAAG,CAAC,EAAE;4BACpB,MAAM,MAAM,CAAC;4BACb,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAK;gCAC1C,MAAM,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI;gCAC/B,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE;4BACtB;4BACA,SAAS,IAAI,CAAC;wBAChB;wBACA,OAAO,CAAC,MAAM,IAAI,CAAC,GAAG;oBACxB,OAAO;wBACL,eAAe;wBACf,MAAM,MAAM,CAAC;wBACb,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAK;4BAC1C,MAAM,OAAO,UAAU,CAAC,EAAE,CAAC,IAAI;4BAC/B,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,EAAE;wBACpB;wBACA,OAAO,CAAC,MAAM,IAAI,CAAC,GAAG;oBACxB;gBACF;YACF,OAAO;gBACL,OAAO,CAAC,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM;YACnC;QACF;QACA,OAAO;YACL,WAAW,MAAM,IAAI;YACrB,MAAM;YACN;QACF;IACF;AACF;AAEA,SAAS,QAAQ,MAAM;IACrB,OAAO,iLAAA,CAAA,QAAK,CAAC,WAAW,CAAC;AAC3B;AAEA;;;CAGC,GACD,MAAM;IACJ,YAAY,eAAe,CAAE;QAC3B,IAAI,CAAC,eAAe,GAAG;IACzB;IAEA;;;;;;;;;;;;;;;;;GAiBC,GACD,MAAM,UACN,wDAAwD;IACxD,EAAE,EAAE,IAAI,EAAE;QACR,MAAM,UAAU,MAAM,CAAA,GAAA,iMAAA,CAAA,IAAuB,AAAD,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW,IAAI,MAAM,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI;QACrI,OAAO,QAAQ;IACjB;IAEA;;;;;;;;;;;;;;;;;GAiBC,GACD,MAAM,WACN,wDAAwD;IACxD,EAAE,EAAE,IAAI,EAAE;QACR,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI;IAC9C;IAEA;;;;;;;;;GASC,GACD,MAAM,wBAAwB;QAC5B,MAAM,QAAQ,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,GAAG,WAAW;QAClE,OAAO,iLAAA,CAAA,QAAK,CAAC,WAAW,CAAC,OAAO;IAClC;AACF;AAEA;;;;;;;;;;;;CAYC,GACD,MAAM;IACJ,cAAc,0LAAA,CAAA,KAAc,CAAC,IAAI,CAAC;IAClC,YAAY,eAAe,EAAE,QAAQ,EAAE,OAAO,CAAE;QAC9C,IAAI,CAAC,eAAe,GAAG;QACvB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,OAAO,GAAG;IACjB;IAEA;;;;;;;;;GASC,GACD,MAAM,MAAM;QACV,IAAI,sBAAsB,IAAI,CAAC,eAAe,EAAE,WAAW;YACzD,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE;QACrD;QACA,OAAO,CAAA,GAAA,4LAAA,CAAA,8BAA2B,AAAD,EAAE,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc;IAC3G;IAEA;;;;;;;;;GASC,GACD,MAAM,aAAa,GAAE,CAAA,GAAA,iMAAA,CAAA,IAAwB,AAAD,EAAE,OAAM;QAClD,IAAI,sBAAsB,IAAI,CAAC,eAAe,EAAE,WAAW;YACzD,OAAO,iMAAA,CAAA,IAAW,CAAC,mBAAmB,CAAC;gBACrC,iBAAiB,IAAI,CAAC,eAAe;gBACrC,QAAQ;gBACR,MAAM;oBAAC;iBAAO;YAChB;QACF;QACA,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC;YACxC,SAAS;QACX;IACF,GAAG;AACL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/sdk/dist/contract-interceptor-d7b164a7.browser.esm.js"],"sourcesContent":["/**\n * Allows overriding transaction behavior for this contract\n * @internal\n */\nclass ContractInterceptor {\n  constructor(contractWrapper) {\n    this.contractWrapper = contractWrapper;\n  }\n\n  /**\n   * The next transaction executed will add/replace any overrides passed via the passed in hook.\n   * @remarks Overridden values will be applied to the next transaction executed.\n   * @example\n   * ```javascript\n   * contract.interceptor.overrideNextTransaction(() => ({\n   *   gasLimit: 3000000,\n   * }));\n   * ```\n   * @param hook - the hook to add or replace any CallOverrides (gas limit, gas price, nonce, from, value, etc...)\n   * @public\n   */\n  overrideNextTransaction(hook) {\n    this.contractWrapper.withTransactionOverride(hook);\n  }\n}\n\nexport { ContractInterceptor as C };\n"],"names":[],"mappings":"AAAA;;;CAGC;;;AACD,MAAM;IACJ,YAAY,eAAe,CAAE;QAC3B,IAAI,CAAC,eAAe,GAAG;IACzB;IAEA;;;;;;;;;;;GAWC,GACD,wBAAwB,IAAI,EAAE;QAC5B,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAAC;IAC/C;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/sdk/dist/contract-roles-71988d2e.browser.esm.js"],"sourcesContent":["import invariant from 'tiny-invariant';\nimport { d4 as FEATURE_PERMISSIONS, H as getRoleHash, aL as resolveAddress, o as MissingRoleError } from './index-33cd3415.browser.esm.js';\nimport { h as hasFunction } from './contract-appuri-5c40af52.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractEncoder } from './fetchCurrencyValue-32d08b05.browser.esm.js';\n\n/**\n * Handle contract permissions\n * @remarks Configure roles and permissions for a contract, to restrict certain actions.\n * @example\n * ```javascript\n * const contract = await sdk.getContract(\"{{contract_address}}\");\n * const rolesAndMembers = await contract.roles.getAll();\n * await contract.roles.grantRole(\"admin\", \"0x...\");\n * ```\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- TO BE REMOVED IN V4\nclass ContractRoles {\n  featureName = FEATURE_PERMISSIONS.name;\n\n  /**\n   * @internal\n   * @remarks This is used for typing inside react hooks which is why it has to be public.\n   */\n\n  constructor(contractWrapper, roles) {\n    this.contractWrapper = contractWrapper;\n    this.roles = roles;\n  }\n\n  /** **************************\n   * READ FUNCTIONS\n   ****************************/\n\n  /**\n   * Get all members of all roles\n   * @remarks See {@link ContractRoles.get} to get a list of addresses that are members of a specific role.\n   * @example\n   * ```javascript\n   * const rolesAndMembers = await contract.roles.getAll();\n   * ```\n   * @returns A record of {@link Role}s to lists of addresses that are members of the given role.\n   * @throws If the contract does not support roles this will throw an error.\n   *\n   * @public\n   * @twfeature PermissionsEnumerable\n   */\n  async getAll() {\n    invariant(this.roles.length, \"this contract has no support for roles\");\n    const roles = {};\n    const entries = Object.entries(this.roles);\n    (await Promise.all(entries.map(_ref => {\n      let [, role] = _ref;\n      return this.get(role);\n    }))).forEach((item, index) => roles[entries[index][1]] = item);\n    return roles;\n  }\n\n  /**\n   * Get all members of a specific role\n   * @remarks See {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n   * @param role - The Role to get a memberlist for.\n   * @returns The list of addresses that are members of the specific role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   *\n   * @example Say you want to get the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * ```\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  async get(role) {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const wrapper = this.contractWrapper;\n    if (hasFunction(\"getRoleMemberCount\", wrapper) && hasFunction(\"getRoleMember\", wrapper)) {\n      const roleHash = getRoleHash(role);\n      const count = (await wrapper.read(\"getRoleMemberCount\", [roleHash])).toNumber();\n      return await Promise.all(Array.from(Array(count).keys()).map(i => wrapper.read(\"getRoleMember\", [roleHash, i])));\n    }\n    throw new Error(\"Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.\");\n  }\n\n  /**\n   * Overwrite the list of members for specific roles\n   *\n   * @remarks Every role in the list will be overwritten with the new list of addresses provided with them.\n   * If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n   * @param rolesWithAddresses - A record of {@link Role}s to lists of addresses that should be members of the given role.\n   * @throws If you are requesting a role that does not exist on the contract this will throw an error.\n   * @example Say you want to overwrite the list of addresses that are members of the minter role.\n   * ```javascript\n   * const minterAddresses = await contract.roles.get(\"minter\");\n   * await contract.roles.setAll({\n   *  minter: []\n   * });\n   * console.log(await contract.roles.get(\"minter\")); // No matter what members had the role before, the new list will be set to []\n   * ```\n   * @public\n   * @twfeature Permissions\n   *\n   * */\n  setAll = /* @__PURE__ */buildTransactionFunction(async (rolesWithAddresses, actingAddress) => {\n    // if we are removing multiple roles, we need to allways remove the connected wallet address *last*\n    // this is so we don't renounce (i.e.)  admin role first and then try to revoke someone else's (i.e.) admin role after (which will revert the entire txn because we are no longer an admin)\n    // if it is explicitly passed in (i.e. for estimation) we use that value, otherwise we get it from the connected signer\n    const connectedWalletAddress = actingAddress || (await this.contractWrapper.getSignerAddress());\n    const contractEncoder = new ContractEncoder(this.contractWrapper);\n    const roles = Object.keys(rolesWithAddresses);\n    invariant(roles.length, \"you must provide at least one role to set\");\n    invariant(roles.every(role => this.roles.includes(role)), \"this contract does not support the given role\");\n    const currentRoles = await this.getAll();\n    const encoded = [];\n    // add / remove admin role at the end so we don't revoke admin then grant\n    const sortedRoles = roles.sort(role => role === \"admin\" ? 1 : -1);\n    for (let i = 0; i < sortedRoles.length; i++) {\n      const role = sortedRoles[i];\n      const [addresses, currentAddresses] = await Promise.all([Promise.all(rolesWithAddresses[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || []), Promise.all(currentRoles[role]?.map(addressOrEns => resolveAddress(addressOrEns)) || [])]);\n      const toAdd = addresses.filter(address => !currentAddresses.includes(address));\n      const toRemove = currentAddresses.filter(address => !addresses.includes(address));\n\n      // if we're removing more than one address we have to make sure we always remove the *connected* (acting) wallet address first\n      // otherwise we'll revoke the connected wallet address and then try to revoke someone else's address which will revert the entire txn\n      if (toRemove.length > 1) {\n        const index = toRemove.indexOf(connectedWalletAddress);\n        if (index > -1) {\n          toRemove.splice(index, 1);\n          toRemove.push(connectedWalletAddress);\n        }\n      }\n      if (toAdd.length) {\n        toAdd.forEach(address => {\n          encoded.push(contractEncoder.encode(\"grantRole\", [getRoleHash(role), address]));\n        });\n      }\n      if (toRemove.length) {\n        const revokeFunctionNames = await Promise.all(toRemove.map(address => this.getRevokeRoleFunctionName(address)));\n        revokeFunctionNames.forEach((revokeFunctionName, index) => encoded.push(contractEncoder.encode(revokeFunctionName, [getRoleHash(role), toRemove[index]])));\n      }\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [encoded]\n    });\n  });\n\n  /**\n   * Throws an error if an address is missing the roles specified.\n   *\n   * @param roles - The roles to check\n   * @param address - The address to check\n   *\n   * @internal\n   */\n  async verify(roles, address) {\n    await Promise.all(roles.map(async role => {\n      const [members, resolvedAddress] = await Promise.all([this.get(role), resolveAddress(address)]);\n      if (!members.map(a => a.toLowerCase()).includes(resolvedAddress.toLowerCase())) {\n        throw new MissingRoleError(resolvedAddress, role);\n      }\n    }));\n  }\n\n  /** **************************\n   * WRITE FUNCTIONS\n   ****************************/\n\n  /**\n   * Grant a role to a specific address\n   *\n   * @remarks Make sure you are sure you want to grant the role to the address.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.grant(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to grant to the address\n   * @param address - The address to grant the role to\n   * @returns The transaction receipt\n   * @throws If you are trying to grant does not exist on the contract this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  grant = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"grantRole\",\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /**\n   * Revoke a role from a specific address\n   *\n   * @remarks\n   *\n   * -- Caution --\n   *\n   * This will let you remove yourself from the role, too.\n   * If you remove yourself from the admin role, you will no longer be able to administer the contract.\n   * There is no way to recover from this.\n   *\n   * @example\n   * ```javascript\n   * await contract.roles.revoke(\"minter\", \"{{wallet_address}}\");\n   * ```\n   *\n   * @param role - The {@link Role} to revoke\n   * @param address - The address to revoke the role from\n   * @returns The transaction receipt\n   * @throws If you are trying to revoke does not exist on the module this will throw an error.\n   *\n   * @public\n   * @twfeature Permissions\n   */\n  revoke = /* @__PURE__ */buildTransactionFunction(async (role, address) => {\n    invariant(this.roles.includes(role), `this contract does not support the \"${role}\" role`);\n    const resolvedAddress = await resolveAddress(address);\n    const revokeFunctionName = await this.getRevokeRoleFunctionName(resolvedAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: revokeFunctionName,\n      args: [getRoleHash(role), resolvedAddress]\n    });\n  });\n\n  /** **************************\n   * PRIVATE FUNCTIONS\n   ****************************/\n\n  async getRevokeRoleFunctionName(address) {\n    const [resolvedAddress, signerAddress] = await Promise.all([resolveAddress(address), this.contractWrapper.getSignerAddress()]);\n    if (signerAddress.toLowerCase() === resolvedAddress.toLowerCase()) {\n      return \"renounceRole\";\n    }\n    return \"revokeRole\";\n  }\n}\n\nexport { ContractRoles as C };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 891, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/sdk/dist/split-eb66a32f.browser.esm.js"],"sourcesContent":["import { BigNumber, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue } from './fetchCurrencyValue-32d08b05.browser.esm.js';\nimport { dM as ADMIN_ROLE, cs as ContractWrapper, bj as AbiSchema, c7 as SplitsContractSchema, aL as resolveAddress } from './index-33cd3415.browser.esm.js';\nimport { f as buildTransactionFunction, T as Transaction } from './transactions-72f9603c.browser.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-5c40af52.browser.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-d7b164a7.browser.esm.js';\nimport { C as ContractRoles } from './contract-roles-71988d2e.browser.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers for this\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const [resolvedToken, recipients] = await Promise.all([resolveAddress(tokenAddress), this.getAllRecipients()]);\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([resolveAddress(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const [resolvedToken, resolvedWallet] = await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)]);\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [resolvedToken]), this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)])\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const [resolvedAddress, totalShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", [])]);\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [resolvedAddress]));\n    const totalRoyaltyAvailable = addressReceived.div(totalShares);\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Split };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}