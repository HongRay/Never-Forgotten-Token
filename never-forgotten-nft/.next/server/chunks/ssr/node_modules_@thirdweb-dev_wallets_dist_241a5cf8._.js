module.exports = {

"[project]/node_modules/@thirdweb-dev/wallets/dist/http-rpc-client-25e8ff7a.esm.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "D": (()=>DEBUG),
    "H": (()=>HttpRpcClient),
    "g": (()=>getUserOpHashV06),
    "h": (()=>hexlifyUserOp),
    "r": (()=>randomNonce)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__ = __turbopack_context__.i("[project]/node_modules/ethers/lib.esm/utils.js [app-ssr] (ecmascript) <export * as utils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$providers$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__providers$3e$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/providers/lib.esm/index.js [app-ssr] (ecmascript) <export * as providers>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$url$2d$0d129c6b$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/url-0d129c6b.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$headers$2d$31b6ef3b$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/headers-31b6ef3b.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$utils$2d$80af2010$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/utils-80af2010.esm.js [app-ssr] (ecmascript)");
;
;
;
;
async function hexlifyUserOp(// TODO: types
op) {
    const userOp = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].resolveProperties(op);
    return Object.keys(userOp).map((key)=>{
        let val = userOp[key];
        if (typeof val !== "string" || !val.startsWith("0x")) {
            val = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].hexValue(val);
        }
        return [
            key,
            val
        ];
    }).reduce((set, _ref)=>{
        let [k, v] = _ref;
        return {
            ...set,
            [k]: v
        };
    }, {});
}
// v0.6 userOpHash calculation
async function getUserOpHashV06(userOp, entryPoint, chainId) {
    const op = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].resolveProperties(userOp);
    const hashedUserOp = {
        sender: op.sender,
        nonce: op.nonce,
        initCodeHash: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].keccak256(op.initCode),
        callDataHash: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].keccak256(op.callData),
        callGasLimit: op.callGasLimit,
        verificationGasLimit: op.verificationGasLimit,
        preVerificationGas: op.preVerificationGas,
        maxFeePerGas: op.maxFeePerGas,
        maxPriorityFeePerGas: op.maxPriorityFeePerGas,
        paymasterAndDataHash: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].keccak256(op.paymasterAndData)
    };
    const userOpType = {
        components: [
            {
                type: "address",
                name: "sender"
            },
            {
                type: "uint256",
                name: "nonce"
            },
            {
                type: "bytes32",
                name: "initCodeHash"
            },
            {
                type: "bytes32",
                name: "callDataHash"
            },
            {
                type: "uint256",
                name: "callGasLimit"
            },
            {
                type: "uint256",
                name: "verificationGasLimit"
            },
            {
                type: "uint256",
                name: "preVerificationGas"
            },
            {
                type: "uint256",
                name: "maxFeePerGas"
            },
            {
                type: "uint256",
                name: "maxPriorityFeePerGas"
            },
            {
                type: "bytes32",
                name: "paymasterAndDataHash"
            }
        ],
        name: "hashedUserOp",
        type: "tuple"
    };
    const encoded = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].defaultAbiCoder.encode([
        userOpType
    ], [
        {
            ...hashedUserOp
        }
    ]);
    // remove leading word (total length) and trailing word (zero-length signature)
    const userOpHash = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].keccak256(encoded);
    const enc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].defaultAbiCoder.encode([
        "bytes32",
        "address",
        "uint256"
    ], [
        userOpHash,
        entryPoint,
        chainId
    ]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].keccak256(enc);
}
const generateRandomUint192 = ()=>{
    const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));
    const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));
    const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));
    const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));
    const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));
    const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));
    return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;
};
const randomNonce = ()=>{
    let hexString = generateRandomUint192().toString(16);
    if (hexString.length % 2 !== 0) {
        hexString = "0" + hexString;
    }
    hexString = "0x" + hexString;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BigNumber"].from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].concat([
        hexString,
        "0x0000000000000000"
    ]));
};
const DEBUG = false; // TODO set as public flag
class HttpRpcClient {
    constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey){
        this.bundlerUrl = bundlerUrl;
        this.entryPointAddress = entryPointAddress;
        this.chainId = chainId;
        const headers = {};
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$url$2d$0d129c6b$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["i"])(this.bundlerUrl)) {
            const bundleId = typeof globalThis !== "undefined" && "APP_BUNDLE_ID" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;
            if (secretKey) {
                headers["x-secret-key"] = secretKey;
            } else if (clientId) {
                headers["x-client-id"] = clientId;
                if (bundleId) {
                    headers["x-bundle-id"] = bundleId;
                }
            }
            // Dashboard token
            if (typeof globalThis !== "undefined" && "TW_AUTH_TOKEN" in globalThis && typeof globalThis.TW_AUTH_TOKEN === "string") {
                headers["authorization"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;
            }
            // CLI token
            if (typeof globalThis !== "undefined" && "TW_CLI_AUTH_TOKEN" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === "string") {
                headers["authorization"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;
                headers["x-authorize-wallet"] = "true";
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$headers$2d$31b6ef3b$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["s"])(headers);
        }
        this.userOpJsonRpcProvider = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$providers$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__providers$3e$__["providers"].StaticJsonRpcProvider({
            url: this.bundlerUrl,
            headers
        }, {
            name: "Connected bundler network",
            chainId
        });
        this.initializing = this.validateChainId();
    }
    async validateChainId() {
        if (await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$utils$2d$80af2010$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["e"])(this.chainId)) {
            return;
        }
        // validate chainId is in sync with expected chainid
        const chain = await this.userOpJsonRpcProvider.send("eth_chainId", []);
        const bundlerChain = parseInt(chain);
        if (bundlerChain !== this.chainId) {
            throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);
        }
    }
    /**
   * send a UserOperation to the bundler
   * @param userOp1 - The UserOperation to send
   * @returns userOpHash the id of this operation, for getUserOperationTransaction
   */ async sendUserOpToBundler(userOp1) {
        await this.initializing;
        const hexifiedUserOp = await hexlifyUserOp(userOp1);
        const jsonRequestData = [
            hexifiedUserOp,
            this.entryPointAddress
        ];
        await this.printUserOperation("eth_sendUserOperation", jsonRequestData);
        return await this.userOpJsonRpcProvider.send("eth_sendUserOperation", [
            hexifiedUserOp,
            this.entryPointAddress
        ]);
    }
    async estimateUserOpGas(userOp) {
        await this.initializing;
        const hexifiedUserOp = await hexlifyUserOp(userOp);
        const jsonRequestData = [
            hexifiedUserOp,
            this.entryPointAddress
        ];
        await this.printUserOperation("eth_estimateUserOperationGas", jsonRequestData);
        const data = await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas", [
            hexifiedUserOp,
            this.entryPointAddress
        ]);
        // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls
        return {
            preVerificationGas: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BigNumber"].from(data.preVerificationGas),
            verificationGas: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BigNumber"].from(data.verificationGas),
            verificationGasLimit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BigNumber"].from(data.verificationGasLimit),
            callGasLimit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BigNumber"].from(data.callGasLimit).add(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$utils$2d$80af2010$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["M"])
        };
    }
    async getUserOperationGasPrice() {
        await this.initializing;
        return await this.userOpJsonRpcProvider.send("thirdweb_getUserOperationGasPrice", []);
    }
    async getUserOperationReceipt(userOpHash) {
        await this.initializing;
        return await this.userOpJsonRpcProvider.send("eth_getUserOperationReceipt", [
            userOpHash
        ]);
    }
    async zkPaymasterData(transactionInput) {
        await this.initializing;
        return await this.userOpJsonRpcProvider.send("zk_paymasterData", [
            await hexlifyUserOp({
                ...transactionInput,
                gas: transactionInput.gasLimit
            })
        ]);
    }
    async zkBroadcastTransaction(transactionInput) {
        await this.initializing;
        return await this.userOpJsonRpcProvider.send("zk_broadcastTransaction", [
            transactionInput
        ]);
    }
    async printUserOperation(method, _ref) {
        {
            return;
        }
    }
}
;
}}),
"[project]/node_modules/@thirdweb-dev/wallets/dist/zk-connector-ccab2550.esm.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ZkSyncConnector": (()=>ZkSyncConnector)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$7303a112$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/defineProperty-7303a112.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$connector$2d$20f7cf73$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/connector-20f7cf73.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$http$2d$rpc$2d$client$2d$25e8ff7a$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/http-rpc-client-25e8ff7a.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$utils$2d$80af2010$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/dist/utils-80af2010.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$abstract$2d$signer$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/abstract-signer/lib.esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__ = __turbopack_context__.i("[project]/node_modules/ethers/lib.esm/ethers.js [app-ssr] (ecmascript) <export * as ethers>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__ = __turbopack_context__.i("[project]/node_modules/ethers/lib.esm/utils.js [app-ssr] (ecmascript) <export * as utils>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/ethers/lib/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$eventemitter3$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/eventemitter3/index.mjs [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$evm$2f$wallets$2f$abstract$2f$dist$2f$thirdweb$2d$dev$2d$wallets$2d$evm$2d$wallets$2d$abstract$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@thirdweb-dev/wallets/evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$account$2d$abstraction$2f$contracts$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@account-abstraction/contracts/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
const DEFAULT_GAS_PER_PUBDATA_LIMIT = 50000;
const EIP712_TX_TYPE = 0x71;
const EIP712_TYPES = {
    Transaction: [
        {
            name: "txType",
            type: "uint256"
        },
        {
            name: "from",
            type: "uint256"
        },
        {
            name: "to",
            type: "uint256"
        },
        {
            name: "gasLimit",
            type: "uint256"
        },
        {
            name: "gasPerPubdataByteLimit",
            type: "uint256"
        },
        {
            name: "maxFeePerGas",
            type: "uint256"
        },
        {
            name: "maxPriorityFeePerGas",
            type: "uint256"
        },
        {
            name: "paymaster",
            type: "uint256"
        },
        {
            name: "nonce",
            type: "uint256"
        },
        {
            name: "value",
            type: "uint256"
        },
        {
            name: "data",
            type: "bytes"
        },
        {
            name: "factoryDeps",
            type: "bytes32[]"
        },
        {
            name: "paymasterInput",
            type: "bytes"
        }
    ]
};
class ZkWrappedSigner extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$abstract$2d$signer$2f$lib$2e$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Signer"] {
    constructor(signer, httpRpcClient){
        super();
        this.signer = signer;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineReadOnly"])(this, "provider", signer.provider);
        this.httpRpcClient = httpRpcClient;
    }
    async getAddress() {
        return await this.signer.getAddress();
    }
    async signMessage(message) {
        return await this.signer.signMessage(message);
    }
    async signTransaction(transaction) {
        return await this.signer.signTransaction(transaction);
    }
    connect(provider) {
        return new ZkWrappedSigner(this.signer.connect(provider), this.httpRpcClient);
    }
    _signTypedData(domain, types, value) {
        return this.signer._signTypedData(domain, types, value);
    }
    async sendTransaction(transaction) {
        return await this.sendZkSyncTransaction(transaction);
    }
    async sendZkSyncTransaction(_transaction) {
        let transaction = await this.populateTransaction(_transaction);
        if (!transaction.chainId) {
            throw new Error("ChainId is required to send a ZkSync transaction");
        }
        if (!this.provider) {
            throw new Error("Provider is required to send a ZkSync transaction");
        }
        const address = await this.getAddress();
        const gasLimit = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].BigNumber.from(transaction.gasLimit || await this.provider.estimateGas(transaction)).mul(3);
        const gasPrice = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].BigNumber.from(transaction.gasPrice || await this.provider.getGasPrice()).mul(2);
        if (!transaction.maxFeePerGas) {
            transaction.maxFeePerGas = gasPrice;
        } else {
            transaction.maxFeePerGas = transaction.maxFeePerGas.mul(2);
        }
        if (!transaction.maxPriorityFeePerGas) {
            transaction.maxPriorityFeePerGas = gasPrice;
        } else {
            transaction.maxPriorityFeePerGas = transaction.maxPriorityFeePerGas.mul(2);
        }
        transaction = {
            ...transaction,
            from: address,
            gasLimit,
            gasPrice,
            chainId: (await this.provider.getNetwork()).chainId,
            nonce: await this.provider.getTransactionCount(address),
            type: 113,
            value: BigInt(0)
        };
        const pmDataResult = await this.httpRpcClient?.zkPaymasterData(transaction);
        transaction.customData = {
            gasPerPubdata: DEFAULT_GAS_PER_PUBDATA_LIMIT,
            factoryDeps: [],
            paymasterParams: {
                paymaster: pmDataResult.paymaster,
                paymasterInput: pmDataResult.paymasterInput
            }
        };
        const eip712tx = {
            txType: EIP712_TX_TYPE,
            from: BigInt(transaction.from || await this.getAddress()).toString(),
            to: BigInt(transaction.to || "0x0").toString(),
            gasLimit: transaction.gasLimit ? Number(transaction.gasLimit) : 0,
            gasPerPubdataByteLimit: DEFAULT_GAS_PER_PUBDATA_LIMIT,
            maxFeePerGas: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].BigNumber.from(transaction.maxFeePerGas).toNumber(),
            maxPriorityFeePerGas: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].BigNumber.from(transaction.maxPriorityFeePerGas).toNumber(),
            paymaster: BigInt(pmDataResult.paymaster).toString(),
            nonce: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].BigNumber.from(transaction.nonce).toNumber(),
            value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].BigNumber.from(transaction.value).toNumber(),
            data: transaction.data || "0x",
            factoryDeps: [],
            paymasterInput: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].utils.arrayify(pmDataResult.paymasterInput)
        };
        const signature = await this._signTypedData({
            name: "zkSync",
            version: "2",
            chainId: transaction.chainId
        }, EIP712_TYPES, eip712tx);
        const serializedTx = this.serialize(transaction, signature);
        const zkSignedTx = {
            from: transaction.from?.toString() || await this.getAddress(),
            to: transaction.to?.toString() || "",
            gas: transaction.gasLimit?.toString() || "",
            maxFeePerGas: transaction.maxFeePerGas?.toString() || "0",
            maxPriorityFeePerGas: transaction.maxPriorityFeePerGas?.toString() || "0",
            signedTransaction: serializedTx,
            paymaster: pmDataResult.paymaster
        };
        const broadcastResult = await this.httpRpcClient?.zkBroadcastTransaction(zkSignedTx);
        const hash = broadcastResult.transactionHash;
        return await this.provider?.getTransaction(hash);
    }
    serialize(transaction, signature) {
        if (!transaction.customData && transaction.type !== EIP712_TX_TYPE) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].serializeTransaction(transaction, signature);
        }
        if (!transaction.chainId) {
            throw Error("Transaction chainId isn't set!");
        }
        function formatNumber(value, name) {
            const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].stripZeros(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ethersproject$2f$bignumber$2f$lib$2e$esm$2f$bignumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BigNumber"].from(value).toHexString());
            if (result.length > 32) {
                throw new Error(`Invalid length for ${name}!`);
            }
            return result;
        }
        if (!transaction.from) {
            throw new Error("Explicitly providing `from` field is required for EIP712 transactions!");
        }
        const from = transaction.from;
        const meta = transaction.customData ?? {};
        const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;
        const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;
        const fields = [
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(maxPriorityFeePerGas, "maxPriorityFeePerGas"),
            formatNumber(maxFeePerGas, "maxFeePerGas"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            transaction.to ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].getAddress(transaction.to) : "0x",
            formatNumber(transaction.value || 0, "value"),
            transaction.data || "0x"
        ];
        if (signature) {
            const sig = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].stripZeros(sig.r));
            fields.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].stripZeros(sig.s));
        } else {
            fields.push(formatNumber(transaction.chainId, "chainId"));
            fields.push("0x");
            fields.push("0x");
        }
        fields.push(formatNumber(transaction.chainId, "chainId"));
        fields.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].getAddress(from));
        // Add meta
        fields.push(formatNumber(meta.gasPerPubdata || DEFAULT_GAS_PER_PUBDATA_LIMIT, "gasPerPubdata"));
        fields.push((meta.factoryDeps ?? []).map((dep)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].hexlify(dep)));
        if (meta.customSignature && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].utils.arrayify(meta.customSignature).length === 0) {
            throw new Error("Empty signatures are not supported!");
        }
        fields.push(meta.customSignature || "0x");
        if (meta.paymasterParams) {
            fields.push([
                meta.paymasterParams.paymaster,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$ethers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__ethers$3e$__["ethers"].utils.hexlify(meta.paymasterParams.paymasterInput)
            ]);
        } else {
            fields.push([]);
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].hexConcat([
            [
                EIP712_TX_TYPE
            ],
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ethers$2f$lib$2e$esm$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__utils$3e$__["utils"].RLP.encode(fields)
        ]);
    }
}
class ZkSyncConnector extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$connector$2d$20f7cf73$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["C"] {
    constructor(config){
        super();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$defineProperty$2d$7303a112$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["_"])(this, "chainId", 1);
        this.config = config;
    }
    async connect(args) {
        this.personalWallet = args.personalWallet;
        this.chainId = await (await this.personalWallet.getSigner()).getChainId();
        if (!await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$utils$2d$80af2010$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["e"])(this.chainId)) {
            throw new Error("Invalid zksync chain id");
        }
        const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;
        const entryPointAddress = this.config.entryPointAddress || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$utils$2d$80af2010$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["f"];
        this.httpRpcClient = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$thirdweb$2d$dev$2f$wallets$2f$dist$2f$http$2d$rpc$2d$client$2d$25e8ff7a$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["H"](bundlerUrl, entryPointAddress, this.chainId, this.config.clientId, this.config.secretKey);
        return this.getAddress();
    }
    disconnect() {
        throw new Error("Method not implemented.");
    }
    async getAddress() {
        const signer = await this.getSigner();
        return signer.getAddress();
    }
    async getSigner() {
        if (!this.personalWallet) {
            throw new Error("Wallet not connected");
        }
        return new ZkWrappedSigner(await this.personalWallet.getSigner(), this.httpRpcClient);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    switchChain(chainId) {
        throw new Error("Method not implemented.");
    }
    isConnected() {
        return Promise.resolve(!!this.personalWallet);
    }
    setupListeners() {
        throw new Error("Method not implemented.");
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    updateChains(chains) {
        throw new Error("Method not implemented.");
    }
    async getProvider() {
        if (!this.getSigner()) {
            throw new Error("Personal wallet not connected");
        }
        const signer = await this.getSigner();
        if (!signer.provider) {
            throw new Error("Provider not found");
        }
        return signer.provider;
    }
}
;
}}),

};

//# sourceMappingURL=node_modules_%40thirdweb-dev_wallets_dist_241a5cf8._.js.map