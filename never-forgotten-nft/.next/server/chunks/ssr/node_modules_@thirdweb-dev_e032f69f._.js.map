{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/wallets/dist/http-rpc-client-25e8ff7a.esm.js"],"sourcesContent":["import { utils, BigNumber, providers } from 'ethers';\nimport { i as isTwUrl } from './url-0d129c6b.esm.js';\nimport { s as setAnalyticsHeaders } from './headers-31b6ef3b.esm.js';\nimport { e as isZkSyncChain, M as MANAGED_ACCOUNT_GAS_BUFFER } from './utils-80af2010.esm.js';\n\nasync function hexlifyUserOp(\n// TODO: types\nop) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    if (await isZkSyncChain(this.chainId)) {\n      return;\n    }\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async zkPaymasterData(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_paymasterData\", [await hexlifyUserOp({\n      ...transactionInput,\n      gas: transactionInput.gasLimit\n    })]);\n  }\n  async zkBroadcastTransaction(transactionInput) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"zk_broadcastTransaction\", [transactionInput]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nexport { DEBUG as D, HttpRpcClient as H, getUserOpHashV06 as g, hexlifyUserOp as h, randomNonce as r };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js"],"sourcesContent":["import { C as Connector } from '../../../../dist/connector-20f7cf73.esm.js';\nimport { h as hexlifyUserOp, D as DEBUG, r as randomNonce, H as HttpRpcClient, g as getUserOpHashV06 } from '../../../../dist/http-rpc-client-25e8ff7a.esm.js';\nimport { i as isTwUrl } from '../../../../dist/url-0d129c6b.esm.js';\nimport { s as setAnalyticsHeaders } from '../../../../dist/headers-31b6ef3b.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { utils, Signer, ethers, providers, Contract, BigNumber, constants } from 'ethers';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-7303a112.esm.js';\nimport { signTypedDataInternal, getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { chainIdToThirdwebRpc } from '../../../wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js';\nimport { c as checkContractWalletSignature, A as ACCOUNT_CORE_ABI, f as ENTRYPOINT_ADDRESS, D as DEFAULT_FACTORY_ADDRESS } from '../../../../dist/utils-80af2010.esm.js';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {}\n\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (DEBUG) {\n      console.debug(\"Paymaster result:\", res);\n    }\n    if (res.result) {\n      // some paymasters return a string, some return an object with more data\n      if (typeof res.result === \"string\") {\n        return {\n          paymasterAndData: res.result\n        };\n      } else {\n        return res.result;\n      }\n    } else {\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n    this.approving = false;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, options) {\n    if (!this.approving) {\n      this.approving = true;\n      const tx = await this.smartAccountAPI.createApproveTx();\n      if (tx) {\n        await (await this.sendTransaction(tx)).wait();\n      }\n      this.approving = false;\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n\n  /**\n   * Sign a message and return the signature\n   */\n  async signMessage(message) {\n    // Deploy smart wallet if needed\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    const [chainId, address] = await Promise.all([this.getChainId(), this.getAddress()]);\n    const originalMsgHash = utils.hashMessage(message);\n    let factorySupports712;\n    let signature;\n    const rpcUrl = chainIdToThirdwebRpc(chainId, this.config.clientId);\n    const headers = {};\n    if (isTwUrl(rpcUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (this.config.secretKey) {\n        headers[\"x-secret-key\"] = this.config.secretKey;\n      } else if (this.config.clientId) {\n        headers[\"x-client-id\"] = this.config.clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    try {\n      const provider = new providers.StaticJsonRpcProvider({\n        url: rpcUrl,\n        headers\n      }, chainId);\n      const walletContract = new Contract(address, [\"function getMessageHash(bytes32 _hash) public view returns (bytes32)\"], provider);\n      // if this fails it's a pre 712 factory\n      await walletContract.getMessageHash(originalMsgHash);\n      factorySupports712 = true;\n    } catch {\n      factorySupports712 = false;\n    }\n    if (factorySupports712) {\n      const result = await signTypedDataInternal(this, {\n        name: \"Account\",\n        version: \"1\",\n        chainId,\n        verifyingContract: address\n      }, {\n        AccountMessage: [{\n          name: \"message\",\n          type: \"bytes\"\n        }]\n      }, {\n        message: utils.defaultAbiCoder.encode([\"bytes32\"], [originalMsgHash])\n      });\n      signature = result.signature;\n    } else {\n      signature = await this.originalSigner.signMessage(message);\n    }\n    const isValid = await checkContractWalletSignature(message, signature, address, chainId, this.config.clientId, this.config.secretKey);\n    if (isValid) {\n      return signature;\n    } else {\n      throw new Error(\"Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.\");\n    }\n  }\n  async signTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n      return BigNumber.from(500000);\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await this.smartAccountAPI.getUserOpReceipt(this.httpRpcClient, userOpHash);\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n    this.gasless = params.gasless;\n    this.erc20PaymasterAddress = params.erc20PaymasterAddress;\n    this.erc20TokenAddress = params.erc20TokenAddress;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n  async createUnsignedUserOp(httpRpcClient, info, options) {\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    // get fees from bundler if available\n    if (isTwUrl(httpRpcClient.bundlerUrl)) {\n      const bundlerFeeData = await httpRpcClient.getUserOperationGasPrice();\n      maxFeePerGas = BigNumber.from(bundlerFeeData.maxFeePerGas);\n      maxPriorityFeePerGas = BigNumber.from(bundlerFeeData.maxPriorityFeePerGas);\n    } else {\n      // if bundler is not available, try to get fees from the network if not passed explicitly\n      if (!maxFeePerGas || !maxPriorityFeePerGas) {\n        const feeData = await getDynamicFeeData(this.provider);\n        if (!maxPriorityFeePerGas) {\n          maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n        }\n        if (!maxFeePerGas) {\n          maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n          const network = await this.provider.getNetwork();\n          const chainId = network.chainId;\n          if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n            maxPriorityFeePerGas = maxFeePerGas;\n          }\n        }\n      }\n    }\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n    }\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\n    const initCode = await this.getInitCode();\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(async tx => {\n      if (!info.gasLimit) {\n        // estimate gas on the inner transactions to simulate\n        // bundler would not revert otherwise\n        await this.provider.estimateGas({\n          from: sender,\n          to: info.target,\n          data: info.data,\n          value: value\n        });\n      }\n      return tx.encode();\n    });\n    const partialOp = {\n      sender,\n      nonce,\n      initCode,\n      callData,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      callGasLimit: BigNumber.from(1000000),\n      verificationGasLimit: BigNumber.from(1000000),\n      preVerificationGas: BigNumber.from(1000000),\n      paymasterAndData: \"0x\",\n      signature: DUMMY_SIGNATURE\n    };\n\n    // paymaster data + maybe used for estimation as well\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\n    const useErc20Paymaster = this.erc20PaymasterAddress && this.erc20TokenAddress && (await this.isAccountApproved());\n    if (useErc20Paymaster) {\n      partialOp.paymasterAndData = this.erc20PaymasterAddress;\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    } else if (gasless) {\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n      const paymasterAndData = paymasterResult.paymasterAndData;\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\n        partialOp.paymasterAndData = paymasterAndData;\n      }\n      // paymaster can have the gas limits in the response\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\n      } else {\n        // otherwise fallback to bundler for gas limits\n        let estimates;\n        try {\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n        } catch (error) {\n          throw this.unwrapBundlerError(error);\n        }\n        partialOp.callGasLimit = estimates.callGasLimit;\n        partialOp.verificationGasLimit = estimates.verificationGasLimit;\n        partialOp.preVerificationGas = estimates.preVerificationGas;\n        // need paymaster to re-sign after estimates\n        if (paymasterAndData && paymasterAndData !== \"0x\") {\n          const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n          if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n            partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n          }\n        }\n      }\n    } else {\n      // query bundler for gas limits\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    }\n    return {\n      ...partialOp,\n      signature: \"\"\n    };\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or throws if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transaction receipt, or an error if timed out.\n   */\n  async getUserOpReceipt(httpRpcClient, userOpHash) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 120000;\n    let interval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const userOpReceipt = await httpRpcClient.getUserOperationReceipt(userOpHash);\n      if (userOpReceipt) {\n        // avoid desync with current provider state\n        return await this.provider.waitForTransaction(userOpReceipt.receipt.transactionHash);\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(\"Timeout waiting for userOp to be mined\");\n  }\n  unwrapBundlerError(error) {\n    const message = error?.error?.message || error.error || error.message || error;\n    return new Error(message);\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey,\n      // @ts-expect-error expected chain type error\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n  async isAccountApproved() {\n    if (!this.params.erc20PaymasterAddress || !this.params.erc20TokenAddress) {\n      return true;\n    }\n    const swAddress = await this.getCounterFactualAddress();\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20Token = await this.sdk.getContract(this.params.erc20TokenAddress, ERC20Abi);\n    const allowance = await erc20Token.call(\"allowance\", [swAddress, this.params.erc20PaymasterAddress]);\n    return allowance.gte(BigNumber.from(2).pow(96).sub(1));\n  }\n  async createApproveTx() {\n    if (await this.isAccountApproved()) {\n      return undefined;\n    }\n    const amountToApprove = BigNumber.from(2).pow(96).sub(1);\n    const ethersSigner = new ethers.Wallet(LOCAL_NODE_PKEY, this.provider);\n    const erc20Contract = new Contract(this.params.erc20TokenAddress, [\"function approve(address spender, uint256 amount) public returns (bool)\"], ethersSigner);\n    const tx = {\n      to: this.params.erc20TokenAddress,\n      from: await this.getAccountAddress(),\n      value: 0,\n      data: erc20Contract.interface.encodeFunctionData(\"approve\", [this.params.erc20PaymasterAddress, amountToApprove])\n    };\n    return tx;\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n      gasless: config.gasless,\n      factoryAddress: config.factoryAddress || DEFAULT_FACTORY_ADDRESS,\n      accountAddress: params.accountAddress,\n      factoryInfo: {\n        createAccount: config.factoryInfo?.createAccount || this.defaultFactoryInfo().createAccount,\n        getAccountAddress: config.factoryInfo?.getAccountAddress || this.defaultFactoryInfo().getAccountAddress,\n        abi: config.factoryInfo?.abi\n      },\n      accountInfo: {\n        execute: config.accountInfo?.execute || this.defaultAccountInfo().execute,\n        getNonce: config.accountInfo?.getNonce || this.defaultAccountInfo().getNonce,\n        abi: config.accountInfo?.abi\n      },\n      clientId: config.clientId,\n      secretKey: config.secretKey,\n      erc20PaymasterAddress: config.erc20PaymasterAddress,\n      erc20TokenAddress: config.erc20TokenAddress\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */\n  async send(transaction, options) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    }, options);\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */\n  async execute(transaction, options) {\n    const tx = await this.send(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */\n  async executeBatch(transactions, options) {\n    const tx = await this.sendBatch(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction, options);\n  }\n  async executeRaw(transaction, options) {\n    const tx = await this.sendRaw(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData: batch.batchData // batched tx flag\n    });\n  }\n  async executeBatchRaw(transactions, options) {\n    const tx = await this.sendBatchRaw(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue(),\n      gasLimit: await transaction.getOverrides().gasLimit,\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n      nonce: await transaction.getOverrides().nonce\n    }, options);\n  }\n  async estimateRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || constants.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0),\n      gasLimit: tx.gasLimit,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n      nonce: tx.nonce\n    }, options);\n  }\n  async estimateBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n  async estimateBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */\n  async deploy(options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      ...options,\n      batchData: {\n        targets: [],\n        data: [],\n        values: []\n      } // batched tx flag to avoid hitting the Router fallback method\n    });\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded(options) {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy(options);\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress(), ACCOUNT_CORE_ABI);\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */\n  async getFactoryContract() {\n    if (!this.config.factoryAddress) {\n      throw new Error(\"Factory address not set!\");\n    }\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, options) {\n    if (!this.accountApi || !this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\n    const resolved = await utils.resolveProperties(userOp);\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1675, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/%40thirdweb-dev/wallets/evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { SmartWalletConnector } from '../../smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js';\nimport { E as ERC6551_REGISTRY } from '../../../../dist/utils-80af2010.esm.js';\nimport '../../../../dist/connector-20f7cf73.esm.js';\nimport 'eventemitter3';\nimport '../../../../dist/http-rpc-client-25e8ff7a.esm.js';\nimport '../../../../dist/url-0d129c6b.esm.js';\nimport '@thirdweb-dev/chains';\nimport '../../../../dist/headers-31b6ef3b.esm.js';\nimport '@account-abstraction/contracts';\nimport '../../../../dist/defineProperty-7303a112.esm.js';\nimport '@thirdweb-dev/sdk';\nimport '../../../wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js';\n\nclass TokenBoundSmartWalletConnector extends SmartWalletConnector {\n  constructor(input) {\n    super({\n      ...input,\n      factoryAddress: input.registryAddress || ERC6551_REGISTRY\n    });\n    this.tbaConfig = input;\n    // TODO default account implementation address\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async factory => {\n        return factory.prepare(\"createAccount\", [this.tbaConfig.accountImplementation, this.chainId, this.tbaConfig.tokenContract, this.tbaConfig.tokenId, this.tbaConfig.salt, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async factory => {\n        return await factory.call(\"account\", [this.tbaConfig.accountImplementation, this.chainId, this.tbaConfig.tokenContract, this.tbaConfig.tokenId, this.tbaConfig.salt]);\n      }\n    };\n  }\n}\n\nexport { TokenBoundSmartWalletConnector };\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAEA;AAKA;AAGA;;;;;;;;;;;;;;AAEA,MAAM,uCAAuC,yQAAA,CAAA,uBAAoB;IAC/D,YAAY,KAAK,CAAE;QACjB,KAAK,CAAC;YACJ,GAAG,KAAK;YACR,gBAAgB,MAAM,eAAe,IAAI,gLAAA,CAAA,IAAgB;QAC3D;QACA,IAAI,CAAC,SAAS,GAAG;IACjB,8CAA8C;IAChD;IACA,qBAAqB;QACnB,OAAO;YACL,eAAe,OAAM;gBACnB,OAAO,QAAQ,OAAO,CAAC,iBAAiB;oBAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB;oBAAE,IAAI,CAAC,OAAO;oBAAE,IAAI,CAAC,SAAS,CAAC,aAAa;oBAAE,IAAI,CAAC,SAAS,CAAC,OAAO;oBAAE,IAAI,CAAC,SAAS,CAAC,IAAI;oBAAE,gLAAA,CAAA,SAAM,CAAC,KAAK,CAAC,WAAW,CAAC;iBAAI;YACvM;YACA,mBAAmB,OAAM;gBACvB,OAAO,MAAM,QAAQ,IAAI,CAAC,WAAW;oBAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB;oBAAE,IAAI,CAAC,OAAO;oBAAE,IAAI,CAAC,SAAS,CAAC,aAAa;oBAAE,IAAI,CAAC,SAAS,CAAC,OAAO;oBAAE,IAAI,CAAC,SAAS,CAAC,IAAI;iBAAC;YACtK;QACF;IACF;AACF","ignoreList":[0],"debugId":null}}]
}