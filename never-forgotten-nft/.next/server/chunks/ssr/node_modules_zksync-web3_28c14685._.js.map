{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/types.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccountNonceOrdering = exports.AccountAbstractionVersion = exports.TransactionStatus = exports.PriorityOpTree = exports.PriorityQueueType = exports.Network = void 0;\n// Ethereum network\nvar Network;\n(function (Network) {\n    Network[Network[\"Mainnet\"] = 1] = \"Mainnet\";\n    Network[Network[\"Ropsten\"] = 3] = \"Ropsten\";\n    Network[Network[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    Network[Network[\"Goerli\"] = 5] = \"Goerli\";\n    Network[Network[\"Localhost\"] = 9] = \"Localhost\";\n})(Network = exports.Network || (exports.Network = {}));\nvar PriorityQueueType;\n(function (PriorityQueueType) {\n    PriorityQueueType[PriorityQueueType[\"Deque\"] = 0] = \"Deque\";\n    PriorityQueueType[PriorityQueueType[\"HeapBuffer\"] = 1] = \"HeapBuffer\";\n    PriorityQueueType[PriorityQueueType[\"Heap\"] = 2] = \"Heap\";\n})(PriorityQueueType = exports.PriorityQueueType || (exports.PriorityQueueType = {}));\nvar PriorityOpTree;\n(function (PriorityOpTree) {\n    PriorityOpTree[PriorityOpTree[\"Full\"] = 0] = \"Full\";\n    PriorityOpTree[PriorityOpTree[\"Rollup\"] = 1] = \"Rollup\";\n})(PriorityOpTree = exports.PriorityOpTree || (exports.PriorityOpTree = {}));\nvar TransactionStatus;\n(function (TransactionStatus) {\n    TransactionStatus[\"NotFound\"] = \"not-found\";\n    TransactionStatus[\"Processing\"] = \"processing\";\n    TransactionStatus[\"Committed\"] = \"committed\";\n    TransactionStatus[\"Finalized\"] = \"finalized\";\n})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));\nvar AccountAbstractionVersion;\n(function (AccountAbstractionVersion) {\n    AccountAbstractionVersion[AccountAbstractionVersion[\"None\"] = 0] = \"None\";\n    AccountAbstractionVersion[AccountAbstractionVersion[\"Version1\"] = 1] = \"Version1\";\n})(AccountAbstractionVersion = exports.AccountAbstractionVersion || (exports.AccountAbstractionVersion = {}));\nvar AccountNonceOrdering;\n(function (AccountNonceOrdering) {\n    AccountNonceOrdering[AccountNonceOrdering[\"Sequential\"] = 0] = \"Sequential\";\n    AccountNonceOrdering[AccountNonceOrdering[\"Arbitrary\"] = 1] = \"Arbitrary\";\n})(AccountNonceOrdering = exports.AccountNonceOrdering || (exports.AccountNonceOrdering = {}));\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,oBAAoB,GAAG,QAAQ,yBAAyB,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,cAAc,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,OAAO,GAAG,KAAK;AAC3K,mBAAmB;AACnB,IAAI;AACJ,CAAC,SAAU,OAAO;IACd,OAAO,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,GAAG;IAClC,OAAO,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,GAAG;IAClC,OAAO,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,GAAG;IAClC,OAAO,CAAC,OAAO,CAAC,SAAS,GAAG,EAAE,GAAG;IACjC,OAAO,CAAC,OAAO,CAAC,YAAY,GAAG,EAAE,GAAG;AACxC,CAAC,EAAE,UAAU,QAAQ,OAAO,IAAI,CAAC,QAAQ,OAAO,GAAG,CAAC,CAAC;AACrD,IAAI;AACJ,CAAC,SAAU,iBAAiB;IACxB,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,GAAG,EAAE,GAAG;IACpD,iBAAiB,CAAC,iBAAiB,CAAC,aAAa,GAAG,EAAE,GAAG;IACzD,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,GAAG,EAAE,GAAG;AACvD,CAAC,EAAE,oBAAoB,QAAQ,iBAAiB,IAAI,CAAC,QAAQ,iBAAiB,GAAG,CAAC,CAAC;AACnF,IAAI;AACJ,CAAC,SAAU,cAAc;IACrB,cAAc,CAAC,cAAc,CAAC,OAAO,GAAG,EAAE,GAAG;IAC7C,cAAc,CAAC,cAAc,CAAC,SAAS,GAAG,EAAE,GAAG;AACnD,CAAC,EAAE,iBAAiB,QAAQ,cAAc,IAAI,CAAC,QAAQ,cAAc,GAAG,CAAC,CAAC;AAC1E,IAAI;AACJ,CAAC,SAAU,iBAAiB;IACxB,iBAAiB,CAAC,WAAW,GAAG;IAChC,iBAAiB,CAAC,aAAa,GAAG;IAClC,iBAAiB,CAAC,YAAY,GAAG;IACjC,iBAAiB,CAAC,YAAY,GAAG;AACrC,CAAC,EAAE,oBAAoB,QAAQ,iBAAiB,IAAI,CAAC,QAAQ,iBAAiB,GAAG,CAAC,CAAC;AACnF,IAAI;AACJ,CAAC,SAAU,yBAAyB;IAChC,yBAAyB,CAAC,yBAAyB,CAAC,OAAO,GAAG,EAAE,GAAG;IACnE,yBAAyB,CAAC,yBAAyB,CAAC,WAAW,GAAG,EAAE,GAAG;AAC3E,CAAC,EAAE,4BAA4B,QAAQ,yBAAyB,IAAI,CAAC,QAAQ,yBAAyB,GAAG,CAAC,CAAC;AAC3G,IAAI;AACJ,CAAC,SAAU,oBAAoB;IAC3B,oBAAoB,CAAC,oBAAoB,CAAC,aAAa,GAAG,EAAE,GAAG;IAC/D,oBAAoB,CAAC,oBAAoB,CAAC,YAAY,GAAG,EAAE,GAAG;AAClE,CAAC,EAAE,uBAAuB,QAAQ,oBAAoB,IAAI,CAAC,QAAQ,oBAAoB,GAAG,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/typechain/IZkSyncFactory.js"],"sourcesContent":["\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IZkSyncFactory = void 0;\nconst ethers_1 = require(\"ethers\");\nclass IZkSyncFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IZkSyncFactory = IZkSyncFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"commitment\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"BlockCommit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"blockHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"commitment\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"BlockExecution\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBlocksCommitted\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBlocksVerified\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"totalBlocksExecuted\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"BlocksRevert\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"previousLastVerifiedBlock\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"currentLastVerifiedBlock\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"BlocksVerification\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"CancelUpgradeProposal\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"EthWithdrawalFinalized\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"proposalSalt\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ExecuteUpgrade\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"Freeze\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isPorterAvailable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"IsPorterAvailableStatusUpdate\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldGovernor\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewGovernor\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"previousBytecodeHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"newBytecodeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"NewL2BootloaderBytecodeHash\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"previousBytecodeHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"newBytecodeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"NewL2DefaultAccountBytecodeHash\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldPendingGovernor\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newPendingGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewPendingGovernor\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"txId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"txHash\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint64\",\n                name: \"expirationTimestamp\",\n                type: \"uint64\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256\",\n                        name: \"txType\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"from\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"to\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"gasLimit\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"gasPerPubdataByteLimit\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"maxFeePerGas\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"maxPriorityFeePerGas\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"paymaster\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"nonce\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"value\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"uint256[4]\",\n                        name: \"reserved\",\n                        type: \"uint256[4]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"signature\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"factoryDeps\",\n                        type: \"uint256[]\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"paymasterInput\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"reservedDynamic\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct IMailbox.L2CanonicalTransaction\",\n                name: \"transaction\",\n                type: \"tuple\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes[]\",\n                name: \"factoryDeps\",\n                type: \"bytes[]\",\n            },\n        ],\n        name: \"NewPriorityRequest\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"oldPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NewPriorityTxMaxGasLimit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"oldVerifier\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newVerifier\",\n                type: \"address\",\n            },\n        ],\n        name: \"NewVerifier\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct VerifierParams\",\n                name: \"oldVerifierParams\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct VerifierParams\",\n                name: \"newVerifierParams\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"NewVerifierParams\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ProposeShadowUpgrade\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"diamondCut\",\n                type: \"tuple\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"proposalSalt\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"ProposeTransparentUpgrade\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"uint256\",\n                name: \"proposalId\",\n                type: \"uint256\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"proposalHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"SecurityCouncilUpgradeApprove\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"Unfreeze\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"validatorAddress\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"isActive\",\n                type: \"bool\",\n            },\n        ],\n        name: \"ValidatorStatusUpdate\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"acceptGovernor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_proposedUpgradeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"cancelUpgradeProposal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"blockHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBlockInfo\",\n                name: \"_lastCommittedBlockData\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"timestamp\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"newStateRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initialStorageChanges\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"repeatedStorageChanges\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"l2Logs\",\n                        type: \"bytes\",\n                    },\n                    {\n                        internalType: \"bytes[]\",\n                        name: \"l2ArbitraryLengthMessages\",\n                        type: \"bytes[]\",\n                    },\n                    {\n                        internalType: \"bytes[]\",\n                        name: \"factoryDeps\",\n                        type: \"bytes[]\",\n                    },\n                ],\n                internalType: \"struct IExecutor.CommitBlockInfo[]\",\n                name: \"_newBlocksData\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"commitBlocks\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"blockHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBlockInfo[]\",\n                name: \"_blocksData\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"executeBlocks\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"_diamondCut\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_proposalSalt\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"executeUpgrade\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_selector\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"facetAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"facet\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"facetAddresses\",\n        outputs: [\n            {\n                internalType: \"address[]\",\n                name: \"facets\",\n                type: \"address[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_facet\",\n                type: \"address\",\n            },\n        ],\n        name: \"facetFunctionSelectors\",\n        outputs: [\n            {\n                internalType: \"bytes4[]\",\n                name: \"\",\n                type: \"bytes4[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"facets\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"address\",\n                        name: \"addr\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes4[]\",\n                        name: \"selectors\",\n                        type: \"bytes4[]\",\n                    },\n                ],\n                internalType: \"struct IGetters.Facet[]\",\n                name: \"\",\n                type: \"tuple[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBlock\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_message\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"finalizeEthWithdrawal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"freezeDiamond\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getCurrentProposalId\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getFirstUnprocessedPriorityTx\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getGovernor\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getL2BootloaderBytecodeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getL2DefaultAccountBytecodeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getPendingGovernor\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getPriorityQueueSize\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getProposedUpgradeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getProposedUpgradeTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getSecurityCouncil\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBlocksCommitted\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBlocksExecuted\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalBlocksVerified\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getTotalPriorityTxs\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getUpgradeProposalState\",\n        outputs: [\n            {\n                internalType: \"enum UpgradeState\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getVerifier\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getVerifierParams\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct VerifierParams\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getpriorityTxMaxGasLimit\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isApprovedBySecurityCouncil\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isDiamondStorageFrozen\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isEthWithdrawalFinalized\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_facet\",\n                type: \"address\",\n            },\n        ],\n        name: \"isFacetFreezable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"isFreezable\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"_selector\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"isFunctionFreezable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_address\",\n                type: \"address\",\n            },\n        ],\n        name: \"isValidator\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"l2LogsRootHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"hash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_gasPrice\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasPerPubdataByteLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"l2TransactionBaseCost\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"priorityQueueFrontOperation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"canonicalTxHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTimestamp\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint192\",\n                        name: \"layer2Tip\",\n                        type: \"uint192\",\n                    },\n                ],\n                internalType: \"struct PriorityOperation\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_proposalHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint40\",\n                name: \"_proposalId\",\n                type: \"uint40\",\n            },\n        ],\n        name: \"proposeShadowUpgrade\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"_diamondCut\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"uint40\",\n                name: \"_proposalId\",\n                type: \"uint40\",\n            },\n        ],\n        name: \"proposeTransparentUpgrade\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"blockHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBlockInfo\",\n                name: \"_prevBlock\",\n                type: \"tuple\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint64\",\n                        name: \"blockNumber\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"blockHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"indexRepeatedStorageChanges\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"numberOfLayer1Txs\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"priorityOperationsHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"l2LogsTreeRoot\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"timestamp\",\n                        type: \"uint256\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"commitment\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct IExecutor.StoredBlockInfo[]\",\n                name: \"_committedBlocks\",\n                type: \"tuple[]\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"recursiveAggregationInput\",\n                        type: \"uint256[]\",\n                    },\n                    {\n                        internalType: \"uint256[]\",\n                        name: \"serializedProof\",\n                        type: \"uint256[]\",\n                    },\n                ],\n                internalType: \"struct IExecutor.ProofInput\",\n                name: \"_proof\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"proveBlocks\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_l2TxHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBlock\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n            {\n                internalType: \"enum TxStatus\",\n                name: \"_status\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"proveL1ToL2TransactionStatus\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint8\",\n                        name: \"l2ShardId\",\n                        type: \"uint8\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"isService\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint16\",\n                        name: \"txNumberInBlock\",\n                        type: \"uint16\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"sender\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"key\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"value\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct L2Log\",\n                name: \"_log\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"proveL2LogInclusion\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_index\",\n                type: \"uint256\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"uint16\",\n                        name: \"txNumberInBlock\",\n                        type: \"uint16\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"sender\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct L2Message\",\n                name: \"_message\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_proof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"proveL2MessageInclusion\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_contractL2\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2Value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_calldata\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2GasPerPubdataByteLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes[]\",\n                name: \"_factoryDeps\",\n                type: \"bytes[]\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_refundRecipient\",\n                type: \"address\",\n            },\n        ],\n        name: \"requestL2Transaction\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"canonicalTxHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_newLastBlock\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"revertBlocks\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_upgradeProposalHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"securityCouncilUpgradeApprove\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_l2BootloaderBytecodeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"setL2BootloaderBytecodeHash\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"_l2DefaultAccountBytecodeHash\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"setL2DefaultAccountBytecodeHash\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_newPendingGovernor\",\n                type: \"address\",\n            },\n        ],\n        name: \"setPendingGovernor\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bool\",\n                name: \"_zkPorterIsAvailable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setPorterAvailability\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_newPriorityTxMaxGasLimit\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setPriorityTxMaxGasLimit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_validator\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_active\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setValidator\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"contract Verifier\",\n                name: \"_newVerifier\",\n                type: \"address\",\n            },\n        ],\n        name: \"setVerifier\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionNodeLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionLeafLevelVkHash\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"recursionCircuitsSetVksHash\",\n                        type: \"bytes32\",\n                    },\n                ],\n                internalType: \"struct VerifierParams\",\n                name: \"_newVerifierParams\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"setVerifierParams\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_blockNumber\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"storedBlockHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"unfreezeDiamond\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"facet\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"enum Diamond.Action\",\n                                name: \"action\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"isFreezable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes4[]\",\n                                name: \"selectors\",\n                                type: \"bytes4[]\",\n                            },\n                        ],\n                        internalType: \"struct Diamond.FacetCut[]\",\n                        name: \"facetCuts\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"initAddress\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"initCalldata\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Diamond.DiamondCutData\",\n                name: \"_diamondCut\",\n                type: \"tuple\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_proposalId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_salt\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"upgradeProposalHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n];\n"],"names":[],"mappings":"AAAA;AACA,6CAA6C,GAC7C,kBAAkB,GAClB,kBAAkB,GAClB,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,cAAc,GAAG,KAAK;AAC9B,MAAM;AACN,MAAM;IACF,OAAO,QAAQ,OAAO,EAAE,gBAAgB,EAAE;QACtC,OAAO,IAAI,SAAS,QAAQ,CAAC,SAAS,MAAM;IAChD;AACJ;AACA,QAAQ,cAAc,GAAG;AACzB,MAAM,OAAO;IACT;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,YAAY;4BACR;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;yBACH;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,YAAY;4BACR;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;yBACH;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,YAAY;4BACR;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;yBACH;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,YAAY;oBACR;wBACI,YAAY;4BACR;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;4BACA;gCACI,cAAc;gCACd,MAAM;gCACN,MAAM;4BACV;yBACH;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;CACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2117, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/typechain/IERC20MetadataFactory.js"],"sourcesContent":["\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC20MetadataFactory = void 0;\nconst ethers_1 = require(\"ethers\");\nclass IERC20MetadataFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IERC20MetadataFactory = IERC20MetadataFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n"],"names":[],"mappings":"AAAA;AACA,6CAA6C,GAC7C,kBAAkB,GAClB,kBAAkB,GAClB,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,qBAAqB,GAAG,KAAK;AACrC,MAAM;AACN,MAAM;IACF,OAAO,QAAQ,OAAO,EAAE,gBAAgB,EAAE;QACtC,OAAO,IAAI,SAAS,QAAQ,CAAC,SAAS,MAAM;IAChD;AACJ;AACA,QAAQ,qBAAqB,GAAG;AAChC,MAAM,OAAO;IACT;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;CACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2358, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/typechain/IL1BridgeFactory.js"],"sourcesContent":["\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IL1BridgeFactory = void 0;\nconst ethers_1 = require(\"ethers\");\nclass IL1BridgeFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IL1BridgeFactory = IL1BridgeFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"ClaimedFailedDeposit\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"DepositInitiated\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"l1Token\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"WithdrawalFinalized\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_depositSender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_l2TxHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBlock\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"claimFailedDeposit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l2Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2TxGasLimit\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2TxGasPerPubdataByte\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"deposit\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"txHash\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint16\",\n                name: \"_l2TxNumberInBlock\",\n                type: \"uint16\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_message\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"bytes32[]\",\n                name: \"_merkleProof\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"finalizeWithdrawal\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"_l2BlockNumber\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_l2MessageIndex\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"isWithdrawalFinalized\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l2TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\n"],"names":[],"mappings":"AAAA;AACA,6CAA6C,GAC7C,kBAAkB,GAClB,kBAAkB,GAClB,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,KAAK;AAChC,MAAM;AACN,MAAM;IACF,OAAO,QAAQ,OAAO,EAAE,gBAAgB,EAAE;QACtC,OAAO,IAAI,SAAS,QAAQ,CAAC,SAAS,MAAM;IAChD;AACJ;AACA,QAAQ,gBAAgB,GAAG;AAC3B,MAAM,OAAO;IACT;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;CACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2616, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/typechain/IL2BridgeFactory.js"],"sourcesContent":["\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IL2BridgeFactory = void 0;\nconst ethers_1 = require(\"ethers\");\nclass IL2BridgeFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IL2BridgeFactory = IL2BridgeFactory;\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Sender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l2Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"_data\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"finalizeDeposit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Bridge\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"_l2TokenProxyBytecodeHash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_governor\",\n                type: \"address\",\n            },\n        ],\n        name: \"initialize\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"l1Bridge\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l2Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l1TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"l2TokenAddress\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_l2Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"withdraw\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n"],"names":[],"mappings":"AAAA;AACA,6CAA6C,GAC7C,kBAAkB,GAClB,kBAAkB,GAClB,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,KAAK;AAChC,MAAM;AACN,MAAM;IACF,OAAO,QAAQ,OAAO,EAAE,gBAAgB,EAAE;QACtC,OAAO,IAAI,SAAS,QAAQ,CAAC,SAAS,MAAM;IAChD;AACJ;AACA,QAAQ,gBAAgB,GAAG;AAC3B,MAAM,OAAO;IACT;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;CACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2765, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/typechain/IAllowListFactory.js"],"sourcesContent":["\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IAllowListFactory = void 0;\nconst ethers_1 = require(\"ethers\");\nclass IAllowListFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IAllowListFactory = IAllowListFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"target\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IAllowList.AccessMode\",\n                name: \"previousMode\",\n                type: \"uint8\",\n            },\n            {\n                indexed: false,\n                internalType: \"enum IAllowList.AccessMode\",\n                name: \"newMode\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"UpdateAccessMode\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"caller\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"target\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes4\",\n                name: \"functionSig\",\n                type: \"bytes4\",\n            },\n            {\n                indexed: false,\n                internalType: \"bool\",\n                name: \"status\",\n                type: \"bool\",\n            },\n        ],\n        name: \"UpdateCallPermission\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_caller\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_functionSig\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"canCall\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n        ],\n        name: \"getAccessMode\",\n        outputs: [\n            {\n                internalType: \"enum IAllowList.AccessMode\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n        ],\n        name: \"getTokenDepositLimitData\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bool\",\n                        name: \"depositLimitation\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"uint256\",\n                        name: \"depositCap\",\n                        type: \"uint256\",\n                    },\n                ],\n                internalType: \"struct IAllowList.Deposit\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_caller\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_functionSig\",\n                type: \"bytes4\",\n            },\n        ],\n        name: \"hasSpecialAccessToCall\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n            {\n                internalType: \"enum IAllowList.AccessMode\",\n                name: \"_accessMode\",\n                type: \"uint8\",\n            },\n        ],\n        name: \"setAccessMode\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_targets\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"enum IAllowList.AccessMode[]\",\n                name: \"_accessMode\",\n                type: \"uint8[]\",\n            },\n        ],\n        name: \"setBatchAccessMode\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address[]\",\n                name: \"_callers\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"address[]\",\n                name: \"_targets\",\n                type: \"address[]\",\n            },\n            {\n                internalType: \"bytes4[]\",\n                name: \"_functionSigs\",\n                type: \"bytes4[]\",\n            },\n            {\n                internalType: \"bool[]\",\n                name: \"_enables\",\n                type: \"bool[]\",\n            },\n        ],\n        name: \"setBatchPermissionToCall\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Token\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_depositLimitation\",\n                type: \"bool\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_depositCap\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"setDepositLimit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_caller\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_target\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes4\",\n                name: \"_functionSig\",\n                type: \"bytes4\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"_enable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setPermissionToCall\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\n"],"names":[],"mappings":"AAAA;AACA,6CAA6C,GAC7C,kBAAkB,GAClB,kBAAkB,GAClB,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,iBAAiB,GAAG,KAAK;AACjC,MAAM;AACN,MAAM;IACF,OAAO,QAAQ,OAAO,EAAE,gBAAgB,EAAE;QACtC,OAAO,IAAI,SAAS,QAAQ,CAAC,SAAS,MAAM;IAChD;AACJ;AACA,QAAQ,iBAAiB,GAAG;AAC5B,MAAM,OAAO;IACT;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,YAAY;oBACR;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;oBACA;wBACI,cAAc;wBACd,MAAM;wBACN,MAAM;oBACV;iBACH;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;CACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3063, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/typechain/IEthTokenFactory.js"],"sourcesContent":["\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IEthTokenFactory = void 0;\nconst ethers_1 = require(\"ethers\");\nclass IEthTokenFactory {\n    static connect(address, signerOrProvider) {\n        return new ethers_1.Contract(address, _abi, signerOrProvider);\n    }\n}\nexports.IEthTokenFactory = IEthTokenFactory;\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Mint\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Withdrawal\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_account\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"mint\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"_to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"_amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFromTo\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"_l1Receiver\",\n                type: \"address\",\n            },\n        ],\n        name: \"withdraw\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n];\n"],"names":[],"mappings":"AAAA;AACA,6CAA6C,GAC7C,kBAAkB,GAClB,kBAAkB,GAClB,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,KAAK;AAChC,MAAM;AACN,MAAM;IACF,OAAO,QAAQ,OAAO,EAAE,gBAAgB,EAAE;QACtC,OAAO,IAAI,SAAS,QAAQ,CAAC,SAAS,MAAM;IAChD;AACJ;AACA,QAAQ,gBAAgB,GAAG;AAC3B,MAAM,OAAO;IACT;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,WAAW;QACX,QAAQ;YACJ;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACL;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;YACA;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;IACA;QACI,QAAQ;YACJ;gBACI,cAAc;gBACd,MAAM;gBACN,MAAM;YACV;SACH;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACV;CACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3270, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/typechain/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IEthTokenFactory = exports.IAllowListFactory = exports.IL2BridgeFactory = exports.IL1BridgeFactory = exports.IERC20MetadataFactory = exports.IZkSyncFactory = void 0;\nvar IZkSyncFactory_1 = require(\"./IZkSyncFactory\");\nObject.defineProperty(exports, \"IZkSyncFactory\", { enumerable: true, get: function () { return IZkSyncFactory_1.IZkSyncFactory; } });\nvar IERC20MetadataFactory_1 = require(\"./IERC20MetadataFactory\");\nObject.defineProperty(exports, \"IERC20MetadataFactory\", { enumerable: true, get: function () { return IERC20MetadataFactory_1.IERC20MetadataFactory; } });\nvar IL1BridgeFactory_1 = require(\"./IL1BridgeFactory\");\nObject.defineProperty(exports, \"IL1BridgeFactory\", { enumerable: true, get: function () { return IL1BridgeFactory_1.IL1BridgeFactory; } });\nvar IL2BridgeFactory_1 = require(\"./IL2BridgeFactory\");\nObject.defineProperty(exports, \"IL2BridgeFactory\", { enumerable: true, get: function () { return IL2BridgeFactory_1.IL2BridgeFactory; } });\nvar IAllowListFactory_1 = require(\"./IAllowListFactory\");\nObject.defineProperty(exports, \"IAllowListFactory\", { enumerable: true, get: function () { return IAllowListFactory_1.IAllowListFactory; } });\nvar IEthTokenFactory_1 = require(\"./IEthTokenFactory\");\nObject.defineProperty(exports, \"IEthTokenFactory\", { enumerable: true, get: function () { return IEthTokenFactory_1.IEthTokenFactory; } });\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,gBAAgB,GAAG,QAAQ,iBAAiB,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,gBAAgB,GAAG,QAAQ,qBAAqB,GAAG,QAAQ,cAAc,GAAG,KAAK;AAC3K,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,kBAAkB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,iBAAiB,cAAc;IAAE;AAAE;AAClI,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,yBAAyB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,wBAAwB,qBAAqB;IAAE;AAAE;AACvJ,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,oBAAoB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,mBAAmB,gBAAgB;IAAE;AAAE;AACxI,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,oBAAoB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,mBAAmB,gBAAgB;IAAE;AAAE;AACxI,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,qBAAqB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,oBAAoB,iBAAiB;IAAE;AAAE;AAC3I,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,oBAAoB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,mBAAmB,gBAAgB;IAAE;AAAE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3322, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/adapters.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdapterL2 = exports.AdapterL1 = void 0;\nconst ethers_1 = require(\"ethers\");\nconst typechain_1 = require(\"../typechain\");\nconst utils_1 = require(\"./utils\");\nfunction AdapterL1(Base) {\n    return class Adapter extends Base {\n        _providerL2() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        _providerL1() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        _signerL1() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        async getMainContract() {\n            const address = await this._providerL2().getMainContractAddress();\n            return typechain_1.IZkSyncFactory.connect(address, this._signerL1());\n        }\n        async getL1BridgeContracts() {\n            const addresses = await this._providerL2().getDefaultBridgeAddresses();\n            return {\n                erc20: typechain_1.IL1BridgeFactory.connect(addresses.erc20L1, this._signerL1())\n            };\n        }\n        async getBalanceL1(token, blockTag) {\n            token !== null && token !== void 0 ? token : (token = utils_1.ETH_ADDRESS);\n            if ((0, utils_1.isETH)(token)) {\n                return await this._providerL1().getBalance(await this.getAddress(), blockTag);\n            }\n            else {\n                const erc20contract = typechain_1.IERC20MetadataFactory.connect(token, this._providerL1());\n                return await erc20contract.balanceOf(await this.getAddress());\n            }\n        }\n        async l2TokenAddress(token) {\n            if (token == utils_1.ETH_ADDRESS) {\n                return utils_1.ETH_ADDRESS;\n            }\n            else {\n                const erc20Bridge = (await this.getL1BridgeContracts()).erc20;\n                return await erc20Bridge.l2TokenAddress(token);\n            }\n        }\n        async approveERC20(token, amount, overrides) {\n            if ((0, utils_1.isETH)(token)) {\n                throw new Error(\"ETH token can't be approved. The address of the token does not exist on L1.\");\n            }\n            let bridgeAddress = overrides === null || overrides === void 0 ? void 0 : overrides.bridgeAddress;\n            const erc20contract = typechain_1.IERC20MetadataFactory.connect(token, this._signerL1());\n            if (bridgeAddress == null) {\n                bridgeAddress = (await this._providerL2().getDefaultBridgeAddresses()).erc20L1;\n            }\n            else {\n                delete overrides.bridgeAddress;\n            }\n            return await erc20contract.approve(bridgeAddress, amount, overrides);\n        }\n        async getBaseCost(params) {\n            var _a, _b;\n            const zksyncContract = await this.getMainContract();\n            const parameters = { ...(0, utils_1.layer1TxDefaults)(), ...params };\n            (_a = parameters.gasPrice) !== null && _a !== void 0 ? _a : (parameters.gasPrice = await this._providerL1().getGasPrice());\n            (_b = parameters.gasPerPubdataByte) !== null && _b !== void 0 ? _b : (parameters.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            return ethers_1.BigNumber.from(await zksyncContract.l2TransactionBaseCost(parameters.gasPrice, parameters.gasLimit, parameters.gasPerPubdataByte));\n        }\n        async deposit(transaction) {\n            var _a;\n            const depositTx = await this.getDepositTx(transaction);\n            if (transaction.token == utils_1.ETH_ADDRESS) {\n                return this.requestExecute(depositTx);\n            }\n            else {\n                const bridgeContracts = await this.getL1BridgeContracts();\n                if (transaction.approveERC20) {\n                    const approveTx = await this.approveERC20(transaction.token, transaction.amount, {\n                        bridgeAddress: (_a = transaction.bridgeAddress) !== null && _a !== void 0 ? _a : bridgeContracts.erc20.address,\n                        ...transaction.approveOverrides\n                    });\n                    await approveTx.wait();\n                }\n                return await this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(depositTx));\n            }\n        }\n        async estimateGasDeposit(transaction) {\n            const depositTx = await this.getDepositTx(transaction);\n            if (transaction.token == utils_1.ETH_ADDRESS) {\n                return await this.estimateGasRequestExecute(depositTx);\n            }\n            else {\n                return await this._providerL1().estimateGas(depositTx);\n            }\n        }\n        async getDepositTx(transaction) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            const bridgeContracts = await this.getL1BridgeContracts();\n            if (transaction.bridgeAddress) {\n                bridgeContracts.erc20.attach(transaction.bridgeAddress);\n            }\n            const { ...tx } = transaction;\n            (_a = tx.to) !== null && _a !== void 0 ? _a : (tx.to = await this.getAddress());\n            (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : (tx.operatorTip = ethers_1.BigNumber.from(0));\n            (_c = tx.overrides) !== null && _c !== void 0 ? _c : (tx.overrides = {});\n            (_d = tx.gasPerPubdataByte) !== null && _d !== void 0 ? _d : (tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            (_e = tx.l2GasLimit) !== null && _e !== void 0 ? _e : (tx.l2GasLimit = await (0, utils_1.estimateDefaultBridgeDepositL2Gas)(this._providerL1(), this._providerL2(), tx.token, tx.amount, tx.to, await this.getAddress(), tx.gasPerPubdataByte));\n            const { to, token, amount, operatorTip, overrides } = tx;\n            await insertGasPrice(this._providerL1(), overrides);\n            const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;\n            const zksyncContract = await this.getMainContract();\n            const baseCost = await zksyncContract.l2TransactionBaseCost(await gasPriceForEstimation, tx.l2GasLimit, tx.gasPerPubdataByte);\n            if (token == utils_1.ETH_ADDRESS) {\n                (_f = overrides.value) !== null && _f !== void 0 ? _f : (overrides.value = baseCost.add(operatorTip).add(amount));\n                return {\n                    contractAddress: to,\n                    calldata: '0x',\n                    l2Value: amount,\n                    // For some reason typescript can not deduce that we've already set the\n                    // tx.l2GasLimit\n                    l2GasLimit: tx.l2GasLimit,\n                    ...tx\n                };\n            }\n            else {\n                const args = [\n                    to,\n                    token,\n                    amount,\n                    tx.l2GasLimit,\n                    tx.gasPerPubdataByte\n                ];\n                (_g = overrides.value) !== null && _g !== void 0 ? _g : (overrides.value = baseCost.add(operatorTip));\n                await (0, utils_1.checkBaseCost)(baseCost, overrides.value);\n                // TODO: compatibility layer: using the old API which uses msg.sender as the\n                // refund recipient, to make the SDK compatible with the old contracts.\n                // const contract = bridgeContracts.erc20 as ethers.Contract;\n                return await bridgeContracts.erc20.populateTransaction.deposit(...args, overrides);\n            }\n        }\n        async _getWithdrawalLog(withdrawalHash, index = 0) {\n            const hash = ethers_1.ethers.utils.hexlify(withdrawalHash);\n            const receipt = await this._providerL2().getTransactionReceipt(hash);\n            const log = receipt.logs.filter((log) => log.address == utils_1.L1_MESSENGER_ADDRESS &&\n                log.topics[0] == ethers_1.ethers.utils.id('L1MessageSent(address,bytes32,bytes)'))[index];\n            return {\n                log,\n                l1BatchTxId: receipt.l1BatchTxIndex\n            };\n        }\n        async _getWithdrawalL2ToL1Log(withdrawalHash, index = 0) {\n            const hash = ethers_1.ethers.utils.hexlify(withdrawalHash);\n            const receipt = await this._providerL2().getTransactionReceipt(hash);\n            const messages = Array.from(receipt.l2ToL1Logs.entries()).filter(([_, log]) => log.sender == utils_1.L1_MESSENGER_ADDRESS);\n            const [l2ToL1LogIndex, l2ToL1Log] = messages[index];\n            return {\n                l2ToL1LogIndex,\n                l2ToL1Log\n            };\n        }\n        async finalizeWithdrawalParams(withdrawalHash, index = 0) {\n            const { log, l1BatchTxId } = await this._getWithdrawalLog(withdrawalHash, index);\n            const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);\n            const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);\n            const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);\n            const message = ethers_1.ethers.utils.defaultAbiCoder.decode(['bytes'], log.data)[0];\n            return {\n                l1BatchNumber: log.l1BatchNumber,\n                l2MessageIndex: proof.id,\n                l2TxNumberInBlock: l1BatchTxId,\n                message,\n                sender,\n                proof: proof.proof\n            };\n        }\n        async finalizeWithdrawal(withdrawalHash, index = 0, overrides) {\n            const { l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, sender, proof } = await this.finalizeWithdrawalParams(withdrawalHash, index);\n            if ((0, utils_1.isETH)(sender)) {\n                const contractAddress = await this._providerL2().getMainContractAddress();\n                const zksync = typechain_1.IZkSyncFactory.connect(contractAddress, this._signerL1());\n                return await zksync.finalizeEthWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});\n            }\n            const l2Bridge = typechain_1.IL2BridgeFactory.connect(sender, this._providerL2());\n            const l1Bridge = typechain_1.IL1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._signerL1());\n            return await l1Bridge.finalizeWithdrawal(l1BatchNumber, l2MessageIndex, l2TxNumberInBlock, message, proof, overrides !== null && overrides !== void 0 ? overrides : {});\n        }\n        async isWithdrawalFinalized(withdrawalHash, index = 0) {\n            const { log } = await this._getWithdrawalLog(withdrawalHash, index);\n            const { l2ToL1LogIndex } = await this._getWithdrawalL2ToL1Log(withdrawalHash, index);\n            const sender = ethers_1.ethers.utils.hexDataSlice(log.topics[1], 12);\n            // `getLogProof` is called not to get proof but\n            // to get the index of the corresponding L2->L1 log,\n            // which is returned as `proof.id`.\n            const proof = await this._providerL2().getLogProof(withdrawalHash, l2ToL1LogIndex);\n            if ((0, utils_1.isETH)(sender)) {\n                const contractAddress = await this._providerL2().getMainContractAddress();\n                const zksync = typechain_1.IZkSyncFactory.connect(contractAddress, this._signerL1());\n                return await zksync.isEthWithdrawalFinalized(log.l1BatchNumber, proof.id);\n            }\n            const l2Bridge = typechain_1.IL2BridgeFactory.connect(sender, this._providerL2());\n            const l1Bridge = typechain_1.IL1BridgeFactory.connect(await l2Bridge.l1Bridge(), this._providerL1());\n            return await l1Bridge.isWithdrawalFinalized(log.l1BatchNumber, proof.id);\n        }\n        async claimFailedDeposit(depositHash, overrides) {\n            const receipt = await this._providerL2().getTransactionReceipt(ethers_1.ethers.utils.hexlify(depositHash));\n            const successL2ToL1LogIndex = receipt.l2ToL1Logs.findIndex((l2ToL1log) => l2ToL1log.sender == utils_1.BOOTLOADER_FORMAL_ADDRESS && l2ToL1log.key == depositHash);\n            const successL2ToL1Log = receipt.l2ToL1Logs[successL2ToL1LogIndex];\n            if (successL2ToL1Log.value != ethers_1.ethers.constants.HashZero) {\n                throw new Error('Cannot claim successful deposit');\n            }\n            const tx = await this._providerL2().getTransaction(ethers_1.ethers.utils.hexlify(depositHash));\n            // Undo the aliasing, since the Mailbox contract set it as for contract address.\n            const l1BridgeAddress = (0, utils_1.undoL1ToL2Alias)(receipt.from);\n            const l2BridgeAddress = receipt.to;\n            const l1Bridge = typechain_1.IL1BridgeFactory.connect(l1BridgeAddress, this._signerL1());\n            const l2Bridge = typechain_1.IL2BridgeFactory.connect(l2BridgeAddress, this._providerL2());\n            const calldata = l2Bridge.interface.decodeFunctionData('finalizeDeposit', tx.data);\n            const proof = await this._providerL2().getLogProof(depositHash, successL2ToL1LogIndex);\n            return await l1Bridge.claimFailedDeposit(calldata['_l1Sender'], calldata['_l1Token'], depositHash, receipt.l1BatchNumber, proof.id, receipt.l1BatchTxIndex, proof.proof, overrides !== null && overrides !== void 0 ? overrides : {});\n        }\n        async requestExecute(transaction) {\n            const requestExecuteTx = await this.getRequestExecuteTx(transaction);\n            return this._providerL2().getPriorityOpResponse(await this._signerL1().sendTransaction(requestExecuteTx));\n        }\n        async estimateGasRequestExecute(transaction) {\n            const requestExecuteTx = await this.getRequestExecuteTx(transaction);\n            return this._providerL1().estimateGas(requestExecuteTx);\n        }\n        async getRequestExecuteTx(transaction) {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            const zksyncContract = await this.getMainContract();\n            const { ...tx } = transaction;\n            (_a = tx.l2Value) !== null && _a !== void 0 ? _a : (tx.l2Value = ethers_1.BigNumber.from(0));\n            (_b = tx.operatorTip) !== null && _b !== void 0 ? _b : (tx.operatorTip = ethers_1.BigNumber.from(0));\n            (_c = tx.factoryDeps) !== null && _c !== void 0 ? _c : (tx.factoryDeps = []);\n            (_d = tx.overrides) !== null && _d !== void 0 ? _d : (tx.overrides = {});\n            (_e = tx.gasPerPubdataByte) !== null && _e !== void 0 ? _e : (tx.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n            (_f = tx.refundRecipient) !== null && _f !== void 0 ? _f : (tx.refundRecipient = await this.getAddress());\n            (_g = tx.l2GasLimit) !== null && _g !== void 0 ? _g : (tx.l2GasLimit = await this._providerL2().estimateL1ToL2Execute(transaction));\n            const { contractAddress, l2Value, calldata, l2GasLimit, factoryDeps, operatorTip, overrides, gasPerPubdataByte, refundRecipient } = tx;\n            await insertGasPrice(this._providerL1(), overrides);\n            const gasPriceForEstimation = overrides.maxFeePerGas || overrides.gasPrice;\n            const baseCost = await this.getBaseCost({\n                gasPrice: await gasPriceForEstimation,\n                gasPerPubdataByte,\n                gasLimit: l2GasLimit\n            });\n            (_h = overrides.value) !== null && _h !== void 0 ? _h : (overrides.value = baseCost.add(operatorTip).add(l2Value));\n            await (0, utils_1.checkBaseCost)(baseCost, overrides.value);\n            return await zksyncContract.populateTransaction.requestL2Transaction(contractAddress, l2Value, calldata, l2GasLimit, utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT, factoryDeps, refundRecipient, overrides);\n        }\n    };\n}\nexports.AdapterL1 = AdapterL1;\nfunction AdapterL2(Base) {\n    return class Adapter extends Base {\n        _providerL2() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        _signerL2() {\n            throw new Error('Must be implemented by the derived class!');\n        }\n        async getBalance(token, blockTag = 'committed') {\n            return await this._providerL2().getBalance(await this.getAddress(), blockTag, token);\n        }\n        async getAllBalances() {\n            return await this._providerL2().getAllAccountBalances(await this.getAddress());\n        }\n        async getL2BridgeContracts() {\n            const addresses = await this._providerL2().getDefaultBridgeAddresses();\n            return {\n                erc20: typechain_1.IL2BridgeFactory.connect(addresses.erc20L2, this._signerL2())\n            };\n        }\n        _fillCustomData(data) {\n            var _a, _b;\n            const customData = { ...data };\n            (_a = customData.gasPerPubdata) !== null && _a !== void 0 ? _a : (customData.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT);\n            (_b = customData.factoryDeps) !== null && _b !== void 0 ? _b : (customData.factoryDeps = []);\n            return customData;\n        }\n        async withdraw(transaction) {\n            const withdrawTx = await this._providerL2().getWithdrawTx({\n                from: await this.getAddress(),\n                ...transaction\n            });\n            const txResponse = await this.sendTransaction(withdrawTx);\n            return this._providerL2()._wrapTransaction(txResponse);\n        }\n        async transfer(transaction) {\n            const transferTx = await this._providerL2().getTransferTx({\n                from: await this.getAddress(),\n                ...transaction\n            });\n            const txResponse = await this.sendTransaction(transferTx);\n            return this._providerL2()._wrapTransaction(txResponse);\n        }\n    };\n}\nexports.AdapterL2 = AdapterL2;\n/// @dev This method checks if the overrides contain a gasPrice (or maxFeePerGas), if not it will insert\n/// the maxFeePerGas\nasync function insertGasPrice(l1Provider, overrides) {\n    if (!overrides.gasPrice && !overrides.maxFeePerGas) {\n        const l1FeeData = await l1Provider.getFeeData();\n        // Sometimes baseFeePerGas is not available, so we use gasPrice instead.\n        const baseFee = l1FeeData.lastBaseFeePerGas || l1FeeData.gasPrice;\n        // ethers.js by default uses multiplcation by 2, but since the price for the L2 part\n        // will depend on the L1 part, doubling base fee is typically too much.\n        const maxFeePerGas = baseFee.mul(3).div(2).add(l1FeeData.maxPriorityFeePerGas);\n        overrides.maxFeePerGas = maxFeePerGas;\n        overrides.maxPriorityFeePerGas = l1FeeData.maxPriorityFeePerGas;\n    }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3643, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/signer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.L1Signer = exports.Signer = exports.EIP712Signer = exports.eip712Types = void 0;\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"./utils\");\nconst hash_1 = require(\"@ethersproject/hash\");\nconst adapters_1 = require(\"./adapters\");\nexports.eip712Types = {\n    Transaction: [\n        { name: 'txType', type: 'uint256' },\n        { name: 'from', type: 'uint256' },\n        { name: 'to', type: 'uint256' },\n        { name: 'gasLimit', type: 'uint256' },\n        { name: 'gasPerPubdataByteLimit', type: 'uint256' },\n        { name: 'maxFeePerGas', type: 'uint256' },\n        { name: 'maxPriorityFeePerGas', type: 'uint256' },\n        { name: 'paymaster', type: 'uint256' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'value', type: 'uint256' },\n        { name: 'data', type: 'bytes' },\n        { name: 'factoryDeps', type: 'bytes32[]' },\n        { name: 'paymasterInput', type: 'bytes' }\n    ]\n};\nclass EIP712Signer {\n    constructor(ethSigner, chainId) {\n        this.ethSigner = ethSigner;\n        this.eip712Domain = Promise.resolve(chainId).then((chainId) => ({\n            name: 'zkSync',\n            version: '2',\n            chainId\n        }));\n    }\n    static getSignInput(transaction) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice;\n        const maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n        const gasPerPubdataByteLimit = ((_a = transaction.customData) === null || _a === void 0 ? void 0 : _a.gasPerPubdata) || utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT;\n        const signInput = {\n            txType: transaction.type,\n            from: transaction.from,\n            to: transaction.to,\n            gasLimit: transaction.gasLimit,\n            gasPerPubdataByteLimit: gasPerPubdataByteLimit,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            paymaster: ((_c = (_b = transaction.customData) === null || _b === void 0 ? void 0 : _b.paymasterParams) === null || _c === void 0 ? void 0 : _c.paymaster) || ethers_1.ethers.constants.AddressZero,\n            nonce: transaction.nonce,\n            value: transaction.value,\n            data: transaction.data,\n            factoryDeps: ((_e = (_d = transaction.customData) === null || _d === void 0 ? void 0 : _d.factoryDeps) === null || _e === void 0 ? void 0 : _e.map((dep) => (0, utils_1.hashBytecode)(dep))) || [],\n            paymasterInput: ((_g = (_f = transaction.customData) === null || _f === void 0 ? void 0 : _f.paymasterParams) === null || _g === void 0 ? void 0 : _g.paymasterInput) || '0x'\n        };\n        return signInput;\n    }\n    async sign(transaction) {\n        return await this.ethSigner._signTypedData(await this.eip712Domain, exports.eip712Types, EIP712Signer.getSignInput(transaction));\n    }\n    static getSignedDigest(transaction) {\n        if (!transaction.chainId) {\n            throw Error(\"Transaction chainId isn't set\");\n        }\n        const domain = {\n            name: 'zkSync',\n            version: '2',\n            chainId: transaction.chainId\n        };\n        return hash_1._TypedDataEncoder.hash(domain, exports.eip712Types, EIP712Signer.getSignInput(transaction));\n    }\n}\nexports.EIP712Signer = EIP712Signer;\n// This class is to be used on the frontend, with metamask injection.\n// It only contains L2 operations. For L1 operations, see L1Signer.\n// Sample usage:\n// const provider = new zkweb3.Web3Provider(window.ethereum);\n// const signer = provider.getSigner();\n// const tx = await signer.sendTransaction({ ... });\nclass Signer extends (0, adapters_1.AdapterL2)(ethers_1.ethers.providers.JsonRpcSigner) {\n    _signerL2() {\n        return this;\n    }\n    _providerL2() {\n        return this.provider;\n    }\n    static from(signer) {\n        const newSigner = Object.setPrototypeOf(signer, Signer.prototype);\n        // @ts-ignore\n        newSigner.eip712 = new EIP712Signer(newSigner, newSigner.getChainId());\n        return newSigner;\n    }\n    // an alias with a better name\n    async getNonce(blockTag) {\n        return await this.getTransactionCount(blockTag);\n    }\n    async sendTransaction(transaction) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (transaction.customData == null && transaction.type == null) {\n            // use legacy txs by default\n            transaction.type = 0;\n        }\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            return (await super.sendTransaction(transaction));\n        }\n        else {\n            const address = await this.getAddress();\n            (_a = transaction.from) !== null && _a !== void 0 ? _a : (transaction.from = address);\n            if (transaction.from.toLowerCase() != address.toLowerCase()) {\n                throw new Error('Transaction `from` address mismatch');\n            }\n            transaction.type = utils_1.EIP712_TX_TYPE;\n            (_b = transaction.value) !== null && _b !== void 0 ? _b : (transaction.value = 0);\n            (_c = transaction.data) !== null && _c !== void 0 ? _c : (transaction.data = '0x');\n            (_d = transaction.nonce) !== null && _d !== void 0 ? _d : (transaction.nonce = await this.getNonce());\n            transaction.customData = this._fillCustomData(transaction.customData);\n            (_e = transaction.gasPrice) !== null && _e !== void 0 ? _e : (transaction.gasPrice = await this.provider.getGasPrice());\n            (_f = transaction.gasLimit) !== null && _f !== void 0 ? _f : (transaction.gasLimit = await this.provider.estimateGas(transaction));\n            (_g = transaction.chainId) !== null && _g !== void 0 ? _g : (transaction.chainId = (await this.provider.getNetwork()).chainId);\n            transaction.customData.customSignature = await this.eip712.sign(transaction);\n            const txBytes = (0, utils_1.serialize)(transaction);\n            return await this.provider.sendTransaction(txBytes);\n        }\n    }\n}\nexports.Signer = Signer;\n// This class is to be used on the frontend with metamask injection.\n// It only contains L1 operations. For L2 operations, see Signer.\n// Sample usage:\n// const provider = new ethers.Web3Provider(window.ethereum);\n// const zksyncProvider = new zkweb3.Provider('<rpc_url>');\n// const signer = zkweb3.L1Signer.from(provider.getSigner(), zksyncProvider);\n// const tx = await signer.deposit({ ... });\nclass L1Signer extends (0, adapters_1.AdapterL1)(ethers_1.ethers.providers.JsonRpcSigner) {\n    _providerL2() {\n        return this.providerL2;\n    }\n    _providerL1() {\n        return this.provider;\n    }\n    _signerL1() {\n        return this;\n    }\n    static from(signer, zksyncProvider) {\n        const newSigner = Object.setPrototypeOf(signer, L1Signer.prototype);\n        newSigner.providerL2 = zksyncProvider;\n        return newSigner;\n    }\n    connectToL2(provider) {\n        this.providerL2 = provider;\n        return this;\n    }\n}\nexports.L1Signer = L1Signer;\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,QAAQ,GAAG,QAAQ,MAAM,GAAG,QAAQ,YAAY,GAAG,QAAQ,WAAW,GAAG,KAAK;AACtF,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,QAAQ,WAAW,GAAG;IAClB,aAAa;QACT;YAAE,MAAM;YAAU,MAAM;QAAU;QAClC;YAAE,MAAM;YAAQ,MAAM;QAAU;QAChC;YAAE,MAAM;YAAM,MAAM;QAAU;QAC9B;YAAE,MAAM;YAAY,MAAM;QAAU;QACpC;YAAE,MAAM;YAA0B,MAAM;QAAU;QAClD;YAAE,MAAM;YAAgB,MAAM;QAAU;QACxC;YAAE,MAAM;YAAwB,MAAM;QAAU;QAChD;YAAE,MAAM;YAAa,MAAM;QAAU;QACrC;YAAE,MAAM;YAAS,MAAM;QAAU;QACjC;YAAE,MAAM;YAAS,MAAM;QAAU;QACjC;YAAE,MAAM;YAAQ,MAAM;QAAQ;QAC9B;YAAE,MAAM;YAAe,MAAM;QAAY;QACzC;YAAE,MAAM;YAAkB,MAAM;QAAQ;KAC3C;AACL;AACA,MAAM;IACF,YAAY,SAAS,EAAE,OAAO,CAAE;QAC5B,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,YAAY,GAAG,QAAQ,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,UAAY,CAAC;gBAC5D,MAAM;gBACN,SAAS;gBACT;YACJ,CAAC;IACL;IACA,OAAO,aAAa,WAAW,EAAE;QAC7B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;QAC5B,MAAM,eAAe,YAAY,YAAY,IAAI,YAAY,QAAQ;QACrE,MAAM,uBAAuB,YAAY,oBAAoB,IAAI;QACjE,MAAM,yBAAyB,CAAC,CAAC,KAAK,YAAY,UAAU,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,aAAa,KAAK,QAAQ,6BAA6B;QAC7J,MAAM,YAAY;YACd,QAAQ,YAAY,IAAI;YACxB,MAAM,YAAY,IAAI;YACtB,IAAI,YAAY,EAAE;YAClB,UAAU,YAAY,QAAQ;YAC9B,wBAAwB;YACxB;YACA;YACA,WAAW,CAAC,CAAC,KAAK,CAAC,KAAK,YAAY,UAAU,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,eAAe,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,SAAS,KAAK,SAAS,MAAM,CAAC,SAAS,CAAC,WAAW;YACpM,OAAO,YAAY,KAAK;YACxB,OAAO,YAAY,KAAK;YACxB,MAAM,YAAY,IAAI;YACtB,aAAa,CAAC,CAAC,KAAK,CAAC,KAAK,YAAY,UAAU,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,WAAW,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,GAAG,CAAC,CAAC,MAAQ,CAAC,GAAG,QAAQ,YAAY,EAAE,KAAK,KAAK,EAAE;YAClM,gBAAgB,CAAC,CAAC,KAAK,CAAC,KAAK,YAAY,UAAU,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,eAAe,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAK,IAAI,GAAG,cAAc,KAAK;QAC7K;QACA,OAAO;IACX;IACA,MAAM,KAAK,WAAW,EAAE;QACpB,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,IAAI,CAAC,YAAY,EAAE,QAAQ,WAAW,EAAE,aAAa,YAAY,CAAC;IACvH;IACA,OAAO,gBAAgB,WAAW,EAAE;QAChC,IAAI,CAAC,YAAY,OAAO,EAAE;YACtB,MAAM,MAAM;QAChB;QACA,MAAM,SAAS;YACX,MAAM;YACN,SAAS;YACT,SAAS,YAAY,OAAO;QAChC;QACA,OAAO,OAAO,iBAAiB,CAAC,IAAI,CAAC,QAAQ,QAAQ,WAAW,EAAE,aAAa,YAAY,CAAC;IAChG;AACJ;AACA,QAAQ,YAAY,GAAG;AACvB,qEAAqE;AACrE,mEAAmE;AACnE,gBAAgB;AAChB,6DAA6D;AAC7D,uCAAuC;AACvC,oDAAoD;AACpD,MAAM,eAAe,CAAC,GAAG,WAAW,SAAS,EAAE,SAAS,MAAM,CAAC,SAAS,CAAC,aAAa;IAClF,YAAY;QACR,OAAO,IAAI;IACf;IACA,cAAc;QACV,OAAO,IAAI,CAAC,QAAQ;IACxB;IACA,OAAO,KAAK,MAAM,EAAE;QAChB,MAAM,YAAY,OAAO,cAAc,CAAC,QAAQ,OAAO,SAAS;QAChE,aAAa;QACb,UAAU,MAAM,GAAG,IAAI,aAAa,WAAW,UAAU,UAAU;QACnE,OAAO;IACX;IACA,8BAA8B;IAC9B,MAAM,SAAS,QAAQ,EAAE;QACrB,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC;IAC1C;IACA,MAAM,gBAAgB,WAAW,EAAE;QAC/B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;QAC5B,IAAI,YAAY,UAAU,IAAI,QAAQ,YAAY,IAAI,IAAI,MAAM;YAC5D,4BAA4B;YAC5B,YAAY,IAAI,GAAG;QACvB;QACA,IAAI,YAAY,UAAU,IAAI,QAAQ,YAAY,IAAI,IAAI,QAAQ,cAAc,EAAE;YAC9E,OAAQ,MAAM,KAAK,CAAC,gBAAgB;QACxC,OACK;YACD,MAAM,UAAU,MAAM,IAAI,CAAC,UAAU;YACrC,CAAC,KAAK,YAAY,IAAI,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAM,YAAY,IAAI,GAAG;YAC7E,IAAI,YAAY,IAAI,CAAC,WAAW,MAAM,QAAQ,WAAW,IAAI;gBACzD,MAAM,IAAI,MAAM;YACpB;YACA,YAAY,IAAI,GAAG,QAAQ,cAAc;YACzC,CAAC,KAAK,YAAY,KAAK,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAM,YAAY,KAAK,GAAG;YAC/E,CAAC,KAAK,YAAY,IAAI,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAM,YAAY,IAAI,GAAG;YAC7E,CAAC,KAAK,YAAY,KAAK,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAM,YAAY,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ;YAClG,YAAY,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,UAAU;YACpE,CAAC,KAAK,YAAY,QAAQ,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAM,YAAY,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW;YACpH,CAAC,KAAK,YAAY,QAAQ,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAM,YAAY,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;YACrH,CAAC,KAAK,YAAY,OAAO,MAAM,QAAQ,OAAO,KAAK,IAAI,KAAM,YAAY,OAAO,GAAG,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE,OAAO;YAC7H,YAAY,UAAU,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YAChE,MAAM,UAAU,CAAC,GAAG,QAAQ,SAAS,EAAE;YACvC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;QAC/C;IACJ;AACJ;AACA,QAAQ,MAAM,GAAG;AACjB,oEAAoE;AACpE,iEAAiE;AACjE,gBAAgB;AAChB,6DAA6D;AAC7D,2DAA2D;AAC3D,6EAA6E;AAC7E,4CAA4C;AAC5C,MAAM,iBAAiB,CAAC,GAAG,WAAW,SAAS,EAAE,SAAS,MAAM,CAAC,SAAS,CAAC,aAAa;IACpF,cAAc;QACV,OAAO,IAAI,CAAC,UAAU;IAC1B;IACA,cAAc;QACV,OAAO,IAAI,CAAC,QAAQ;IACxB;IACA,YAAY;QACR,OAAO,IAAI;IACf;IACA,OAAO,KAAK,MAAM,EAAE,cAAc,EAAE;QAChC,MAAM,YAAY,OAAO,cAAc,CAAC,QAAQ,SAAS,SAAS;QAClE,UAAU,UAAU,GAAG;QACvB,OAAO;IACX;IACA,YAAY,QAAQ,EAAE;QAClB,IAAI,CAAC,UAAU,GAAG;QAClB,OAAO,IAAI;IACf;AACJ;AACA,QAAQ,QAAQ,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3845, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/paymaster-utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPaymasterParams = exports.getGeneralPaymasterInput = exports.getApprovalBasedPaymasterInput = exports.IPaymasterFlow = void 0;\nconst ethers_1 = require(\"ethers\");\nexports.IPaymasterFlow = new ethers_1.ethers.utils.Interface(require('../../abi/IPaymasterFlow.json').abi);\nfunction getApprovalBasedPaymasterInput(paymasterInput) {\n    return exports.IPaymasterFlow.encodeFunctionData('approvalBased', [\n        paymasterInput.token,\n        paymasterInput.minimalAllowance,\n        paymasterInput.innerInput\n    ]);\n}\nexports.getApprovalBasedPaymasterInput = getApprovalBasedPaymasterInput;\nfunction getGeneralPaymasterInput(paymasterInput) {\n    return exports.IPaymasterFlow.encodeFunctionData('general', [paymasterInput.innerInput]);\n}\nexports.getGeneralPaymasterInput = getGeneralPaymasterInput;\nfunction getPaymasterParams(paymasterAddress, paymasterInput) {\n    if (paymasterInput.type == 'General') {\n        return {\n            paymaster: paymasterAddress,\n            paymasterInput: getGeneralPaymasterInput(paymasterInput)\n        };\n    }\n    else {\n        return {\n            paymaster: paymasterAddress,\n            paymasterInput: getApprovalBasedPaymasterInput(paymasterInput)\n        };\n    }\n}\nexports.getPaymasterParams = getPaymasterParams;\n"],"names":[],"mappings":"AAAA;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,kBAAkB,GAAG,QAAQ,wBAAwB,GAAG,QAAQ,8BAA8B,GAAG,QAAQ,cAAc,GAAG,KAAK;AACvI,MAAM;AACN,QAAQ,cAAc,GAAG,IAAI,SAAS,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,6FAAyC,GAAG;AACzG,SAAS,+BAA+B,cAAc;IAClD,OAAO,QAAQ,cAAc,CAAC,kBAAkB,CAAC,iBAAiB;QAC9D,eAAe,KAAK;QACpB,eAAe,gBAAgB;QAC/B,eAAe,UAAU;KAC5B;AACL;AACA,QAAQ,8BAA8B,GAAG;AACzC,SAAS,yBAAyB,cAAc;IAC5C,OAAO,QAAQ,cAAc,CAAC,kBAAkB,CAAC,WAAW;QAAC,eAAe,UAAU;KAAC;AAC3F;AACA,QAAQ,wBAAwB,GAAG;AACnC,SAAS,mBAAmB,gBAAgB,EAAE,cAAc;IACxD,IAAI,eAAe,IAAI,IAAI,WAAW;QAClC,OAAO;YACH,WAAW;YACX,gBAAgB,yBAAyB;QAC7C;IACJ,OACK;QACD,OAAO;YACH,WAAW;YACX,gBAAgB,+BAA+B;QACnD;IACJ;AACJ;AACA,QAAQ,kBAAkB,GAAG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3920, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/utils.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.estimateDefaultBridgeDepositL2Gas = exports.isTypedDataSignatureCorrect = exports.isMessageSignatureCorrect = exports.getERC20BridgeCalldata = exports.undoL1ToL2Alias = exports.applyL1ToL2Alias = exports.getL2HashFromPriorityOp = exports.parseTransaction = exports.hashBytecode = exports.serialize = exports.checkBaseCost = exports.createAddress = exports.create2Address = exports.getDeployedContracts = exports.getHashedL2ToL1Msg = exports.layer1TxDefaults = exports.sleep = exports.isETH = exports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = exports.DEFAULT_GAS_PER_PUBDATA_LIMIT = exports.MAX_BYTECODE_LEN_BYTES = exports.PRIORITY_OPERATION_L2_TX_TYPE = exports.EIP712_TX_TYPE = exports.EIP1271_MAGIC_VALUE = exports.L1_TO_L2_ALIAS_OFFSET = exports.L2_ETH_TOKEN_ADDRESS = exports.L1_MESSENGER_ADDRESS = exports.CONTRACT_DEPLOYER_ADDRESS = exports.BOOTLOADER_FORMAL_ADDRESS = exports.L2_BRIDGE_ABI = exports.L1_BRIDGE_ABI = exports.IERC1271 = exports.IERC20 = exports.L1_MESSENGER = exports.CONTRACT_DEPLOYER = exports.ZKSYNC_MAIN_ABI = exports.ETH_ADDRESS = void 0;\nconst ethers_1 = require(\"ethers\");\nconst types_1 = require(\"./types\");\nconst signer_1 = require(\"./signer\");\nconst typechain_1 = require(\"../typechain\");\nconst utils_1 = require(\"ethers/lib/utils\");\n__exportStar(require(\"./paymaster-utils\"), exports);\nexports.ETH_ADDRESS = '0x0000000000000000000000000000000000000000';\nexports.ZKSYNC_MAIN_ABI = new ethers_1.utils.Interface(require('../../abi/IZkSync.json').abi);\nexports.CONTRACT_DEPLOYER = new ethers_1.utils.Interface(require('../../abi/ContractDeployer.json').abi);\nexports.L1_MESSENGER = new ethers_1.utils.Interface(require('../../abi/IL1Messenger.json').abi);\nexports.IERC20 = new ethers_1.utils.Interface(require('../../abi/IERC20.json').abi);\nexports.IERC1271 = new ethers_1.utils.Interface(require('../../abi/IERC1271.json').abi);\nexports.L1_BRIDGE_ABI = new ethers_1.utils.Interface(require('../../abi/IL1Bridge.json').abi);\nexports.L2_BRIDGE_ABI = new ethers_1.utils.Interface(require('../../abi/IL2Bridge.json').abi);\nexports.BOOTLOADER_FORMAL_ADDRESS = '0x0000000000000000000000000000000000008001';\nexports.CONTRACT_DEPLOYER_ADDRESS = '0x0000000000000000000000000000000000008006';\nexports.L1_MESSENGER_ADDRESS = '0x0000000000000000000000000000000000008008';\nexports.L2_ETH_TOKEN_ADDRESS = '0x000000000000000000000000000000000000800a';\nexports.L1_TO_L2_ALIAS_OFFSET = '0x1111000000000000000000000000000000001111';\nexports.EIP1271_MAGIC_VALUE = '0x1626ba7e';\nexports.EIP712_TX_TYPE = 0x71;\nexports.PRIORITY_OPERATION_L2_TX_TYPE = 0xff;\nexports.MAX_BYTECODE_LEN_BYTES = ((1 << 16) - 1) * 32;\n// The large L2 gas per pubdata to sign. This gas is enough to ensure that\n// any reasonable limit will be accepted. Note, that the operator is NOT required to\n// use the honest value of gas per pubdata and it can use any value up to the one signed by the user.\n// In the future releases, we will provide a way to estimate the current gasPerPubdata.\nexports.DEFAULT_GAS_PER_PUBDATA_LIMIT = 50000;\n// It is possible to provide practically any gasPerPubdataByte for L1->L2 transactions, since\n// the cost per gas will be adjusted respectively. We will use 800 as an relatively optimal value for now.\nexports.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT = 800;\nfunction isETH(token) {\n    return token.toLowerCase() == exports.ETH_ADDRESS || token.toLowerCase() == exports.L2_ETH_TOKEN_ADDRESS;\n}\nexports.isETH = isETH;\nfunction sleep(millis) {\n    return new Promise((resolve) => setTimeout(resolve, millis));\n}\nexports.sleep = sleep;\nfunction layer1TxDefaults() {\n    return {\n        queueType: types_1.PriorityQueueType.Deque,\n        opTree: types_1.PriorityOpTree.Full\n    };\n}\nexports.layer1TxDefaults = layer1TxDefaults;\nfunction getHashedL2ToL1Msg(sender, msg, txNumberInBlock) {\n    const encodedMsg = new Uint8Array([\n        0,\n        1,\n        ...ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(txNumberInBlock), 2),\n        ...ethers_1.ethers.utils.arrayify(exports.L1_MESSENGER_ADDRESS),\n        ...ethers_1.ethers.utils.zeroPad(sender, 32),\n        ...ethers_1.ethers.utils.arrayify(ethers_1.ethers.utils.keccak256(msg))\n    ]);\n    return ethers_1.ethers.utils.keccak256(encodedMsg);\n}\nexports.getHashedL2ToL1Msg = getHashedL2ToL1Msg;\nfunction getDeployedContracts(receipt) {\n    const addressBytesLen = 40;\n    const deployedContracts = receipt.logs\n        .filter((log) => log.topics[0] == ethers_1.utils.id('ContractDeployed(address,bytes32,address)') &&\n        log.address == exports.CONTRACT_DEPLOYER_ADDRESS)\n        // Take the last topic (deployed contract address as U256) and extract address from it (U160).\n        .map((log) => {\n        const sender = `0x${log.topics[1].slice(log.topics[1].length - addressBytesLen)}`;\n        const bytesCodehash = log.topics[2];\n        const address = `0x${log.topics[3].slice(log.topics[3].length - addressBytesLen)}`;\n        return {\n            sender: ethers_1.utils.getAddress(sender),\n            bytecodeHash: bytesCodehash,\n            deployedAddress: ethers_1.utils.getAddress(address)\n        };\n    });\n    return deployedContracts;\n}\nexports.getDeployedContracts = getDeployedContracts;\nfunction create2Address(sender, bytecodeHash, salt, input) {\n    const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes('zksyncCreate2'));\n    const inputHash = ethers_1.ethers.utils.keccak256(input);\n    const addressBytes = ethers_1.ethers.utils\n        .keccak256(ethers_1.ethers.utils.concat([prefix, ethers_1.ethers.utils.zeroPad(sender, 32), salt, bytecodeHash, inputHash]))\n        .slice(26);\n    return ethers_1.ethers.utils.getAddress(addressBytes);\n}\nexports.create2Address = create2Address;\nfunction createAddress(sender, senderNonce) {\n    const prefix = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes('zksyncCreate'));\n    const addressBytes = ethers_1.ethers.utils\n        .keccak256(ethers_1.ethers.utils.concat([\n        prefix,\n        ethers_1.ethers.utils.zeroPad(sender, 32),\n        ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.hexlify(senderNonce), 32)\n    ]))\n        .slice(26);\n    return ethers_1.ethers.utils.getAddress(addressBytes);\n}\nexports.createAddress = createAddress;\nasync function checkBaseCost(baseCost, value) {\n    if (baseCost.gt(await value)) {\n        throw new Error(`The base cost of performing the priority operation is higher than the provided value parameter ` +\n            `for the transaction: baseCost: ${baseCost}, provided value: ${value}`);\n    }\n}\nexports.checkBaseCost = checkBaseCost;\nfunction serialize(transaction, signature) {\n    var _a;\n    if (transaction.customData == null && transaction.type != exports.EIP712_TX_TYPE) {\n        return ethers_1.utils.serializeTransaction(transaction, signature);\n    }\n    if (!transaction.chainId) {\n        throw Error(\"Transaction chainId isn't set\");\n    }\n    function formatNumber(value, name) {\n        const result = ethers_1.utils.stripZeros(ethers_1.BigNumber.from(value).toHexString());\n        if (result.length > 32) {\n            throw new Error('invalid length for ' + name);\n        }\n        return result;\n    }\n    if (!transaction.from) {\n        throw new Error('Explicitly providing `from` field is reqiured for EIP712 transactions');\n    }\n    const from = transaction.from;\n    const meta = transaction.customData;\n    let maxFeePerGas = transaction.maxFeePerGas || transaction.gasPrice || 0;\n    let maxPriorityFeePerGas = transaction.maxPriorityFeePerGas || maxFeePerGas;\n    const fields = [\n        formatNumber(transaction.nonce || 0, 'nonce'),\n        formatNumber(maxPriorityFeePerGas, 'maxPriorityFeePerGas'),\n        formatNumber(maxFeePerGas, 'maxFeePerGas'),\n        formatNumber(transaction.gasLimit || 0, 'gasLimit'),\n        transaction.to != null ? ethers_1.utils.getAddress(transaction.to) : '0x',\n        formatNumber(transaction.value || 0, 'value'),\n        transaction.data || '0x'\n    ];\n    if (signature) {\n        const sig = ethers_1.utils.splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, 'recoveryParam'));\n        fields.push(ethers_1.utils.stripZeros(sig.r));\n        fields.push(ethers_1.utils.stripZeros(sig.s));\n    }\n    else {\n        fields.push(formatNumber(transaction.chainId, 'chainId'));\n        fields.push('0x');\n        fields.push('0x');\n    }\n    fields.push(formatNumber(transaction.chainId, 'chainId'));\n    fields.push(ethers_1.utils.getAddress(from));\n    // Add meta\n    fields.push(formatNumber(meta.gasPerPubdata || exports.DEFAULT_GAS_PER_PUBDATA_LIMIT, 'gasPerPubdata'));\n    fields.push(((_a = meta.factoryDeps) !== null && _a !== void 0 ? _a : []).map((dep) => ethers_1.utils.hexlify(dep)));\n    if (meta.customSignature && ethers_1.ethers.utils.arrayify(meta.customSignature).length == 0) {\n        throw new Error('Empty signatures are not supported');\n    }\n    fields.push(meta.customSignature || '0x');\n    if (meta.paymasterParams) {\n        fields.push([meta.paymasterParams.paymaster, ethers_1.ethers.utils.hexlify(meta.paymasterParams.paymasterInput)]);\n    }\n    else {\n        fields.push([]);\n    }\n    return ethers_1.utils.hexConcat([[exports.EIP712_TX_TYPE], ethers_1.utils.RLP.encode(fields)]);\n}\nexports.serialize = serialize;\nfunction hashBytecode(bytecode) {\n    // For getting the consistent length we first convert the bytecode to UInt8Array\n    const bytecodeAsArray = ethers_1.ethers.utils.arrayify(bytecode);\n    if (bytecodeAsArray.length % 32 != 0) {\n        throw new Error('The bytecode length in bytes must be divisible by 32');\n    }\n    if (bytecodeAsArray.length > exports.MAX_BYTECODE_LEN_BYTES) {\n        throw new Error(`Bytecode can not be longer than ${exports.MAX_BYTECODE_LEN_BYTES} bytes`);\n    }\n    const hashStr = ethers_1.ethers.utils.sha256(bytecodeAsArray);\n    const hash = ethers_1.ethers.utils.arrayify(hashStr);\n    // Note that the length of the bytecode\n    // should be provided in 32-byte words.\n    const bytecodeLengthInWords = bytecodeAsArray.length / 32;\n    if (bytecodeLengthInWords % 2 == 0) {\n        throw new Error('Bytecode length in 32-byte words must be odd');\n    }\n    const bytecodeLength = ethers_1.ethers.utils.arrayify(bytecodeLengthInWords);\n    // The bytecode should always take the first 2 bytes of the bytecode hash,\n    // so we pad it from the left in case the length is smaller than 2 bytes.\n    const bytecodeLengthPadded = ethers_1.ethers.utils.zeroPad(bytecodeLength, 2);\n    const codeHashVersion = new Uint8Array([1, 0]);\n    hash.set(codeHashVersion, 0);\n    hash.set(bytecodeLengthPadded, 2);\n    return hash;\n}\nexports.hashBytecode = hashBytecode;\nfunction parseTransaction(payload) {\n    function handleAddress(value) {\n        if (value === '0x') {\n            return null;\n        }\n        return ethers_1.utils.getAddress(value);\n    }\n    function handleNumber(value) {\n        if (value === '0x') {\n            return ethers_1.BigNumber.from(0);\n        }\n        return ethers_1.BigNumber.from(value);\n    }\n    function arrayToPaymasterParams(arr) {\n        if (arr.length == 0) {\n            return undefined;\n        }\n        if (arr.length != 2) {\n            throw new Error(`Invalid paymaster parameters, expected to have length of 2, found ${arr.length}`);\n        }\n        return {\n            paymaster: ethers_1.utils.getAddress(arr[0]),\n            paymasterInput: ethers_1.utils.arrayify(arr[1])\n        };\n    }\n    const bytes = ethers_1.utils.arrayify(payload);\n    if (bytes[0] != exports.EIP712_TX_TYPE) {\n        return ethers_1.utils.parseTransaction(bytes);\n    }\n    const raw = ethers_1.utils.RLP.decode(bytes.slice(1));\n    const transaction = {\n        type: exports.EIP712_TX_TYPE,\n        nonce: handleNumber(raw[0]).toNumber(),\n        maxPriorityFeePerGas: handleNumber(raw[1]),\n        maxFeePerGas: handleNumber(raw[2]),\n        gasLimit: handleNumber(raw[3]),\n        to: handleAddress(raw[4]),\n        value: handleNumber(raw[5]),\n        data: raw[6],\n        chainId: handleNumber(raw[10]),\n        from: handleAddress(raw[11]),\n        customData: {\n            gasPerPubdata: handleNumber(raw[12]),\n            factoryDeps: raw[13],\n            customSignature: raw[14],\n            paymasterParams: arrayToPaymasterParams(raw[15])\n        }\n    };\n    const ethSignature = {\n        v: handleNumber(raw[7]).toNumber(),\n        r: raw[8],\n        s: raw[9]\n    };\n    if ((ethers_1.utils.hexlify(ethSignature.r) == '0x' || ethers_1.utils.hexlify(ethSignature.s) == '0x') &&\n        !transaction.customData.customSignature) {\n        return transaction;\n    }\n    if (ethSignature.v !== 0 && ethSignature.v !== 1 && !transaction.customData.customSignature) {\n        throw new Error('Failed to parse signature');\n    }\n    if (!transaction.customData.customSignature) {\n        transaction.v = ethSignature.v;\n        transaction.s = ethSignature.s;\n        transaction.r = ethSignature.r;\n    }\n    transaction.hash = eip712TxHash(transaction, ethSignature);\n    return transaction;\n}\nexports.parseTransaction = parseTransaction;\nfunction getSignature(transaction, ethSignature) {\n    var _a;\n    if (((_a = transaction === null || transaction === void 0 ? void 0 : transaction.customData) === null || _a === void 0 ? void 0 : _a.customSignature) && transaction.customData.customSignature.length) {\n        return ethers_1.ethers.utils.arrayify(transaction.customData.customSignature);\n    }\n    if (!ethSignature) {\n        throw new Error('No signature provided');\n    }\n    const r = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.r), 32);\n    const s = ethers_1.ethers.utils.zeroPad(ethers_1.ethers.utils.arrayify(ethSignature.s), 32);\n    const v = ethSignature.v;\n    return new Uint8Array([...r, ...s, v]);\n}\nfunction eip712TxHash(transaction, ethSignature) {\n    const signedDigest = signer_1.EIP712Signer.getSignedDigest(transaction);\n    const hashedSignature = ethers_1.ethers.utils.keccak256(getSignature(transaction, ethSignature));\n    return ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.hexConcat([signedDigest, hashedSignature]));\n}\nfunction getL2HashFromPriorityOp(txReceipt, zkSyncAddress) {\n    let txHash = null;\n    for (const log of txReceipt.logs) {\n        if (log.address.toLowerCase() != zkSyncAddress.toLowerCase()) {\n            continue;\n        }\n        try {\n            const priorityQueueLog = exports.ZKSYNC_MAIN_ABI.parseLog(log);\n            if (priorityQueueLog && priorityQueueLog.args.txHash != null) {\n                txHash = priorityQueueLog.args.txHash;\n            }\n        }\n        catch { }\n    }\n    if (!txHash) {\n        throw new Error('Failed to parse tx logs');\n    }\n    return txHash;\n}\nexports.getL2HashFromPriorityOp = getL2HashFromPriorityOp;\nconst ADDRESS_MODULO = ethers_1.BigNumber.from(2).pow(160);\nfunction applyL1ToL2Alias(address) {\n    return ethers_1.ethers.utils.hexlify(ethers_1.ethers.BigNumber.from(address).add(exports.L1_TO_L2_ALIAS_OFFSET).mod(ADDRESS_MODULO));\n}\nexports.applyL1ToL2Alias = applyL1ToL2Alias;\nfunction undoL1ToL2Alias(address) {\n    let result = ethers_1.ethers.BigNumber.from(address).sub(exports.L1_TO_L2_ALIAS_OFFSET);\n    if (result.lt(ethers_1.BigNumber.from(0))) {\n        result = result.add(ADDRESS_MODULO);\n    }\n    return ethers_1.ethers.utils.hexlify(result);\n}\nexports.undoL1ToL2Alias = undoL1ToL2Alias;\n/// Getters data used to correctly initialize the L1 token counterpart on L2\nasync function getERC20GettersData(l1TokenAddress, provider) {\n    const token = typechain_1.IERC20MetadataFactory.connect(l1TokenAddress, provider);\n    const name = await token.name();\n    const symbol = await token.symbol();\n    const decimals = await token.decimals();\n    const coder = new utils_1.AbiCoder();\n    const nameBytes = coder.encode(['string'], [name]);\n    const symbolBytes = coder.encode(['string'], [symbol]);\n    const decimalsBytes = coder.encode(['uint256'], [decimals]);\n    return coder.encode(['bytes', 'bytes', 'bytes'], [nameBytes, symbolBytes, decimalsBytes]);\n}\n/// The method that returns the calldata that will be sent by an L1 ERC20 bridge to its L2 counterpart\n/// during bridging of a token.\nasync function getERC20BridgeCalldata(l1TokenAddress, l1Sender, l2Receiver, amount, provider) {\n    const gettersData = await getERC20GettersData(l1TokenAddress, provider);\n    return exports.L2_BRIDGE_ABI.encodeFunctionData('finalizeDeposit', [\n        l1Sender,\n        l2Receiver,\n        l1TokenAddress,\n        amount,\n        gettersData\n    ]);\n}\nexports.getERC20BridgeCalldata = getERC20BridgeCalldata;\n// The method with similar functionality is already available in ethers.js,\n// the only difference is that we provide additional `try { } catch { }`\n// for error-resilience.\n//\n// It will also pave the road for allowing future EIP-1271 signature verification, by\n// letting our SDK have functionality to verify signatures.\nfunction isECDSASignatureCorrect(address, msgHash, signature) {\n    try {\n        return address == ethers_1.ethers.utils.recoverAddress(msgHash, signature);\n    }\n    catch {\n        // In case ECDSA signature verification has thrown an error,\n        // we simply consider the signature as incorrect.\n        return false;\n    }\n}\nasync function isEIP1271SignatureCorrect(provider, address, msgHash, signature) {\n    const accountContract = new ethers_1.ethers.Contract(address, exports.IERC1271, provider);\n    // This line may throw an exception if the contract does not implement the EIP1271 correctly.\n    // But it may also throw an exception in case the internet connection is lost.\n    // It is the caller's responsibility to handle the exception.\n    const result = await accountContract.isValidSignature(msgHash, signature);\n    return result == exports.EIP1271_MAGIC_VALUE;\n}\nasync function isSignatureCorrect(provider, address, msgHash, signature) {\n    let isContractAccount = false;\n    const code = await provider.getCode(address);\n    isContractAccount = ethers_1.ethers.utils.arrayify(code).length != 0;\n    if (!isContractAccount) {\n        return isECDSASignatureCorrect(address, msgHash, signature);\n    }\n    else {\n        return await isEIP1271SignatureCorrect(provider, address, msgHash, signature);\n    }\n}\n// Returns `true` or `false` depending on whether or not the account abstraction's\n// signature is correct. Note, that while currently it does not do any `async` actions.\n// in the future it will. That's why the `Promise<boolean>` is returned.\nasync function isMessageSignatureCorrect(provider, address, message, signature) {\n    const msgHash = ethers_1.ethers.utils.hashMessage(message);\n    return await isSignatureCorrect(provider, address, msgHash, signature);\n}\nexports.isMessageSignatureCorrect = isMessageSignatureCorrect;\n// Returns `true` or `false` depending on whether or not the account abstraction's\n// EIP712 signature is correct. Note, that while currently it does not do any `async` actions.\n// in the future it will. That's why the `Promise<boolean>` is returned.\nasync function isTypedDataSignatureCorrect(provider, address, domain, types, value, signature) {\n    const msgHash = ethers_1.ethers.utils._TypedDataEncoder.hash(domain, types, value);\n    return await isSignatureCorrect(provider, address, msgHash, signature);\n}\nexports.isTypedDataSignatureCorrect = isTypedDataSignatureCorrect;\nasync function estimateDefaultBridgeDepositL2Gas(providerL1, providerL2, token, amount, to, from, gasPerPubdataByte) {\n    // If the `from` address is not provided, we use a random address, because\n    // due to storage slot aggregation, the gas estimation will depend on the address\n    // and so estimation for the zero address may be smaller than for the sender.\n    from !== null && from !== void 0 ? from : (from = ethers_1.ethers.Wallet.createRandom().address);\n    if (token == exports.ETH_ADDRESS) {\n        return await providerL2.estimateL1ToL2Execute({\n            contractAddress: to,\n            gasPerPubdataByte: gasPerPubdataByte,\n            caller: from,\n            calldata: '0x',\n            l2Value: amount\n        });\n    }\n    else {\n        const l1ERC20BridgeAddresses = (await providerL2.getDefaultBridgeAddresses()).erc20L1;\n        const erc20BridgeAddress = (await providerL2.getDefaultBridgeAddresses()).erc20L2;\n        const calldata = await getERC20BridgeCalldata(token, from, to, amount, providerL1);\n        return await providerL2.estimateL1ToL2Execute({\n            caller: applyL1ToL2Alias(l1ERC20BridgeAddresses),\n            contractAddress: erc20BridgeAddress,\n            gasPerPubdataByte: gasPerPubdataByte,\n            calldata: calldata\n        });\n    }\n}\nexports.estimateDefaultBridgeDepositL2Gas = estimateDefaultBridgeDepositL2Gas;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4393, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/wallet.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Wallet = void 0;\nconst signer_1 = require(\"./signer\");\nconst utils_1 = require(\"./utils\");\nconst ethers_1 = require(\"ethers\");\nconst adapters_1 = require(\"./adapters\");\nclass Wallet extends (0, adapters_1.AdapterL2)((0, adapters_1.AdapterL1)(ethers_1.ethers.Wallet)) {\n    _providerL1() {\n        if (this.providerL1 == null) {\n            throw new Error('L1 provider missing: use `connectToL1` to specify');\n        }\n        return this.providerL1;\n    }\n    _providerL2() {\n        return this.provider;\n    }\n    _signerL1() {\n        return this.ethWallet();\n    }\n    _signerL2() {\n        return this;\n    }\n    ethWallet() {\n        return new ethers_1.ethers.Wallet(this._signingKey(), this._providerL1());\n    }\n    // an alias with a better name\n    async getNonce(blockTag) {\n        return await this.getTransactionCount(blockTag);\n    }\n    connect(provider) {\n        return new Wallet(this._signingKey(), provider, this.providerL1);\n    }\n    connectToL1(provider) {\n        return new Wallet(this._signingKey(), this.provider, provider);\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        const wallet = super.fromMnemonic(mnemonic, path, wordlist);\n        return new Wallet(wallet._signingKey());\n    }\n    static async fromEncryptedJson(json, password, callback) {\n        const wallet = await super.fromEncryptedJson(json, password, callback);\n        return new Wallet(wallet._signingKey());\n    }\n    static fromEncryptedJsonSync(json, password) {\n        const wallet = super.fromEncryptedJsonSync(json, password);\n        return new Wallet(wallet._signingKey());\n    }\n    static createRandom(options) {\n        const wallet = super.createRandom(options);\n        return new Wallet(wallet._signingKey());\n    }\n    constructor(privateKey, providerL2, providerL1) {\n        super(privateKey, providerL2);\n        if (this.provider != null) {\n            const chainId = this.getChainId();\n            // @ts-ignore\n            this.eip712 = new signer_1.EIP712Signer(this, chainId);\n        }\n        this.providerL1 = providerL1;\n    }\n    async populateTransaction(transaction) {\n        var _a, _b;\n        if (transaction.type == null && transaction.customData == null) {\n            // use legacy txs by default\n            transaction.type = 0;\n        }\n        transaction = await super.populateTransaction(transaction);\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            return transaction;\n        }\n        transaction.type = utils_1.EIP712_TX_TYPE;\n        (_a = transaction.value) !== null && _a !== void 0 ? _a : (transaction.value = 0);\n        (_b = transaction.data) !== null && _b !== void 0 ? _b : (transaction.data = '0x');\n        transaction.customData = this._fillCustomData(transaction.customData);\n        transaction.gasPrice = await this.provider.getGasPrice();\n        return transaction;\n    }\n    async signTransaction(transaction) {\n        var _a;\n        if (transaction.customData == null && transaction.type != utils_1.EIP712_TX_TYPE) {\n            if (transaction.type == 2 && transaction.maxFeePerGas == null) {\n                transaction.maxFeePerGas = await this.provider.getGasPrice();\n            }\n            return await super.signTransaction(transaction);\n        }\n        else {\n            (_a = transaction.from) !== null && _a !== void 0 ? _a : (transaction.from = this.address);\n            if (transaction.from.toLowerCase() != this.address.toLowerCase()) {\n                throw new Error('Transaction `from` address mismatch');\n            }\n            transaction.customData.customSignature = await this.eip712.sign(transaction);\n            return (0, utils_1.serialize)(transaction);\n        }\n    }\n    async sendTransaction(transaction) {\n        // Typescript isn't smart enough to recognise that wallet.sendTransaction\n        // calls provider.sendTransaction which returns our extended type and not ethers' one.\n        return (await super.sendTransaction(transaction));\n    }\n}\nexports.Wallet = Wallet;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4501, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/provider.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Web3Provider = exports.Provider = void 0;\nconst ethers_1 = require(\"ethers\");\nvar Formatter = ethers_1.providers.Formatter;\nconst web_1 = require(\"@ethersproject/web\");\nconst typechain_1 = require(\"../typechain\");\nconst types_1 = require(\"./types\");\nconst utils_1 = require(\"./utils\");\nconst signer_1 = require(\"./signer\");\nlet defaultFormatter = null;\nclass Provider extends ethers_1.ethers.providers.JsonRpcProvider {\n    async getTransactionReceipt(transactionHash) {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n        return (0, web_1.poll)(async () => {\n            const result = await this.perform('getTransactionReceipt', params);\n            if (result == null) {\n                if (this._emitted['t:' + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n            if (result.blockNumber == null && result.status != null && ethers_1.BigNumber.from(result.status).isZero()) {\n                // transaction is rejected in the state-keeper\n                return {\n                    ...this.formatter.receipt({\n                        ...result,\n                        confirmations: 1,\n                        blockNumber: 0,\n                        blockHash: ethers_1.ethers.constants.HashZero\n                    }),\n                    blockNumber: null,\n                    blockHash: null,\n                    l1BatchNumber: null,\n                    l1BatchTxIndex: null\n                };\n            }\n            if (result.blockHash == null) {\n                // receipt is not ready\n                return undefined;\n            }\n            else {\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = blockNumber - receipt.blockNumber + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }\n        }, { oncePoll: this });\n    }\n    async getBlock(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, false);\n    }\n    async getBlockWithTransactions(blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, true);\n    }\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n            const number = defaultFormatter.number.bind(defaultFormatter);\n            const boolean = defaultFormatter.boolean.bind(defaultFormatter);\n            const hash = defaultFormatter.hash.bind(defaultFormatter);\n            const address = defaultFormatter.address.bind(defaultFormatter);\n            defaultFormatter.formats.receiptLog.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.l2Tol1Log = {\n                blockNumber: number,\n                blockHash: hash,\n                l1BatchNumber: Formatter.allowNull(number),\n                transactionIndex: number,\n                shardId: number,\n                isService: boolean,\n                sender: address,\n                key: hash,\n                value: hash,\n                transactionHash: hash,\n                logIndex: number\n            };\n            defaultFormatter.formats.receipt.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.receipt.l1BatchTxIndex = Formatter.allowNull(number);\n            defaultFormatter.formats.receipt.l2ToL1Logs = Formatter.arrayOf((value) => Formatter.check(defaultFormatter.formats.l2Tol1Log, value));\n            defaultFormatter.formats.block.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.block.l1BatchTimestamp = Formatter.allowNull(number);\n            defaultFormatter.formats.blockWithTransactions.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.blockWithTransactions.l1BatchTimestamp = Formatter.allowNull(number);\n            defaultFormatter.formats.transaction.l1BatchNumber = Formatter.allowNull(number);\n            defaultFormatter.formats.transaction.l1BatchTxIndex = Formatter.allowNull(number);\n            defaultFormatter.formats.filterLog.l1BatchNumber = Formatter.allowNull(number);\n        }\n        return defaultFormatter;\n    }\n    async getBalance(address, blockTag, tokenAddress) {\n        const tag = this.formatter.blockTag(blockTag);\n        if (tokenAddress == null || (0, utils_1.isETH)(tokenAddress)) {\n            // requesting ETH balance\n            return await super.getBalance(address, tag);\n        }\n        else {\n            try {\n                let token = typechain_1.IERC20MetadataFactory.connect(tokenAddress, this);\n                return await token.balanceOf(address, { blockTag: tag });\n            }\n            catch {\n                return ethers_1.BigNumber.from(0);\n            }\n        }\n    }\n    async l2TokenAddress(token) {\n        if (token == utils_1.ETH_ADDRESS) {\n            return utils_1.ETH_ADDRESS;\n        }\n        else {\n            const erc20BridgeAddress = (await this.getDefaultBridgeAddresses()).erc20L2;\n            const erc20Bridge = typechain_1.IL2BridgeFactory.connect(erc20BridgeAddress, this);\n            return await erc20Bridge.l2TokenAddress(token);\n        }\n    }\n    async l1TokenAddress(token) {\n        if (token == utils_1.ETH_ADDRESS) {\n            return utils_1.ETH_ADDRESS;\n        }\n        else {\n            const erc20BridgeAddress = (await this.getDefaultBridgeAddresses()).erc20L2;\n            const erc20Bridge = typechain_1.IL2BridgeFactory.connect(erc20BridgeAddress, this);\n            return await erc20Bridge.l1TokenAddress(token);\n        }\n    }\n    // This function is used when formatting requests for\n    // eth_call and eth_estimateGas. We override it here\n    // because we have extra stuff to serialize (customData).\n    // This function is for internal use only.\n    static hexlifyTransaction(transaction, allowExtra) {\n        var _a;\n        const result = ethers_1.ethers.providers.JsonRpcProvider.hexlifyTransaction(transaction, {\n            ...allowExtra,\n            customData: true,\n            from: true\n        });\n        if (transaction.customData == null) {\n            return result;\n        }\n        result.eip712Meta = {\n            gasPerPubdata: ethers_1.utils.hexValue((_a = transaction.customData.gasPerPubdata) !== null && _a !== void 0 ? _a : 0)\n        };\n        transaction.type = utils_1.EIP712_TX_TYPE;\n        if (transaction.customData.factoryDeps) {\n            // @ts-ignore\n            result.eip712Meta.factoryDeps = transaction.customData.factoryDeps.map((dep) => \n            // TODO (SMA-1605): we arraify instead of hexlifying because server expects Vec<u8>.\n            //  We should change deserialization there.\n            Array.from(ethers_1.utils.arrayify(dep)));\n        }\n        if (transaction.customData.paymasterParams) {\n            // @ts-ignore\n            result.eip712Meta.paymasterParams = {\n                paymaster: ethers_1.utils.hexlify(transaction.customData.paymasterParams.paymaster),\n                paymasterInput: Array.from(ethers_1.utils.arrayify(transaction.customData.paymasterParams.paymasterInput))\n            };\n        }\n        return result;\n    }\n    async estimateGas(transaction) {\n        await this.getNetwork();\n        const params = await ethers_1.utils.resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n        if (transaction.customData != null) {\n            // @ts-ignore\n            params.transaction.customData = transaction.customData;\n        }\n        const result = await this.perform('estimateGas', params);\n        try {\n            return ethers_1.BigNumber.from(result);\n        }\n        catch (error) {\n            throw new Error(`bad result from backend (estimateGas): ${result}`);\n        }\n    }\n    async estimateGasL1(transaction) {\n        await this.getNetwork();\n        const params = await ethers_1.utils.resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n        if (transaction.customData != null) {\n            // @ts-ignore\n            params.transaction.customData = transaction.customData;\n        }\n        const result = await this.send('zks_estimateGasL1ToL2', [\n            Provider.hexlifyTransaction(params.transaction, { from: true })\n        ]);\n        try {\n            return ethers_1.BigNumber.from(result);\n        }\n        catch (error) {\n            throw new Error(`bad result from backend (zks_estimateGasL1ToL2): ${result}`);\n        }\n    }\n    async getGasPrice(token) {\n        const params = token ? [token] : [];\n        const price = await this.send('eth_gasPrice', params);\n        return ethers_1.BigNumber.from(price);\n    }\n    constructor(url, network) {\n        super(url, network);\n        this.pollingInterval = 500;\n        const blockTag = this.formatter.blockTag.bind(this.formatter);\n        this.formatter.blockTag = (tag) => {\n            if (tag == 'committed' || tag == 'finalized') {\n                return tag;\n            }\n            return blockTag(tag);\n        };\n        this.contractAddresses = {};\n        this.formatter.transaction = utils_1.parseTransaction;\n    }\n    async getMessageProof(blockNumber, sender, messageHash, logIndex) {\n        return await this.send('zks_getL2ToL1MsgProof', [\n            ethers_1.BigNumber.from(blockNumber).toNumber(),\n            sender,\n            ethers_1.ethers.utils.hexlify(messageHash),\n            logIndex\n        ]);\n    }\n    async getLogProof(txHash, index) {\n        return await this.send('zks_getL2ToL1LogProof', [ethers_1.ethers.utils.hexlify(txHash), index]);\n    }\n    async getL1BatchBlockRange(l1BatchNumber) {\n        const range = await this.send('zks_getL1BatchBlockRange', [l1BatchNumber]);\n        if (range == null) {\n            return null;\n        }\n        return [parseInt(range[0], 16), parseInt(range[1], 16)];\n    }\n    async getMainContractAddress() {\n        if (!this.contractAddresses.mainContract) {\n            this.contractAddresses.mainContract = await this.send('zks_getMainContract', []);\n        }\n        return this.contractAddresses.mainContract;\n    }\n    async getTestnetPaymasterAddress() {\n        // Unlike contract's addresses, the testnet paymaster is not cached, since it can be trivially changed\n        // on the fly by the server and should not be relied to be constant\n        return await this.send('zks_getTestnetPaymaster', []);\n    }\n    async getDefaultBridgeAddresses() {\n        if (!this.contractAddresses.erc20BridgeL1) {\n            let addresses = await this.send('zks_getBridgeContracts', []);\n            this.contractAddresses.erc20BridgeL1 = addresses.l1Erc20DefaultBridge;\n            this.contractAddresses.erc20BridgeL2 = addresses.l2Erc20DefaultBridge;\n        }\n        return {\n            erc20L1: this.contractAddresses.erc20BridgeL1,\n            erc20L2: this.contractAddresses.erc20BridgeL2\n        };\n    }\n    async getConfirmedTokens(start = 0, limit = 255) {\n        const tokens = await this.send('zks_getConfirmedTokens', [start, limit]);\n        return tokens.map((token) => ({ address: token.l2Address, ...token }));\n    }\n    async getTokenPrice(token) {\n        return await this.send('zks_getTokenPrice', [token]);\n    }\n    async getAllAccountBalances(address) {\n        let balances = await this.send('zks_getAllAccountBalances', [address]);\n        for (let token in balances) {\n            balances[token] = ethers_1.BigNumber.from(balances[token]);\n        }\n        return balances;\n    }\n    async l1ChainId() {\n        const res = await this.send('zks_L1ChainId', []);\n        return ethers_1.BigNumber.from(res).toNumber();\n    }\n    async getL1BatchNumber() {\n        const number = await this.send('zks_L1BatchNumber', []);\n        return ethers_1.BigNumber.from(number).toNumber();\n    }\n    async getL1BatchDetails(number) {\n        return await this.send('zks_getL1BatchDetails', [number]);\n    }\n    async getBlockDetails(number) {\n        return await this.send('zks_getBlockDetails', [number]);\n    }\n    async getTransactionDetails(txHash) {\n        return await this.send('zks_getTransactionDetails', [txHash]);\n    }\n    async getWithdrawTx(transaction) {\n        var _a, _b, _c;\n        var _d;\n        const { ...tx } = transaction;\n        if (tx.to == null && tx.from == null) {\n            throw new Error('withdrawal target address is undefined');\n        }\n        (_a = tx.to) !== null && _a !== void 0 ? _a : (tx.to = tx.from);\n        (_b = tx.overrides) !== null && _b !== void 0 ? _b : (tx.overrides = {});\n        (_c = (_d = tx.overrides).from) !== null && _c !== void 0 ? _c : (_d.from = tx.from);\n        if ((0, utils_1.isETH)(tx.token)) {\n            if (!tx.overrides.value) {\n                tx.overrides.value = tx.amount;\n            }\n            const passedValue = ethers_1.BigNumber.from(tx.overrides.value);\n            if (!passedValue.eq(tx.amount)) {\n                // To avoid users shooting themselves into the foot, we will always use the amount to withdraw\n                // as the value\n                throw new Error('The tx.value is not equal to the value withdrawn');\n            }\n            const ethL2Token = typechain_1.IEthTokenFactory.connect(utils_1.L2_ETH_TOKEN_ADDRESS, this);\n            return ethL2Token.populateTransaction.withdraw(tx.to, tx.overrides);\n        }\n        if (tx.bridgeAddress == null) {\n            const bridges = await this.getDefaultBridgeAddresses();\n            tx.bridgeAddress = bridges.erc20L2;\n        }\n        const bridge = typechain_1.IL2BridgeFactory.connect(tx.bridgeAddress, this);\n        return bridge.populateTransaction.withdraw(tx.to, tx.token, tx.amount, tx.overrides);\n    }\n    async estimateGasWithdraw(transaction) {\n        const withdrawTx = await this.getWithdrawTx(transaction);\n        return await this.estimateGas(withdrawTx);\n    }\n    async getTransferTx(transaction) {\n        var _a, _b;\n        var _c;\n        const { ...tx } = transaction;\n        (_a = tx.overrides) !== null && _a !== void 0 ? _a : (tx.overrides = {});\n        (_b = (_c = tx.overrides).from) !== null && _b !== void 0 ? _b : (_c.from = tx.from);\n        if (tx.token == null || tx.token == utils_1.ETH_ADDRESS) {\n            return {\n                ...(await ethers_1.ethers.utils.resolveProperties(tx.overrides)),\n                to: tx.to,\n                value: tx.amount\n            };\n        }\n        else {\n            const token = typechain_1.IERC20MetadataFactory.connect(tx.token, this);\n            return await token.populateTransaction.transfer(tx.to, tx.amount, tx.overrides);\n        }\n    }\n    async estimateGasTransfer(transaction) {\n        const transferTx = await this.getTransferTx(transaction);\n        return await this.estimateGas(transferTx);\n    }\n    static getDefaultProvider() {\n        // TODO (SMA-1606): Add different urls for different networks.\n        return new Provider(process.env.ZKSYNC_WEB3_API_URL || 'http://localhost:3050');\n    }\n    async newFilter(filter) {\n        filter = await filter;\n        const id = await this.send('eth_newFilter', [this._prepareFilter(filter)]);\n        return ethers_1.BigNumber.from(id);\n    }\n    async newBlockFilter() {\n        const id = await this.send('eth_newBlockFilter', []);\n        return ethers_1.BigNumber.from(id);\n    }\n    async newPendingTransactionsFilter() {\n        const id = await this.send('eth_newPendingTransactionFilter', []);\n        return ethers_1.BigNumber.from(id);\n    }\n    async getFilterChanges(idx) {\n        const logs = await this.send('eth_getFilterChanges', [idx.toHexString()]);\n        return typeof logs[0] === 'string' ? logs : this._parseLogs(logs);\n    }\n    async getLogs(filter = {}) {\n        filter = await filter;\n        const logs = await this.send('eth_getLogs', [this._prepareFilter(filter)]);\n        return this._parseLogs(logs);\n    }\n    _parseLogs(logs) {\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n    _prepareFilter(filter) {\n        return {\n            ...filter,\n            fromBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.fromBlock),\n            toBlock: filter.fromBlock == null ? null : this.formatter.blockTag(filter.toBlock)\n        };\n    }\n    _wrapTransaction(tx, hash) {\n        const response = super._wrapTransaction(tx, hash);\n        response.waitFinalize = async () => {\n            const receipt = await response.wait();\n            while (true) {\n                const block = await this.getBlock('finalized');\n                if (receipt.blockNumber <= block.number) {\n                    return await this.getTransactionReceipt(receipt.transactionHash);\n                }\n                else {\n                    await (0, utils_1.sleep)(this.pollingInterval);\n                }\n            }\n        };\n        return response;\n    }\n    // This is inefficient. Status should probably be indicated in the transaction receipt.\n    async getTransactionStatus(txHash) {\n        const tx = await this.getTransaction(txHash);\n        if (tx == null) {\n            return types_1.TransactionStatus.NotFound;\n        }\n        if (tx.blockNumber == null) {\n            return types_1.TransactionStatus.Processing;\n        }\n        const verifiedBlock = await this.getBlock('finalized');\n        if (tx.blockNumber <= verifiedBlock.number) {\n            return types_1.TransactionStatus.Finalized;\n        }\n        return types_1.TransactionStatus.Committed;\n    }\n    async getTransaction(hash) {\n        hash = await hash;\n        const tx = await super.getTransaction(hash);\n        return tx ? this._wrapTransaction(tx, hash) : null;\n    }\n    async sendTransaction(transaction) {\n        return (await super.sendTransaction(transaction));\n    }\n    async getL2TransactionFromPriorityOp(l1TxResponse) {\n        const receipt = await l1TxResponse.wait();\n        const l2Hash = (0, utils_1.getL2HashFromPriorityOp)(receipt, await this.getMainContractAddress());\n        let status = null;\n        do {\n            status = await this.getTransactionStatus(l2Hash);\n            await (0, utils_1.sleep)(this.pollingInterval);\n        } while (status == types_1.TransactionStatus.NotFound);\n        return await this.getTransaction(l2Hash);\n    }\n    async getPriorityOpResponse(l1TxResponse) {\n        const l2Response = { ...l1TxResponse };\n        l2Response.waitL1Commit = l2Response.wait;\n        l2Response.wait = async () => {\n            const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);\n            return await l2Tx.wait();\n        };\n        l2Response.waitFinalize = async () => {\n            const l2Tx = await this.getL2TransactionFromPriorityOp(l1TxResponse);\n            return await l2Tx.waitFinalize();\n        };\n        return l2Response;\n    }\n    async getContractAccountInfo(address) {\n        const deployerContract = new ethers_1.Contract(utils_1.CONTRACT_DEPLOYER_ADDRESS, utils_1.CONTRACT_DEPLOYER, this);\n        const data = await deployerContract.getAccountInfo(address);\n        return {\n            supportedAAVersion: data.supportedAAVersion,\n            nonceOrdering: data.nonceOrdering\n        };\n    }\n    // TODO (EVM-3): support refundRecipient for fee estimation\n    async estimateL1ToL2Execute(transaction) {\n        var _a, _b;\n        (_a = transaction.gasPerPubdataByte) !== null && _a !== void 0 ? _a : (transaction.gasPerPubdataByte = utils_1.REQUIRED_L1_TO_L2_GAS_PER_PUBDATA_LIMIT);\n        // If the `from` address is not provided, we use a random address, because\n        // due to storage slot aggregation, the gas estimation will depend on the address\n        // and so estimation for the zero address may be smaller than for the sender.\n        (_b = transaction.caller) !== null && _b !== void 0 ? _b : (transaction.caller = ethers_1.ethers.Wallet.createRandom().address);\n        const customData = {\n            gasPerPubdataByte: transaction.gasPerPubdataByte\n        };\n        if (transaction.factoryDeps) {\n            Object.assign(customData, { factoryDeps: transaction.factoryDeps });\n        }\n        const fee = await this.estimateGasL1({\n            from: transaction.caller,\n            data: transaction.calldata,\n            to: transaction.contractAddress,\n            value: transaction.l2Value,\n            customData\n        });\n        return fee;\n    }\n}\nexports.Provider = Provider;\nclass Web3Provider extends Provider {\n    constructor(provider, network) {\n        if (provider == null) {\n            throw new Error('missing provider');\n        }\n        if (!provider.request) {\n            throw new Error('provider must implement eip-1193');\n        }\n        let path = provider.host || provider.path || (provider.isMetaMask ? 'metamask' : 'eip-1193:');\n        super(path, network);\n        this.provider = provider;\n    }\n    async send(method, params) {\n        params !== null && params !== void 0 ? params : (params = []);\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == 'eth_sign' && (this.provider.isMetaMask || this.provider.isStatus)) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = 'personal_sign';\n            params = [params[1], params[0]];\n        }\n        return await this.provider.request({ method, params });\n    }\n    getSigner(addressOrIndex) {\n        return signer_1.Signer.from(super.getSigner(addressOrIndex));\n    }\n    async estimateGas(transaction) {\n        const gas = await super.estimateGas(transaction);\n        const metamaskMinimum = ethers_1.BigNumber.from(21000);\n        const isEIP712 = transaction.customData != null || transaction.type == utils_1.EIP712_TX_TYPE;\n        return gas.gt(metamaskMinimum) || isEIP712 ? gas : metamaskMinimum;\n    }\n}\nexports.Web3Provider = Web3Provider;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5063, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/contract.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContractFactory = exports.Contract = void 0;\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"./utils\");\nconst types_1 = require(\"./types\");\nvar ethers_2 = require(\"ethers\");\nObject.defineProperty(exports, \"Contract\", { enumerable: true, get: function () { return ethers_2.Contract; } });\nclass ContractFactory extends ethers_1.ethers.ContractFactory {\n    constructor(abi, bytecode, signer, deploymentType) {\n        super(abi, bytecode, signer);\n        this.deploymentType = deploymentType || 'create';\n    }\n    encodeCalldata(salt, bytecodeHash, constructorCalldata) {\n        if (this.deploymentType == 'create') {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData('create', [salt, bytecodeHash, constructorCalldata]);\n        }\n        else if (this.deploymentType == 'createAccount') {\n            return utils_1.CONTRACT_DEPLOYER.encodeFunctionData('createAccount', [\n                salt,\n                bytecodeHash,\n                constructorCalldata,\n                types_1.AccountAbstractionVersion.Version1\n            ]);\n        }\n        else {\n            throw new Error(`Unsupported deployment type ${this.deploymentType}`);\n        }\n    }\n    getDeployTransaction(...args) {\n        var _a, _b, _c;\n        var _d, _e;\n        // TODO (SMA-1585): Users should be able to provide the salt.\n        let salt = '0x0000000000000000000000000000000000000000000000000000000000000000';\n        // The overrides will be popped out in this call:\n        const txRequest = super.getDeployTransaction(...args);\n        // Removing overrides\n        if (this.interface.deploy.inputs.length + 1 == args.length) {\n            args.pop();\n        }\n        // Salt argument is not used, so we provide a placeholder value.\n        const bytecodeHash = (0, utils_1.hashBytecode)(this.bytecode);\n        const constructorCalldata = ethers_1.utils.arrayify(this.interface.encodeDeploy(args));\n        const deployCalldata = this.encodeCalldata(salt, bytecodeHash, constructorCalldata);\n        txRequest.type = utils_1.EIP712_TX_TYPE;\n        txRequest.to = utils_1.CONTRACT_DEPLOYER_ADDRESS;\n        txRequest.data = deployCalldata;\n        (_a = txRequest.customData) !== null && _a !== void 0 ? _a : (txRequest.customData = {});\n        (_b = (_d = txRequest.customData).factoryDeps) !== null && _b !== void 0 ? _b : (_d.factoryDeps = []);\n        (_c = (_e = txRequest.customData).gasPerPubdata) !== null && _c !== void 0 ? _c : (_e.gasPerPubdata = utils_1.DEFAULT_GAS_PER_PUBDATA_LIMIT);\n        // The number of factory deps is relatively low, so it is efficient enough.\n        if (!txRequest.customData.factoryDeps.includes(this.bytecode)) {\n            txRequest.customData.factoryDeps.push(this.bytecode);\n        }\n        return txRequest;\n    }\n    async deploy(...args) {\n        const contract = await super.deploy(...args);\n        const deployTxReceipt = await contract.deployTransaction.wait();\n        const deployedAddresses = (0, utils_1.getDeployedContracts)(deployTxReceipt).map((info) => info.deployedAddress);\n        const contractWithCorrectAddress = new ethers_1.ethers.Contract(deployedAddresses[deployedAddresses.length - 1], contract.interface, contract.signer);\n        ethers_1.utils.defineReadOnly(contractWithCorrectAddress, 'deployTransaction', contract.deployTransaction);\n        return contractWithCorrectAddress;\n    }\n}\nexports.ContractFactory = ContractFactory;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 5143, "column": 0}, "map": {"version":3,"sources":["file:///C:/Ray%20Stuff/NUS/Y3Summer/Projects/Never-Forgotten-Token/never-forgotten-nft/node_modules/zksync-web3/build/src/index.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Contract = exports.ContractFactory = exports.Provider = exports.Web3Provider = exports.Wallet = exports.L1Signer = exports.Signer = exports.EIP712Signer = exports.types = exports.utils = void 0;\nexports.utils = __importStar(require(\"./utils\"));\nexports.types = __importStar(require(\"./types\"));\nvar signer_1 = require(\"./signer\");\nObject.defineProperty(exports, \"EIP712Signer\", { enumerable: true, get: function () { return signer_1.EIP712Signer; } });\nObject.defineProperty(exports, \"Signer\", { enumerable: true, get: function () { return signer_1.Signer; } });\nObject.defineProperty(exports, \"L1Signer\", { enumerable: true, get: function () { return signer_1.L1Signer; } });\nvar wallet_1 = require(\"./wallet\");\nObject.defineProperty(exports, \"Wallet\", { enumerable: true, get: function () { return wallet_1.Wallet; } });\nvar provider_1 = require(\"./provider\");\nObject.defineProperty(exports, \"Web3Provider\", { enumerable: true, get: function () { return provider_1.Web3Provider; } });\nObject.defineProperty(exports, \"Provider\", { enumerable: true, get: function () { return provider_1.Provider; } });\nvar contract_1 = require(\"./contract\");\nObject.defineProperty(exports, \"ContractFactory\", { enumerable: true, get: function () { return contract_1.ContractFactory; } });\nObject.defineProperty(exports, \"Contract\", { enumerable: true, get: function () { return contract_1.Contract; } });\n"],"names":[],"mappings":"AAAA;AACA,IAAI,kBAAkB,AAAC,IAAI,IAAI,IAAI,CAAC,eAAe,IAAK,CAAC,OAAO,MAAM,GAAI,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;IAC1F,IAAI,OAAO,WAAW,KAAK;IAC3B,IAAI,OAAO,OAAO,wBAAwB,CAAC,GAAG;IAC9C,IAAI,CAAC,QAAQ,CAAC,SAAS,OAAO,CAAC,EAAE,UAAU,GAAG,KAAK,QAAQ,IAAI,KAAK,YAAY,GAAG;QACjF,OAAO;YAAE,YAAY;YAAM,KAAK;gBAAa,OAAO,CAAC,CAAC,EAAE;YAAE;QAAE;IAC9D;IACA,OAAO,cAAc,CAAC,GAAG,IAAI;AACjC,IAAM,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;IACtB,IAAI,OAAO,WAAW,KAAK;IAC3B,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;AAChB,CAAE;AACF,IAAI,qBAAqB,AAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,IAAK,CAAC,OAAO,MAAM,GAAI,SAAS,CAAC,EAAE,CAAC;IACzF,OAAO,cAAc,CAAC,GAAG,WAAW;QAAE,YAAY;QAAM,OAAO;IAAE;AACrE,IAAK,SAAS,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,UAAU,GAAG;AACnB,CAAC;AACD,IAAI,eAAe,AAAC,IAAI,IAAI,IAAI,CAAC,YAAY,IAAK,SAAU,GAAG;IAC3D,IAAI,OAAO,IAAI,UAAU,EAAE,OAAO;IAClC,IAAI,SAAS,CAAC;IACd,IAAI,OAAO,MAAM;QAAA,IAAK,IAAI,KAAK,IAAK,IAAI,MAAM,aAAa,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,IAAI,gBAAgB,QAAQ,KAAK;IAAE;IACxI,mBAAmB,QAAQ;IAC3B,OAAO;AACX;AACA,OAAO,cAAc,CAAC,SAAS,cAAc;IAAE,OAAO;AAAK;AAC3D,QAAQ,QAAQ,GAAG,QAAQ,eAAe,GAAG,QAAQ,QAAQ,GAAG,QAAQ,YAAY,GAAG,QAAQ,MAAM,GAAG,QAAQ,QAAQ,GAAG,QAAQ,MAAM,GAAG,QAAQ,YAAY,GAAG,QAAQ,KAAK,GAAG,QAAQ,KAAK,GAAG,KAAK;AACxM,QAAQ,KAAK,GAAG;AAChB,QAAQ,KAAK,GAAG;AAChB,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,gBAAgB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,SAAS,YAAY;IAAE;AAAE;AACtH,OAAO,cAAc,CAAC,SAAS,UAAU;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,SAAS,MAAM;IAAE;AAAE;AAC1G,OAAO,cAAc,CAAC,SAAS,YAAY;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,SAAS,QAAQ;IAAE;AAAE;AAC9G,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,UAAU;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,SAAS,MAAM;IAAE;AAAE;AAC1G,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,gBAAgB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,WAAW,YAAY;IAAE;AAAE;AACxH,OAAO,cAAc,CAAC,SAAS,YAAY;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,WAAW,QAAQ;IAAE;AAAE;AAChH,IAAI;AACJ,OAAO,cAAc,CAAC,SAAS,mBAAmB;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,WAAW,eAAe;IAAE;AAAE;AAC9H,OAAO,cAAc,CAAC,SAAS,YAAY;IAAE,YAAY;IAAM,KAAK;QAAc,OAAO,WAAW,QAAQ;IAAE;AAAE","ignoreList":[0],"debugId":null}}]
}